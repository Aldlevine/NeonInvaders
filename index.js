(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Copyright 2014 Google Inc. All rights reserved.
 *
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file.
 *
 * @fileoverview Description of this file.
 *
 * A polyfill for HTML Canvas features, including
 * Path2D support.
 */
if (CanvasRenderingContext2D.prototype.ellipse == undefined) {
  CanvasRenderingContext2D.prototype.ellipse = function(x, y, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise) {
    this.save();
    this.translate(x, y);
    this.rotate(rotation);
    this.scale(radiusX, radiusY);
    this.arc(0, 0, 1, startAngle, endAngle, antiClockwise);
    this.restore();
  }
}

if (typeof Path2D !== 'function') {
  (function() {

    // Include the SVG path parser.
    parser = (function() {
      /*
       * Generated by PEG.js 0.8.0.
       *
       * http://pegjs.majda.cz/
       */
    
      function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
      }
    
      function SyntaxError(message, expected, found, offset, line, column) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.offset   = offset;
        this.line     = line;
        this.column   = column;
    
        this.name     = "SyntaxError";
      }
    
      peg$subclass(SyntaxError, Error);
    
      function parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},
    
            peg$FAILED = {},
    
            peg$startRuleFunctions = { svg_path: peg$parsesvg_path },
            peg$startRuleFunction  = peg$parsesvg_path,
    
            peg$c0 = peg$FAILED,
            peg$c1 = [],
            peg$c2 = null,
            peg$c3 = function(d) { return ops; },
            peg$c4 = /^[Mm]/,
            peg$c5 = { type: "class", value: "[Mm]", description: "[Mm]" },
            peg$c6 = function(ch, args) {
                  var moveCh = ch
                  // If this is the first move cmd then force it to be absolute.
                  if (firstSubPath) {
                    moveCh = 'M';
                    firstSubPath = false;
                  }
                  ops.push({type: 'moveTo', args: makeAbsolute(moveCh, args[0])});
                  for (var i=1; i < args.length; i++) {
                    // The lineTo args are either abs or relative, depending on the
                    // original moveto command.
                    ops.push({type: 'lineTo', args: makeAbsolute(ch, args[i])});
                  }
                },
            peg$c7 = function(one, rest) { return concatSequence(one, rest); },
            peg$c8 = /^[Zz]/,
            peg$c9 = { type: "class", value: "[Zz]", description: "[Zz]" },
            peg$c10 = function() { ops.push({type: 'closePath', args: []}); },
            peg$c11 = /^[Ll]/,
            peg$c12 = { type: "class", value: "[Ll]", description: "[Ll]" },
            peg$c13 = function(ch, args) {
                  for (var i=0; i < args.length; i++) {
                    ops.push({type: 'lineTo', args: makeAbsolute(ch, args[i])});
                  }
                },
            peg$c14 = /^[Hh]/,
            peg$c15 = { type: "class", value: "[Hh]", description: "[Hh]" },
            peg$c16 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'lineTo', args: makeAbsoluteFromX(ch, args[i])});
                }
              },
            peg$c17 = /^[Vv]/,
            peg$c18 = { type: "class", value: "[Vv]", description: "[Vv]" },
            peg$c19 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'lineTo', args: makeAbsoluteFromY(ch, args[i])});
                }
              },
            peg$c20 = /^[Cc]/,
            peg$c21 = { type: "class", value: "[Cc]", description: "[Cc]" },
            peg$c22 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'bezierCurveTo', args: makeAbsoluteMultiple(ch, args[i])});
                }
              },
            peg$c23 = function(cp1, cp2, last) { return cp1.concat(cp2, last); },
            peg$c24 = /^[Ss]/,
            peg$c25 = { type: "class", value: "[Ss]", description: "[Ss]" },
            peg$c26 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'bezierCurveTo', args: makeReflected().concat(makeAbsoluteMultiple(ch, args[i]))});
                }
              },
            peg$c27 = function(cp1, last) { return cp1.concat(last); },
            peg$c28 = /^[Qq]/,
            peg$c29 = { type: "class", value: "[Qq]", description: "[Qq]" },
            peg$c30 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'quadraticCurveTo', args: makeAbsoluteMultiple(ch, args[i])});
                }
              },
            peg$c31 = /^[Tt]/,
            peg$c32 = { type: "class", value: "[Tt]", description: "[Tt]" },
            peg$c33 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  var reflected = makeReflected();
                  ops.push({type: 'quadraticCurveTo', args: reflected.concat(makeAbsoluteMultiple(ch, args[i]))});
                  lastControl = reflected.slice(0);
                }
              },
            peg$c34 = /^[Aa]/,
            peg$c35 = { type: "class", value: "[Aa]", description: "[Aa]" },
            peg$c36 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  var x1 = [lastCoord.slice()];
                  var x2 = [makeAbsolute(ch, args[i].slice(-2))];
                  absArgs = x1.concat(args[i].slice(0, -2), x2);
                  ellipseFromEllipticalArc.apply(this, absArgs);
                }
              },
            peg$c37 = function(rx, ry, xrot, large, sweep, last) { return [parseFloat(rx), parseFloat(ry), parseFloat(xrot.join('')), parseInt(large), parseInt(sweep), last[0], last[1]]; },
            peg$c38 = function(x, y) { return [x, y] },
            peg$c39 = function(number) { return parseFloat(number.join('')) },
            peg$c40 = "0",
            peg$c41 = { type: "literal", value: "0", description: "\"0\"" },
            peg$c42 = "1",
            peg$c43 = { type: "literal", value: "1", description: "\"1\"" },
            peg$c44 = ",",
            peg$c45 = { type: "literal", value: ",", description: "\",\"" },
            peg$c46 = ".",
            peg$c47 = { type: "literal", value: ".", description: "\".\"" },
            peg$c48 = /^[eE]/,
            peg$c49 = { type: "class", value: "[eE]", description: "[eE]" },
            peg$c50 = "+",
            peg$c51 = { type: "literal", value: "+", description: "\"+\"" },
            peg$c52 = "-",
            peg$c53 = { type: "literal", value: "-", description: "\"-\"" },
            peg$c54 = /^[0-9]/,
            peg$c55 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c56 = function(digits) { return digits.join('') },
            peg$c57 = /^[ \t\n\r]/,
            peg$c58 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
    
            peg$currPos          = 0,
            peg$reportedPos      = 0,
            peg$cachedPos        = 0,
            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,
    
            peg$result;
    
        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
          }
    
          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
    
        function text() {
          return input.substring(peg$reportedPos, peg$currPos);
        }
    
        function offset() {
          return peg$reportedPos;
        }
    
        function line() {
          return peg$computePosDetails(peg$reportedPos).line;
        }
    
        function column() {
          return peg$computePosDetails(peg$reportedPos).column;
        }
    
        function expected(description) {
          throw peg$buildException(
            null,
            [{ type: "other", description: description }],
            peg$reportedPos
          );
        }
    
        function error(message) {
          throw peg$buildException(message, null, peg$reportedPos);
        }
    
        function peg$computePosDetails(pos) {
          function advance(details, startPos, endPos) {
            var p, ch;
    
            for (p = startPos; p < endPos; p++) {
              ch = input.charAt(p);
              if (ch === "\n") {
                if (!details.seenCR) { details.line++; }
                details.column = 1;
                details.seenCR = false;
              } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                details.line++;
                details.column = 1;
                details.seenCR = true;
              } else {
                details.column++;
                details.seenCR = false;
              }
            }
          }
    
          if (peg$cachedPos !== pos) {
            if (peg$cachedPos > pos) {
              peg$cachedPos = 0;
              peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
            }
            advance(peg$cachedPosDetails, peg$cachedPos, pos);
            peg$cachedPos = pos;
          }
    
          return peg$cachedPosDetails;
        }
    
        function peg$fail(expected) {
          if (peg$currPos < peg$maxFailPos) { return; }
    
          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }
    
          peg$maxFailExpected.push(expected);
        }
    
        function peg$buildException(message, expected, pos) {
          function cleanupExpected(expected) {
            var i = 1;
    
            expected.sort(function(a, b) {
              if (a.description < b.description) {
                return -1;
              } else if (a.description > b.description) {
                return 1;
              } else {
                return 0;
              }
            });
    
            while (i < expected.length) {
              if (expected[i - 1] === expected[i]) {
                expected.splice(i, 1);
              } else {
                i++;
              }
            }
          }
    
          function buildMessage(expected, found) {
            function stringEscape(s) {
              function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }
    
              return s
                .replace(/\\/g,   '\\\\')
                .replace(/"/g,    '\\"')
                .replace(/\x08/g, '\\b')
                .replace(/\t/g,   '\\t')
                .replace(/\n/g,   '\\n')
                .replace(/\f/g,   '\\f')
                .replace(/\r/g,   '\\r')
                .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
            }
    
            var expectedDescs = new Array(expected.length),
                expectedDesc, foundDesc, i;
    
            for (i = 0; i < expected.length; i++) {
              expectedDescs[i] = expected[i].description;
            }
    
            expectedDesc = expected.length > 1
              ? expectedDescs.slice(0, -1).join(", ")
                  + " or "
                  + expectedDescs[expected.length - 1]
              : expectedDescs[0];
    
            foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";
    
            return "Expected " + expectedDesc + " but " + foundDesc + " found.";
          }
    
          var posDetails = peg$computePosDetails(pos),
              found      = pos < input.length ? input.charAt(pos) : null;
    
          if (expected !== null) {
            cleanupExpected(expected);
          }
    
          return new SyntaxError(
            message !== null ? message : buildMessage(expected, found),
            expected,
            found,
            pos,
            posDetails.line,
            posDetails.column
          );
        }
    
        function peg$parsesvg_path() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsewsp();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsewsp();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsemoveTo_drawTo_commandGroups();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsewsp();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsewsp();
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c3(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsemoveTo_drawTo_commandGroups() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsemoveTo_drawTo_commandGroup();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parsewsp();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsewsp();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsemoveTo_drawTo_commandGroups();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsemoveTo_drawTo_commandGroup() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsemoveto();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parsewsp();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsewsp();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsedrawto_commands();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsedrawto_commands() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsedrawto_command();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parsewsp();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsewsp();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsedrawto_commands();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsedrawto_command() {
          var s0;
    
          s0 = peg$parseclosepath();
          if (s0 === peg$FAILED) {
            s0 = peg$parselineto();
            if (s0 === peg$FAILED) {
              s0 = peg$parsehorizontal_lineto();
              if (s0 === peg$FAILED) {
                s0 = peg$parsevertical_lineto();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsecurveto();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsesmooth_curveto();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsequadratic_bezier_curveto();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsesmooth_quadratic_bezier_curveto();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseelliptical_arc();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
    
          return s0;
        }
    
        function peg$parsemoveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c4.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsemoveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c6(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsemoveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parselineto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parseclosepath() {
          var s0, s1;
    
          s0 = peg$currPos;
          if (peg$c8.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c10();
          }
          s0 = s1;
    
          return s0;
        }
    
        function peg$parselineto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c11.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parselineto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c13(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parselineto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parselineto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsehorizontal_lineto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c14.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c16(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecoordinate_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecoordinate_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsevertical_lineto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c17.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c19(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecurveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c20.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecurveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c22(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecurveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecurveto_argument();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecurveto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecurveto_argument() {
          var s0, s1, s2, s3, s4, s5;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_pair();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsecomma_wsp();
                if (s4 === peg$FAILED) {
                  s4 = peg$c2;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsecoordinate_pair();
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c23(s1, s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_curveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c24.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsesmooth_curveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c26(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_curveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsesmooth_curveto_argument();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsesmooth_curveto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_curveto_argument() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_pair();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c27(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsequadratic_bezier_curveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c28.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsequadratic_bezier_curveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c30(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsequadratic_bezier_curveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsequadratic_bezier_curveto_argument();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsequadratic_bezier_curveto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsequadratic_bezier_curveto_argument() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_pair();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c27(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_quadratic_bezier_curveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c31.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsesmooth_quadratic_bezier_curveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c33(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_quadratic_bezier_curveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsesmooth_quadratic_bezier_curveto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parseelliptical_arc() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c34.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c35); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseelliptical_arc_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c36(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parseelliptical_arc_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parseelliptical_arc_argument();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseelliptical_arc_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parseelliptical_arc_argument() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
    
          s0 = peg$currPos;
          s1 = peg$parsenonnegative_number();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenonnegative_number();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsecomma_wsp();
                if (s4 === peg$FAILED) {
                  s4 = peg$c2;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsenumber();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsecomma_wsp();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseflag();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsecomma_wsp();
                        if (s8 === peg$FAILED) {
                          s8 = peg$c2;
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseflag();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parsecomma_wsp();
                            if (s10 === peg$FAILED) {
                              s10 = peg$c2;
                            }
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parsecoordinate_pair();
                              if (s11 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c37(s1, s3, s5, s7, s9, s11);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecoordinate_pair() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c38(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecoordinate() {
          var s0, s1;
    
          s0 = peg$currPos;
          s1 = peg$parsenumber();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c39(s1);
          }
          s0 = s1;
    
          return s0;
        }
    
        function peg$parsenonnegative_number() {
          var s0;
    
          s0 = peg$parsefloating_point_constant();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedigit_sequence();
          }
    
          return s0;
        }
    
        function peg$parsenumber() {
          var s0, s1, s2;
    
          s0 = peg$currPos;
          s1 = peg$parsesign();
          if (s1 === peg$FAILED) {
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsefloating_point_constant();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsesign();
            if (s1 === peg$FAILED) {
              s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsedigit_sequence();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
    
          return s0;
        }
    
        function peg$parseflag() {
          var s0;
    
          if (input.charCodeAt(peg$currPos) === 48) {
            s0 = peg$c40;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 49) {
              s0 = peg$c42;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
          }
    
          return s0;
        }
    
        function peg$parsecomma_wsp() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsewsp();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsewsp();
            }
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsewsp();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsewsp();
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecomma();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsewsp();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsewsp();
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
    
          return s0;
        }
    
        function peg$parsecomma() {
          var s0;
    
          if (input.charCodeAt(peg$currPos) === 44) {
            s0 = peg$c44;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
    
          return s0;
        }
    
        function peg$parsefloating_point_constant() {
          var s0, s1, s2;
    
          s0 = peg$currPos;
          s1 = peg$parsefractional_constant();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexponent();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsedigit_sequence();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexponent();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
    
          return s0;
        }
    
        function peg$parsefractional_constant() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          s1 = peg$parsedigit_sequence();
          if (s1 === peg$FAILED) {
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s2 = peg$c46;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c47); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsedigit_sequence();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsedigit_sequence();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s2 = peg$c46;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c47); }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
    
          return s0;
        }
    
        function peg$parseexponent() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c48.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsesign();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsedigit_sequence();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesign() {
          var s0;
    
          if (input.charCodeAt(peg$currPos) === 43) {
            s0 = peg$c50;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s0 = peg$c52;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
          }
    
          return s0;
        }
    
        function peg$parsedigit_sequence() {
          var s0, s1, s2;
    
          s0 = peg$currPos;
          s1 = [];
          if (peg$c54.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c54.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c55); }
              }
            }
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c56(s1);
          }
          s0 = s1;
    
          return s0;
        }
    
        function peg$parsewsp() {
          var s0;
    
          if (peg$c57.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
    
          return s0;
        }
    
    
          // The last coordinate we are at in the path. In absolute coords.
          var lastCoord = [0, 0];
          // The last control point we encountered in the path. In absolute coords.
          var lastControl = [0, 0];
          // The list of operations we've parsed so far.
          var ops = [];
          // Have we parsed the first sub-path yet?
          var firstSubPath = true;
          // The letter of the last parsed command.
          var lastCh = '';
    
          // Convert a position into an absolute position.
          function makeAbsolute(c, coord) {
            if ('mlazhvcsqt'.indexOf(c) === -1) {
              lastCoord = coord;
            } else {
              lastCoord[0] += coord[0];
              lastCoord[1] += coord[1];
            }
            lastCh = c;
            return lastCoord.slice(0);
          }
    
          // Convert a sequence of coordinates into absolute coordinates.
          //
          // For arguments that take multiple coord pairs, such as bezier.
          function makeAbsoluteMultiple(c, seq) {
            var r = [];
            var lastPosCopy = lastCoord.slice(0);
            for (var i=0; i < seq.length; i+=2) {
              // Only the last point should update lastCoord.
              lastCoord = lastPosCopy.slice(0);
              var coord = makeAbsolute(c, seq.slice(i, i+2));
              r = r.concat(coord);
              // Record the last control point, it might be needed for
              // shorthand operations.
              if (i == seq.length-4) {
                lastControl = coord.slice(0);
              }
            }
            return r;
          }
    
          // Find the reflection of the last control point over
          // the last postion in the path.
          function makeReflected() {
            if ('CcSsQqTt'.indexOf(lastCh) == -1) {
              lastControl = lastCoord.slice(0);
            }
            // reflected = 2*lastCoord - lastControl
            // Note the result is absolute, not relative.
            var r = [0, 0];
            r[0] = 2*lastCoord[0] - lastControl[0];
            r[1] = 2*lastCoord[1] - lastControl[1];
            return r;
          }
    
          function makeAbsoluteFromX(c, x) {
            var coord = [x, 0];
            if (c == 'H') {
              coord[1] = lastCoord[1];
            }
            return makeAbsolute(c, coord);
          }
    
          function makeAbsoluteFromY(c, y) {
            var coord = [0, y];
            if (c == 'V') {
              coord[0] = lastCoord[0];
            }
            return makeAbsolute(c, coord);
          }
    
          function concatSequence(one, rest) {
            var r = [one];
            if (rest && rest.length > 1) {
              var rem = rest[1];
              for (var i = 0; i < rem.length; i++) {
                r.push(rem[i]);
              }
            }
            return r;
          }
    
          function mag(v) {
            return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));
          }
    
          function dot(u, v) {
            return (u[0]*v[0] + u[1]*v[1]);
          }
    
          function ratio(u, v) {
            return dot(u,v) / (mag(u)*mag(v))
          }
    
          function angle(u, v) {
            var sign = 1.0;
            if ((u[0]*v[1] - u[1]*v[0]) < 0) {
              sign = -1.0;
            }
            return sign * Math.acos(ratio(u,v));
          }
    
          function rotClockwise(v, angle) {
            var cost = Math.cos(angle);
            var sint = Math.sin(angle);
            return [cost*v[0] + sint*v[1], -1 * sint*v[0] + cost*v[1]];
          }
    
          function rotCounterClockwise(v, angle) {
            var cost = Math.cos(angle);
            var sint = Math.sin(angle);
            return [cost*v[0] - sint*v[1], sint*v[0] + cost*v[1]];
          }
    
          function midPoint(u, v) {
            return [(u[0] - v[0])/2.0, (u[1] - v[1])/2.0];
          }
    
          function meanVec(u, v) {
            return [(u[0] + v[0])/2.0, (u[1] + v[1])/2.0];
          }
    
          function pointMul(u, v) {
            return [u[0]*v[0], u[1]*v[1]];
          }
    
          function scale(c, v) {
            return [c*v[0], c*v[1]];
          }
    
          function sum(u, v) {
            return [u[0] + v[0], u[1] + v[1]];
          }
    
          // Convert an SVG elliptical arc to a series of canvas commands.
          //
          // x1, x2: start and stop coordinates of the ellipse.
          // rx, ry: radii of the ellipse.
          // phi: rotation of the ellipse.
          // fA: large arc flag.
          // fS: sweep flag.
          function ellipseFromEllipticalArc(x1, rx, ry, phi, fA, fS, x2) {
            // Convert from endpoint to center parametrization, as detailed in:
            //   http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes
            if (rx == 0 || ry == 0) {
              ops.push({type: 'lineTo', args: x2});
              return;
            }
            var phi = phi * (Math.PI / 180.0);
            rx = Math.abs(rx);
            ry = Math.abs(ry);
            var xPrime = rotClockwise(midPoint(x1, x2), phi);                // F.6.5.1
            var xPrime2 = pointMul(xPrime, xPrime);
            var rx2 = Math.pow(rx, 2);
            var ry2 = Math.pow(ry, 2);
    
            var lambda = Math.sqrt(xPrime2[0]/rx2 + xPrime2[1]/ry2);
            if (lambda > 1) {
              rx *= lambda;
              ry *= lambda;
              rx2 = Math.pow(rx, 2);
              ry2 = Math.pow(ry, 2);
            }
    
            var factor = Math.sqrt((rx2*ry2 - rx2*xPrime2[1] - ry2*xPrime2[0]) /
              (rx2*xPrime2[1] + ry2*xPrime2[0]));
            if (fA == fS) {
              factor *= -1.0;
            }
            var cPrime = scale(factor, [rx*xPrime[1]/ry, -ry*xPrime[0]/rx]); // F.6.5.2
            var c = sum(rotCounterClockwise(cPrime, phi), meanVec(x1, x2));  // F.6.5.3
            var x1UnitVector = [(xPrime[0] - cPrime[0])/rx, (xPrime[1] - cPrime[1])/ry];
            var x2UnitVector = [(-1.0*xPrime[0] - cPrime[0])/rx, (-1.0*xPrime[1] - cPrime[1])/ry];
            var theta = angle([1, 0], x1UnitVector);                         // F.6.5.5
            var deltaTheta = angle(x1UnitVector, x2UnitVector);              // F.6.5.6
            var start = theta;
            var end = theta+deltaTheta;
            ops.push(
              {type: 'save', args: []},
              {type: 'translate', args: [c[0], c[1]]},
              {type: 'rotate', args: [phi]},
              {type: 'scale', args: [rx, ry]},
              {type: 'arc', args: [0, 0, 1, start, end, 1-fS]},
              {type: 'restore', args: []}
              );
          }
    
    
        peg$result = peg$startRuleFunction();
    
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail({ type: "end", description: "end of input" });
          }
    
          throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
        }
      }
    
      return {
        SyntaxError: SyntaxError,
        parse:       parse
      };
    })();

    function Path_(arg) {
      this.ops_ = [];
      if (arg == undefined) {
        return;
      }
      if (typeof arg == 'string') {
        try {
          this.ops_ = parser.parse(arg);
        } catch(e) {
          // Treat an invalid SVG path as an empty path.
        }
      } else if (arg.hasOwnProperty('ops_')) {
        this.ops_ = arg.ops_.slice(0);
      } else {
        throw 'Error: ' + typeof arg + 'is not a valid argument to Path';
      }
    };

    // TODO(jcgregorio) test for arcTo and implement via something.


    // Path methods that map simply to the CanvasRenderingContext2D.
    var simple_mapping = [
      'closePath',
      'moveTo',
      'lineTo',
      'quadraticCurveTo',
      'bezierCurveTo',
      'rect',
      'arc',
      'arcTo',
      'ellipse',
      'isPointInPath',
      'isPointInStroke',
      ];

    function createFunction(name) {
      return function() {
        this.ops_.push({type: name, args: Array.prototype.slice.call(arguments, 0)});
      };
    }

    // Add simple_mapping methods to Path2D.
    for (var i=0; i<simple_mapping.length; i++) {
      var name = simple_mapping[i];
      Path_.prototype[name] = createFunction(name);
    }

    Path_.prototype['addPath'] = function(path, tr) {
      var hasTx = false;
      if (tr
          && tr.hasOwnProperty('a')
          && tr.hasOwnProperty('b')
          && tr.hasOwnProperty('c')
          && tr.hasOwnProperty('d')
          && tr.hasOwnProperty('e')
          && tr.hasOwnProperty('f')) {
        hasTx = true;
        this.ops_.push({type: 'save', args: []});
        this.ops_.push({type: 'transform', args: [tr.a, tr.b, tr.c, tr.d, tr.e, tr.f]});
      }
      this.ops_ = this.ops_.concat(path.ops_);
      if (hasTx) {
        this.ops_.push({type: 'restore', args: []});
      }
    }

    original_fill = CanvasRenderingContext2D.prototype.fill;
    original_stroke = CanvasRenderingContext2D.prototype.stroke;
    original_clip = CanvasRenderingContext2D.prototype.clip;
    original_is_point_in_path = CanvasRenderingContext2D.prototype.isPointInPath;
    original_is_point_in_stroke = CanvasRenderingContext2D.prototype.isPointInStroke;

    // Replace methods on CanvasRenderingContext2D with ones that understand Path2D.
    CanvasRenderingContext2D.prototype.fill = function(arg) {
      if (arg instanceof Path_) {
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        original_fill.apply(this, Array.prototype.slice.call(arguments, 1));
      } else {
        original_fill.apply(this, arguments);
      }
    }

    CanvasRenderingContext2D.prototype.stroke = function(arg) {
      if (arg instanceof Path_) {
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        original_stroke.call(this);
      } else {
        original_stroke.call(this);
      }
    }

    CanvasRenderingContext2D.prototype.clip = function(arg) {
      if (arg instanceof Path_) {
        // Note that we don't save and restore the context state, since the
        // clip region is part of the state. Not really a problem since the
        // HTML 5 spec doesn't say that clip(path) doesn't affect the current
        // path.
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        original_clip.apply(this, Array.prototype.slice.call(arguments, 1));
      } else {
        original_clip.apply(this, arguments);
      }
    }

    CanvasRenderingContext2D.prototype.isPointInPath = function(arg) {
      if (arg instanceof Path_) {
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        return original_is_point_in_path.apply(this, Array.prototype.slice.call(arguments, 1));
      } else {
        return original_is_point_in_path.apply(this, arguments);
      }
    }
    CanvasRenderingContext2D.prototype.isPointInStroke = function(arg) {
      if (arg instanceof Path_) {
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        return original_is_point_in_stroke.apply(this, Array.prototype.slice.call(arguments, 1));
      } else {
        return original_is_point_in_stroke.apply(this, arguments);
      }
    }

    // Set up externs.
    Path2D = Path_;
  })();
}

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _evented = require("./evented");

var _evented2 = _interopRequireDefault(_evented);

var _gfx = require("./gfx");

var _gfx2 = _interopRequireDefault(_gfx);

var _timer = require("./timer");

var _timer2 = _interopRequireDefault(_timer);

var _pointer = require("./pointer");

var _pointer2 = _interopRequireDefault(_pointer);

var _gnode = require("./gnode");

var _gnode2 = _interopRequireDefault(_gnode);

var _fps = require("./fps");

var _fps2 = _interopRequireDefault(_fps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var App = function (_Evented) {
  _inherits(App, _Evented);

  function App() {
    _classCallCheck(this, App);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(App).call(this));

    var canvas = document.querySelector('canvas');
    _this.gfx = new _gfx2.default(canvas);
    _this.timer = new _timer2.default();
    _this.pointer = new _pointer2.default();
    _this.scene = new _gnode2.default();
    _this.paused = false;

    if (C.DEBUG) {
      _this.fps = new _fps2.default();
      document.documentElement.classList.add('debug');
    }

    _this.register_events();
    _this.init_loop();
    return _this;
  }

  _createClass(App, [{
    key: "register_events",
    value: function register_events() {
      var _this2 = this;

      window.addEventListener('resize', function (ev) {
        _this2.gfx.set_size();
      });

      //window.addEventListener('blur', _ => {
      //  this.pause();
      //});

      //window.addEventListener('focus', _ => {
      //  this.resume();
      //});

      this.pointer.register_events();

      this.on('pause', function (_) {
        document.documentElement.classList.add('paused');
        // PAUSE MENU
      });

      this.on('resume', function (_) {
        document.documentElement.classList.remove('paused');
        // KILL PAUSE MENU
      });

      if (C.DEBUG) {
        this.fps.tic();
        this.fps.on('update', function (fps, min, max) {
          var fps_div = document.querySelector('.frames');
          var min_div = document.querySelector('.min');
          var max_div = document.querySelector('.max');

          fps_div.innerHTML = "FPS: " + fps;
          min_div.innerHTML = "MIN: " + min;
          max_div.innerHTML = "MAX: " + max;
        });
      }
    }
  }, {
    key: "init_loop",
    value: function init_loop() {
      this.timer.init();
      this.tic();
    }
  }, {
    key: "pause",
    value: function pause() {
      this.dispatch('pause');
      this.paused = true;
    }
  }, {
    key: "resume",
    value: function resume() {
      this.dispatch('resume');
      this.paused = false;
      this.init_loop();
    }
  }, {
    key: "tic",
    value: function tic() {
      var _this3 = this;

      if (!this.paused) {
        this.frame_request = requestAnimationFrame(function (time) {
          _this3.timer.time = time;
          _this3.tic();
        });
      }

      this.update();

      while (this.timer.accumulator >= C.FIXED_UPDATE_TIME) {
        this.timer.accumulator -= C.FIXED_UPDATE_TIME;
        this.fixed_update(C.FIXED_UPDATE_TIME);
      }

      if (C.DEBUG) this.fps.add_frame();
    }
  }, {
    key: "update",
    value: function update() {
      var _this4 = this;

      var gfx = this.gfx;
      var ctx = gfx.ctx;
      ctx.clearRect(0, 0, gfx.width, gfx.height);

      this.scene.for_each(function (gnode) {
        gnode.on_update(_this4, _this4.timer.dt);
        if (gnode.render) gnode.render(_this4);
      });
    }
  }, {
    key: "fixed_update",
    value: function fixed_update(dt) {
      var _this5 = this;

      this.scene.for_each(function (gnode) {
        gnode.on_fixed_update(_this5, dt);
      });
    }
  }]);

  return App;
}(_evented2.default);

exports.default = App;

},{"./constants":3,"./evented":5,"./fps":6,"./gfx":7,"./gnode":8,"./pointer":10,"./timer":16}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var DEBUG = exports.DEBUG = true;
var FIXED_UPDATE_TIME = exports.FIXED_UPDATE_TIME = 1 / 120 * 1000; // 120fps

var EPSILON = exports.EPSILON = Math.pow(2, -52);

var SHIP_SHOT_SPEED = exports.SHIP_SHOT_SPEED = -0.75;
var SHIP_SHOT_INTERVAL = exports.SHIP_SHOT_INTERVAL = 250;
var SHOT_GRACE_ZONE = exports.SHOT_GRACE_ZONE = 50;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

var _shot = require("./shot");

var _shot2 = _interopRequireDefault(_shot);

var _poly = require("./poly");

var _poly2 = _interopRequireDefault(_poly);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Enemy = function (_Poly) {
  _inherits(Enemy, _Poly);

  function Enemy() {
    _classCallCheck(this, Enemy);

    // M-24 0 L24 0 L24 2 L24 14 L20 14 L20 4 L4 10 L2 20 L0 20 L-2 20 L-4 10 L-20 4 L-20 14 L-24 14 L-24 2 Z

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Enemy).call(this));

    _this.points = [new _vec2.default(-24, 0), new _vec2.default(24, 0), new _vec2.default(24, 2), new _vec2.default(24, 14), new _vec2.default(20, 14), new _vec2.default(20, 4), new _vec2.default(4, 10), new _vec2.default(2, 20), new _vec2.default(0, 20), new _vec2.default(-2, 20), new _vec2.default(-4, 10), new _vec2.default(-20, 4), new _vec2.default(-20, 14), new _vec2.default(-24, 14), new _vec2.default(-24, 2)];
    _this.stroke_style = 'hsl(360, 75%, 75%)';
    _this.fill_style = 'hsla(360, 75%, 75%, 0.5)';
    _this.line_width = 2;
    _this.update_path();

    _this.mass = 10;
    _this.health = 10;
    _this.armor = 10;

    return _this;
  }

  _createClass(Enemy, [{
    key: "on_update",
    value: function on_update(app) {
      if (this.health <= 0) {
        app.scene.remove_child(this);
      }
    }
  }, {
    key: "on_fixed_update",
    value: function on_fixed_update(app) {
      var _this2 = this;

      var gfx = app.gfx;
      var ctx = gfx.ctx;
      // Collision Stuff
      app.scene.for_each(function (node) {
        if (node instanceof _shot2.default) {
          if (_this2.intersect(node).length > 0) {
            app.scene.remove_child(node);
            _this2.hit(10);
          }
          /*ctx.save();
          ctx.translate( this.position.x, this.position.y );
          gfx.scale();
          if( ctx.isPointInPath(this.path, node.position.x, node.position.y) ) {
            app.scene.remove_child(node);
            this.hit(10);
          }
          ctx.restore();*/
        }
      });
      // AI Stuff
    }
  }, {
    key: "hit",
    value: function hit(damage) {
      this.health -= damage / this.armor;
    }
  }]);

  return Enemy;
}(_poly2.default);

exports.default = Enemy;

},{"./constants":3,"./poly":11,"./shot":15,"./vec2":17}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Evented = function () {
  function Evented() {
    _classCallCheck(this, Evented);

    this.events = {};
  }

  _createClass(Evented, [{
    key: "on",
    value: function on(name, fn) {
      if (fn instanceof Function) {
        this.events[name] = this.events[name] || [];
        this.events[name].push(fn);
      }
    }
  }, {
    key: "off",
    value: function off(name, fn) {
      this.events[name] = this.events[name];
      var ev = this.events[name];
      var index = -1;
      if (ev && (index = ev.indexOf(fn)) > -1) ev.splice(index, 1);
    }
  }, {
    key: "dispatch",
    value: function dispatch(name) {
      var _this = this;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var ev = this.events[name];
      if (ev) {
        ev.forEach(function (fn) {
          fn.call.apply(fn, [_this].concat(args));
        });
      }
    }
  }]);

  return Evented;
}();

exports.default = Evented;

},{"./constants":3}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _evented = require("./evented");

var _evented2 = _interopRequireDefault(_evented);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FPS = function (_Evented) {
  _inherits(FPS, _Evented);

  function FPS() {
    _classCallCheck(this, FPS);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(FPS).call(this));

    _this.frames = 0;
    _this.min = Number.MAX_VALUE;
    _this.max = 0;
    _this.timeout = null;
    return _this;
  }

  _createClass(FPS, [{
    key: "add_frame",
    value: function add_frame() {
      this.frames++;
    }
  }, {
    key: "tic",
    value: function tic() {
      var _this2 = this;

      if (this.frames < this.min && this.frames > 0) this.min = this.frames;
      if (this.frames > this.max) this.max = this.frames;
      this.dispatch('update', this.frames, this.min, this.max);
      this.frames = 0;
      clearTimeout(this.timeout);
      this.timeout = setTimeout(function (_) {
        _this2.tic();
      }, 1000);
    }
  }]);

  return FPS;
}(_evented2.default);

exports.default = FPS;

},{"./constants":3,"./evented":5}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GFX = function () {
  function GFX(canvas) {
    _classCallCheck(this, GFX);

    this.cnv = canvas;
    this.ctx = canvas.getContext('2d');

    var dpr = window.devicePixelRatio || 1;
    var bspr = this.ctx.webkitBackingStorePixelRatio || this.ctx.mozBackingStorePixelRatio || this.ctx.msBackingStorePixelRatio || this.ctx.oBackingStorePixelRatio || this.ctx.backingStorePixelRatio || 1;
    this.ratio = dpr / bspr;
    this.set_size();
  }

  _createClass(GFX, [{
    key: "set_size",
    value: function set_size() {
      this.cnv.width = window.innerWidth * this.ratio;
      this.cnv.height = window.innerHeight * this.ratio;
    }
  }, {
    key: "scale",
    value: function scale() {
      this.ctx.scale(this.ratio, this.ratio);
    }
  }, {
    key: "width",
    get: function get() {
      return this.cnv.width;
    }
  }, {
    key: "height",
    get: function get() {
      return this.cnv.height;
    }
  }]);

  return GFX;
}();

exports.default = GFX;

},{"./constants":3}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _evented = require("./evented");

var _evented2 = _interopRequireDefault(_evented);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Gnode = function (_Evented) {
  _inherits(Gnode, _Evented);

  function Gnode() {
    _classCallCheck(this, Gnode);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Gnode).call(this));

    _this.children = [];
    return _this;
  }

  _createClass(Gnode, [{
    key: "add_child",
    value: function add_child(child) {
      if (this.children.indexOf(child) < 0) this.children.push(child);
    }
  }, {
    key: "remove_child",
    value: function remove_child(child) {
      var index = -1;
      if ((index = this.children.indexOf(child)) >= 0) {
        this.children.splice(index, 1);
      }
    }
  }, {
    key: "for_each",
    value: function for_each(fn) {
      this.children.forEach(function (child) {
        for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }

        fn.call.apply(fn, [this, child].concat(rest));
        child.for_each(fn);
      });
    }
  }, {
    key: "on_update",
    value: function on_update(app) {}
  }, {
    key: "on_fixed_update",
    value: function on_fixed_update(app) {}
  }]);

  return Gnode;
}(_evented2.default);

exports.default = Gnode;

},{"./constants":3,"./evented":5}],9:[function(require,module,exports){
"use strict";

require("canvas-5-polyfill");

var _app = require("./app");

var _app2 = _interopRequireDefault(_app);

var _ship = require("./ship");

var _ship2 = _interopRequireDefault(_ship);

var _enemy = require("./enemy");

var _enemy2 = _interopRequireDefault(_enemy);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

var _segment = require("./segment");

var _segment2 = _interopRequireDefault(_segment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var app = new _app2.default();

app.scene.add_child(new _ship2.default());

var enemy_1 = new _enemy2.default();
enemy_1.position.x = app.gfx.width / 2;
enemy_1.position.y = 25 * app.gfx.ratio;
app.scene.add_child(enemy_1);

/** FOR CONSOLE **/

window.Vec2 = _vec2.default;

window.Segment = _segment2.default;

},{"./app":2,"./enemy":4,"./segment":13,"./ship":14,"./vec2":17,"canvas-5-polyfill":1}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _evented = require("./evented");

var _evented2 = _interopRequireDefault(_evented);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pointer = function (_Evented) {
  _inherits(Pointer, _Evented);

  function Pointer() {
    _classCallCheck(this, Pointer);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Pointer).call(this));

    _this._position = new _vec2.default();
    _this.down_0 = false;
    _this.down_1 = false;

    _this.touch_0 = null;
    _this.touch_1 = null;

    var dpr = window.devicePixelRatio || 1;
    /*let bspr = this.ctx.webkitBackingStorePixelRatio ||
               this.ctx.mozBackingStorePixelRatio ||
               this.ctx.msBackingStorePixelRatio ||
               this.ctx.oBackingStorePixelRatio ||
               this.ctx.backingStorePixelRatio || 1;*/
    _this.ratio = dpr;
    return _this;
  }

  _createClass(Pointer, [{
    key: "register_events",
    value: function register_events() {
      var _this2 = this;

      window.addEventListener('mousedown', function (ev) {
        if (ev.button == 0) {
          _this2.down_0 = true;
          _this2.dispatch('down', 0);
        } else if (ev.button == 1 || ev.button == 2) {
          _this2.down_1 = true;
          _this2.dispatch('down', 1);
        }
        _this2._position.x = ev.pageX;
        _this2._position.y = ev.pageY;
      });

      window.addEventListener('mouseup', function (ev) {
        if (ev.button == 0) {
          _this2.down_0 = false;
          _this2.dispatch('up', 0);
        } else if (ev.button == 1 || ev.button == 2) {
          _this2.down_1 = false;
          _this2.dispatch('up', 1);
        }
      });

      window.addEventListener('mousemove', function (ev) {
        _this2._position.x = ev.pageX;
        _this2._position.y = ev.pageY;
        _this2.dispatch('move');
      });

      window.addEventListener('touchstart', function (ev) {
        _this2.touch_0 = ev.touches[0];
        _this2.touch_1 = ev.touches[1];

        var touches = ev.changedTouches;

        for (var i = 0, ii = touches.length; i < ii; i++) {
          if (touches[i].identifier == (_this2.touch_0 || {}).identifier) {
            _this2.down_0 = true;
            _this2.dispatch('down', 0);
          } else if (touches[i].identifier == (_this2.touch_1 || {}).identifier) {
            _this2.down_1 = true;
            _this2.dispatch('down', 1);
          }
        }
        _this2._position.x = _this2.touch_0.pageX;
        _this2._position.y = _this2.touch_0.pageY;
      });

      window.addEventListener('touchend', function (ev) {
        var touches = ev.changedTouches;
        for (var i = 0, ii = touches.length; i < ii; i++) {
          if (touches[i].identifier == (_this2.touch_0 || {}).identifier) {
            _this2.touch_0 = touches[i];
            _this2.down_0 = false;
            _this2.dispatch('up', 0);
          } else if (touches[i].identifier == (_this2.touch_1 || {}).identifier) {
            _this2.touch_1 = touches[i];
            _this2.down_1 = false;
            _this2.dispatch('up', 1);
          }
        }
      });

      window.addEventListener('touchmove', function (ev) {
        ev.preventDefault();
        var touches = ev.changedTouches;
        for (var i = 0, ii = touches.length; i < ii; i++) {
          if (touches[i].identifier == (_this2.touch_0 || {}).identifier) {
            _this2.touch_0 = touches[i];
            _this2._position.x = _this2.touch_0.pageX;
            _this2._position.y = _this2.touch_0.pageY;
            _this2.dispatch('move');
          } else if (touches[i].identifier == (_this2.touch_1 || {}).identifer) {
            _this2.touch_1 = touches[i];
          }
        }
      });
    }
  }, {
    key: "position",
    get: function get() {
      return new _vec2.default(this._position.x * this.ratio, this._position.y * this.ratio);
    }
  }]);

  return Pointer;
}(_evented2.default);

exports.default = Pointer;

},{"./constants":3,"./evented":5,"./vec2":17}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _renderable = require("./renderable");

var _renderable2 = _interopRequireDefault(_renderable);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

var _segment = require("./segment");

var _segment2 = _interopRequireDefault(_segment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Poly = function (_Renderable) {
  _inherits(Poly, _Renderable);

  function Poly() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Poly);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Poly).call(this));

    _this.points = opts.points || [];
    _this.position = opts.position || new _vec2.default();
    _this.rotation = opts.rotation || 0;

    _this.fill_style = opts.fillStyle || null;
    _this.stroke_style = opts.strokeStyle || null;
    _this.line_width = opts.lineWidth || 0;

    _this.path = new Path2D();
    _this.update_path();
    return _this;
  }

  _createClass(Poly, [{
    key: "update_path",
    value: function update_path() {
      var _this2 = this;

      if (this.points.length) {
        var last_point = this.points[this.points.length - 1];
        this.path.moveTo(last_point.x, last_point.y);
        this.points.forEach(function (point) {
          _this2.path.lineTo(point.x, point.y);
        });
        this.path.closePath();
      }
    }
  }, {
    key: "intersect",
    value: function intersect(b) {
      return this.constructor.intersect(this, b);
    }
  }, {
    key: "render",
    value: function render(app) {
      var gfx = app.gfx;
      var ctx = gfx.ctx;

      ctx.strokeStyle = this.stroke_style;
      ctx.lineWidth = this.line_width / gfx.ratio;
      ctx.fillStyle = this.fill_style;
      ctx.save();
      ctx.translate(this.position.x, this.position.y);
      gfx.scale();
      if (this.stroke_style) ctx.stroke(this.path);
      if (this.fill_style) ctx.fill(this.path);
      ctx.restore();
    }
  }, {
    key: "transformed",
    get: function get() {
      var _this3 = this;

      var points = [];
      this.points.forEach(function (point) {
        points.push(point.add(_this3.position));
      });
      // TODO: ROTATE
      var poly = new this.constructor(this);
      poly.points = points;
      return poly;
    }
  }, {
    key: "segments",
    get: function get() {
      var segments = [];
      var last_point = this.points[this.points.length - 1];
      this.points.forEach(function (point) {
        segments.push(new _segment2.default(last_point, point));
        last_point = point;
      });
      return segments;
    }
  }], [{
    key: "intersect",
    value: function intersect(a, b) {
      var a_segs = a.transformed.segments;
      var b_segs = b.transformed.segments;
      var ips = [];
      a_segs.forEach(function (a) {
        b_segs.forEach(function (b) {
          var ip = _segment2.default.intersect_seg_seg(a, b);
          if (ip) ips.push(ip);
        });
      });
      return ips;
    }
  }]);

  return Poly;
}(_renderable2.default);

exports.default = Poly;

},{"./constants":3,"./renderable":12,"./segment":13,"./vec2":17}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _gnode = require("./gnode");

var _gnode2 = _interopRequireDefault(_gnode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Renderable = function (_Gnode) {
  _inherits(Renderable, _Gnode);

  function Renderable() {
    _classCallCheck(this, Renderable);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Renderable).call(this));
  }

  _createClass(Renderable, [{
    key: "render",
    value: function render() {}
  }]);

  return Renderable;
}(_gnode2.default);

exports.default = Renderable;

},{"./constants":3,"./gnode":8}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Segment = function () {
  function Segment() {
    var a = arguments.length <= 0 || arguments[0] === undefined ? new _vec2.default() : arguments[0];
    var b = arguments.length <= 1 || arguments[1] === undefined ? new _vec2.default() : arguments[1];

    _classCallCheck(this, Segment);

    this.a = a;
    this.b = b;
  }

  _createClass(Segment, [{
    key: "direction",
    value: function direction() {
      return this.constructor.direction(this);
    }
  }, {
    key: "is_point_on_line",
    value: function is_point_on_line(v) {
      return this.constructor.is_point_on_line(this, v);
    }
  }, {
    key: "is_point_on_segment",
    value: function is_point_on_segment(v) {
      return this.constructor.is_point_on_segment(this, v);
    }
  }, {
    key: "intersect_line_line",
    value: function intersect_line_line(b) {
      return this.constructor.intersect_line_line(this, b);
    }
  }, {
    key: "intersect_seg_seg",
    value: function intersect_seg_seg(b) {
      return this.constructor.intersect_seg_seg(this, b);
    }
  }], [{
    key: "direction",
    value: function direction(s) {
      return s.b.subtract(s.a).normalize();
    }
  }, {
    key: "is_point_on_line",
    value: function is_point_on_line(s, v) {
      var direction = s.direction();
      if (direction.x == 0) return v.x == s.a.x;
      if (direction.y == 0) return v.y == s.a.y;

      var Ox = s.a.x;
      var Oy = s.a.y;
      var Dx = direction.x;
      var Dy = direction.y;

      var m = Dy / Dx;
      var b = Oy - (Ox - Dy) / Dx;
      var ly = m * v.x + b;
      return v.y - ly <= C.EPSILON;
    }
  }, {
    key: "is_point_on_segment",
    value: function is_point_on_segment(s, v) {
      return this.is_point_on_line(s, v) && (s.a.x <= v.x && v.x <= s.b.x && s.a.y <= v.y && v.y <= s.b.y || s.a.x >= v.x && v.x >= s.b.x && s.a.y >= v.y && v.y >= s.b.y);
    }
  }, {
    key: "intersect_line_line",
    value: function intersect_line_line(a, b) {
      var AOx = a.a.x;
      var AOy = a.a.y;
      var Ad = a.direction();
      var ADx = Ad.x;
      var ADy = Ad.y;

      var BOx = b.a.x;
      var BOy = b.a.y;
      var Bd = b.direction();
      var BDx = Bd.x;
      var BDy = Bd.y;

      // Parallel
      if (ADx - BDx <= C.EPSILON && ADy - BDy <= C.EPSILON) return null;

      var Am = ADy / ADx;
      var Ab = AOy - AOx * ADy / ADx;
      var Bm = BDy / BDx;
      var Bb = BOy - BOx * BDy / BDx;
      var m = null;
      var x = null;
      var y = null;

      if (ADx == 0) x = AOx;else if (BDx == 0) x = BOx;else x = (Bb - Ab) / (Am - Bm);

      if (ADy == 0) y = AOy;else if (BDy == 0) y = BOy;else y = Am * x + Ab || Bm * x + Bb;

      return new _vec2.default(x, y);
    }
  }, {
    key: "intersect_seg_seg",
    value: function intersect_seg_seg(a, b) {
      var ip = this.intersect_line_line(a, b);
      if (ip && this.is_point_on_segment(a, ip) && this.is_point_on_segment(b, ip)) return ip;
      return null;
    }
  }]);

  return Segment;
}();

exports.default = Segment;

},{"./constants":3,"./vec2":17}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

var _shot = require("./shot");

var _shot2 = _interopRequireDefault(_shot);

var _poly = require("./poly");

var _poly2 = _interopRequireDefault(_poly);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Ship = function (_Poly) {
  _inherits(Ship, _Poly);

  function Ship() {
    _classCallCheck(this, Ship);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Ship).call(this));

    _this.line_width = 2;
    _this.stroke_style = "hsl(225, 100%, 75%)";
    // M-16 36 L0 28 L16 36 L0 0 Z
    _this.points = [new _vec2.default(-16, 36), new _vec2.default(0, 28), new _vec2.default(16, 36), new _vec2.default(0, 0)];
    _this.update_path();

    _this.shot_interval = C.SHIP_SHOT_INTERVAL;
    _this.shot_clock = 0;
    return _this;
  }

  _createClass(Ship, [{
    key: "on_update",
    value: function on_update(app) {
      this.position.x = app.pointer.position.x;
      this.position.y = app.gfx.height - 75 * app.gfx.ratio;
    }
  }, {
    key: "on_fixed_update",
    value: function on_fixed_update(app, dt) {
      if (app.pointer.down_0) {
        if (this.shot_clock == 0 || this.shot_clock >= this.shot_interval) {
          this.shot_clock -= this.shot_interval;
          if (this.shot_clock < 0) this.shot_clock = 0;

          var shot = new _shot2.default(this.position.clone(), new _vec2.default(0, C.SHIP_SHOT_SPEED), 'hsl(225, 100%, 75%)');
          app.scene.add_child(shot);

          this.shot_clock += dt;
        } else {
          this.shot_clock += dt;
        }
      } else {
        this.shot_clock = 0;
      }
    }
  }]);

  return Ship;
}(_poly2.default);

exports.default = Ship;

},{"./constants":3,"./poly":11,"./shot":15,"./vec2":17}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _poly = require("./poly");

var _poly2 = _interopRequireDefault(_poly);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Shot = function (_Poly) {
  _inherits(Shot, _Poly);

  function Shot(position, velocity, color) {
    _classCallCheck(this, Shot);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Shot).call(this));

    _this.position = position || new _vec2.default();
    //this.color = color || 'hsl(360, 75%, 75%)';
    _this.fill_style = color || 'hsl(360, 75%, 75%)';
    //this.points = [ new Vec2(0, -7.5), new Vec2(7.5, 0), new Vec2(0, 7.5), new Vec2(-7.5, 0) ];

    var interior_angle = 3 * Math.PI / 4;
    var master_point = new _vec2.default(Math.cos(Math.PI / 8) * 8, Math.sin(Math.PI / 8) * 8);
    for (var i = 0, ii = 8; i < ii; i++) {
      _this.points.push(master_point.clone());
      var x = master_point.x * Math.cos(interior_angle) - master_point.y * Math.sin(interior_angle);
      var y = master_point.x * Math.sin(interior_angle) + master_point.y * Math.cos(interior_angle);
      master_point.x = x;
      master_point.y = y;
    }

    _this.update_path();

    _this.velocity = velocity || new _vec2.default(0, -1);
    return _this;
  }

  _createClass(Shot, [{
    key: "on_update",
    value: function on_update(app) {
      var gfx = app.gfx;
      if (this.position.x + C.SHOT_GRACE_ZONE < 0 || this.position.x - C.SHOT_GRACE_ZONE > gfx.width || this.position.y + C.SHOT_GRACE_ZONE < 0 || this.position.y - C.SHOT_GRACE_ZONE > gfx.height) app.scene.remove_child(this);
    }
  }, {
    key: "on_fixed_update",
    value: function on_fixed_update(app, dt) {
      this.position.x += this.velocity.x * dt * app.gfx.ratio;
      this.position.y += this.velocity.y * dt * app.gfx.ratio;
    }

    /*render(app) {
      let gfx = app.gfx;
      let ctx = gfx.ctx;
        let path = new Path2D();
      path.arc(this.position.x, this.position.y, 5 * gfx.ratio, 0, Math.PI*2);
      ctx.fillStyle = this.color;
      ctx.fill(path);
    }*/

  }]);

  return Shot;
}(_poly2.default);

exports.default = Shot;

},{"./constants":3,"./poly":11,"./vec2":17}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Timer = function () {
  function Timer() {
    _classCallCheck(this, Timer);

    this._time = 0;
    this.dt = 0;
    this.accumulator = 0;
  }

  _createClass(Timer, [{
    key: "init",
    value: function init() {
      var _this = this;

      requestAnimationFrame(function (time) {
        _this._time = time;
      });
    }
  }, {
    key: "time",
    get: function get() {
      return this._time;
    },
    set: function set(val) {
      this.dt = val - this._time;
      this.accumulator += this.dt;
      this._time = val;
    }
  }]);

  return Timer;
}();

exports.default = Timer;

},{"./constants":3}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Vec2 = function () {
  function Vec2(x, y) {
    _classCallCheck(this, Vec2);

    this.data = [x || 0, y || 0];
  }

  _createClass(Vec2, [{
    key: "clone",
    value: function clone() {
      return new Vec2(this.x, this.y);
    }
  }, {
    key: "perp",
    value: function perp() {
      return this.constructor.perp(this);
    }
  }, {
    key: "dot",
    value: function dot(b) {
      return this.constructor.dot(this, b);
    }
  }, {
    key: "cross",
    value: function cross(b) {
      return this.constructor.cross(this, b);
    }
  }, {
    key: "lenSq",
    value: function lenSq() {
      return this.constructor.lenSq(this);
    }
  }, {
    key: "len",
    value: function len() {
      return this.constructor.len(this);
    }
  }, {
    key: "distSq",
    value: function distSq(b) {
      return this.constructor.distSq(this, b);
    }
  }, {
    key: "dist",
    value: function dist(b) {
      return this.constructor.dist(this, b);
    }
  }, {
    key: "normalize",
    value: function normalize() {
      return this.constructor.normalize(this);
    }
  }, {
    key: "invert",
    value: function invert() {
      return this.constructor.invert(this);
    }
  }, {
    key: "negate",
    value: function negate() {
      return this.constructor.negate(this);
    }
  }, {
    key: "multiply",
    value: function multiply(b) {
      return this.constructor.multiply(this, b);
    }
  }, {
    key: "scale",
    value: function scale(s) {
      return this.constructor.scale(this, s);
    }
  }, {
    key: "add",
    value: function add(b) {
      return this.constructor.add(this, b);
    }
  }, {
    key: "add_scalar",
    value: function add_scalar(s) {
      return this.constructor.add_scalar(this, s);
    }
  }, {
    key: "subtract",
    value: function subtract(b) {
      return this.constructor.subtract(this, b);
    }
  }, {
    key: "x",
    get: function get() {
      return this.data[0];
    },
    set: function set(val) {
      this.data[0] = val;
    }
  }, {
    key: "y",
    get: function get() {
      return this.data[1];
    },
    set: function set(val) {
      this.data[1] = val;
    }
  }], [{
    key: "perp",
    value: function perp(v) {
      return new Vec2(-v.y, v.x);
    }
  }, {
    key: "dot",
    value: function dot(a, b) {
      return a.x * b.x + a.y * b.y;
    }
  }, {
    key: "cross",
    value: function cross(a, b) {
      return a.x * b.y - a.y - b.x;
    }
  }, {
    key: "lenSq",
    value: function lenSq(v) {
      return v.x * v.x + v.y * v.y;
    }
  }, {
    key: "len",
    value: function len(v) {
      return Math.sqrt(this.lenSq(v));
    }
  }, {
    key: "distSq",
    value: function distSq(a, b) {
      var x = b.x - a.x;
      var y = b.y - a.y;
      return x * x + y * y;
    }
  }, {
    key: "dist",
    value: function dist(a, b) {
      return Math.sqrt(this.distSq(a, b));
    }
  }, {
    key: "normalize",
    value: function normalize(v) {
      var len = this.len(v);
      return new Vec2(v.x / len, v.y / len);
    }
  }, {
    key: "invert",
    value: function invert(v) {
      return new Vec2(1 / v.x, 1 / v.y);
    }
  }, {
    key: "negate",
    value: function negate(v) {
      return new Vec2(-v.x, -v.y);
    }
  }, {
    key: "multiply",
    value: function multiply(a, b) {
      return new Vec2(a.x * b.x, a.y * b.y);
    }
  }, {
    key: "scale",
    value: function scale(v, s) {
      return this.multiply(v, new Vec2(s, s));
    }
  }, {
    key: "divide",
    value: function divide(a, b) {
      return this.multiply(a, this.invert(b));
    }
  }, {
    key: "add",
    value: function add(a, b) {
      return new Vec2(a.x + b.x, a.y + b.y);
    }
  }, {
    key: "add_scalar",
    value: function add_scalar(v, s) {
      return this.add(v, new Vec2(s, s));
    }
  }, {
    key: "subtract",
    value: function subtract(a, b) {
      return new Vec2(a.x - b.x, a.y - b.y);
    }
  }]);

  return Vec2;
}();

exports.default = Vec2;

},{"./constants":3}]},{},[9])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

//# sourceMappingURL=data:application/json;base64,
