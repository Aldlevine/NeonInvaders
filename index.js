(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Copyright 2014 Google Inc. All rights reserved.
 *
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file.
 *
 * @fileoverview Description of this file.
 *
 * A polyfill for HTML Canvas features, including
 * Path2D support.
 */
if (CanvasRenderingContext2D.prototype.ellipse == undefined) {
  CanvasRenderingContext2D.prototype.ellipse = function(x, y, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise) {
    this.save();
    this.translate(x, y);
    this.rotate(rotation);
    this.scale(radiusX, radiusY);
    this.arc(0, 0, 1, startAngle, endAngle, antiClockwise);
    this.restore();
  }
}

if (typeof Path2D !== 'function') {
  (function() {

    // Include the SVG path parser.
    parser = (function() {
      /*
       * Generated by PEG.js 0.8.0.
       *
       * http://pegjs.majda.cz/
       */
    
      function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
      }
    
      function SyntaxError(message, expected, found, offset, line, column) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.offset   = offset;
        this.line     = line;
        this.column   = column;
    
        this.name     = "SyntaxError";
      }
    
      peg$subclass(SyntaxError, Error);
    
      function parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},
    
            peg$FAILED = {},
    
            peg$startRuleFunctions = { svg_path: peg$parsesvg_path },
            peg$startRuleFunction  = peg$parsesvg_path,
    
            peg$c0 = peg$FAILED,
            peg$c1 = [],
            peg$c2 = null,
            peg$c3 = function(d) { return ops; },
            peg$c4 = /^[Mm]/,
            peg$c5 = { type: "class", value: "[Mm]", description: "[Mm]" },
            peg$c6 = function(ch, args) {
                  var moveCh = ch
                  // If this is the first move cmd then force it to be absolute.
                  if (firstSubPath) {
                    moveCh = 'M';
                    firstSubPath = false;
                  }
                  ops.push({type: 'moveTo', args: makeAbsolute(moveCh, args[0])});
                  for (var i=1; i < args.length; i++) {
                    // The lineTo args are either abs or relative, depending on the
                    // original moveto command.
                    ops.push({type: 'lineTo', args: makeAbsolute(ch, args[i])});
                  }
                },
            peg$c7 = function(one, rest) { return concatSequence(one, rest); },
            peg$c8 = /^[Zz]/,
            peg$c9 = { type: "class", value: "[Zz]", description: "[Zz]" },
            peg$c10 = function() { ops.push({type: 'closePath', args: []}); },
            peg$c11 = /^[Ll]/,
            peg$c12 = { type: "class", value: "[Ll]", description: "[Ll]" },
            peg$c13 = function(ch, args) {
                  for (var i=0; i < args.length; i++) {
                    ops.push({type: 'lineTo', args: makeAbsolute(ch, args[i])});
                  }
                },
            peg$c14 = /^[Hh]/,
            peg$c15 = { type: "class", value: "[Hh]", description: "[Hh]" },
            peg$c16 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'lineTo', args: makeAbsoluteFromX(ch, args[i])});
                }
              },
            peg$c17 = /^[Vv]/,
            peg$c18 = { type: "class", value: "[Vv]", description: "[Vv]" },
            peg$c19 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'lineTo', args: makeAbsoluteFromY(ch, args[i])});
                }
              },
            peg$c20 = /^[Cc]/,
            peg$c21 = { type: "class", value: "[Cc]", description: "[Cc]" },
            peg$c22 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'bezierCurveTo', args: makeAbsoluteMultiple(ch, args[i])});
                }
              },
            peg$c23 = function(cp1, cp2, last) { return cp1.concat(cp2, last); },
            peg$c24 = /^[Ss]/,
            peg$c25 = { type: "class", value: "[Ss]", description: "[Ss]" },
            peg$c26 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'bezierCurveTo', args: makeReflected().concat(makeAbsoluteMultiple(ch, args[i]))});
                }
              },
            peg$c27 = function(cp1, last) { return cp1.concat(last); },
            peg$c28 = /^[Qq]/,
            peg$c29 = { type: "class", value: "[Qq]", description: "[Qq]" },
            peg$c30 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  ops.push({type: 'quadraticCurveTo', args: makeAbsoluteMultiple(ch, args[i])});
                }
              },
            peg$c31 = /^[Tt]/,
            peg$c32 = { type: "class", value: "[Tt]", description: "[Tt]" },
            peg$c33 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  var reflected = makeReflected();
                  ops.push({type: 'quadraticCurveTo', args: reflected.concat(makeAbsoluteMultiple(ch, args[i]))});
                  lastControl = reflected.slice(0);
                }
              },
            peg$c34 = /^[Aa]/,
            peg$c35 = { type: "class", value: "[Aa]", description: "[Aa]" },
            peg$c36 = function(ch, args) {
                for (var i=0; i < args.length; i++) {
                  var x1 = [lastCoord.slice()];
                  var x2 = [makeAbsolute(ch, args[i].slice(-2))];
                  absArgs = x1.concat(args[i].slice(0, -2), x2);
                  ellipseFromEllipticalArc.apply(this, absArgs);
                }
              },
            peg$c37 = function(rx, ry, xrot, large, sweep, last) { return [parseFloat(rx), parseFloat(ry), parseFloat(xrot.join('')), parseInt(large), parseInt(sweep), last[0], last[1]]; },
            peg$c38 = function(x, y) { return [x, y] },
            peg$c39 = function(number) { return parseFloat(number.join('')) },
            peg$c40 = "0",
            peg$c41 = { type: "literal", value: "0", description: "\"0\"" },
            peg$c42 = "1",
            peg$c43 = { type: "literal", value: "1", description: "\"1\"" },
            peg$c44 = ",",
            peg$c45 = { type: "literal", value: ",", description: "\",\"" },
            peg$c46 = ".",
            peg$c47 = { type: "literal", value: ".", description: "\".\"" },
            peg$c48 = /^[eE]/,
            peg$c49 = { type: "class", value: "[eE]", description: "[eE]" },
            peg$c50 = "+",
            peg$c51 = { type: "literal", value: "+", description: "\"+\"" },
            peg$c52 = "-",
            peg$c53 = { type: "literal", value: "-", description: "\"-\"" },
            peg$c54 = /^[0-9]/,
            peg$c55 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c56 = function(digits) { return digits.join('') },
            peg$c57 = /^[ \t\n\r]/,
            peg$c58 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
    
            peg$currPos          = 0,
            peg$reportedPos      = 0,
            peg$cachedPos        = 0,
            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,
    
            peg$result;
    
        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
          }
    
          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
    
        function text() {
          return input.substring(peg$reportedPos, peg$currPos);
        }
    
        function offset() {
          return peg$reportedPos;
        }
    
        function line() {
          return peg$computePosDetails(peg$reportedPos).line;
        }
    
        function column() {
          return peg$computePosDetails(peg$reportedPos).column;
        }
    
        function expected(description) {
          throw peg$buildException(
            null,
            [{ type: "other", description: description }],
            peg$reportedPos
          );
        }
    
        function error(message) {
          throw peg$buildException(message, null, peg$reportedPos);
        }
    
        function peg$computePosDetails(pos) {
          function advance(details, startPos, endPos) {
            var p, ch;
    
            for (p = startPos; p < endPos; p++) {
              ch = input.charAt(p);
              if (ch === "\n") {
                if (!details.seenCR) { details.line++; }
                details.column = 1;
                details.seenCR = false;
              } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                details.line++;
                details.column = 1;
                details.seenCR = true;
              } else {
                details.column++;
                details.seenCR = false;
              }
            }
          }
    
          if (peg$cachedPos !== pos) {
            if (peg$cachedPos > pos) {
              peg$cachedPos = 0;
              peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
            }
            advance(peg$cachedPosDetails, peg$cachedPos, pos);
            peg$cachedPos = pos;
          }
    
          return peg$cachedPosDetails;
        }
    
        function peg$fail(expected) {
          if (peg$currPos < peg$maxFailPos) { return; }
    
          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }
    
          peg$maxFailExpected.push(expected);
        }
    
        function peg$buildException(message, expected, pos) {
          function cleanupExpected(expected) {
            var i = 1;
    
            expected.sort(function(a, b) {
              if (a.description < b.description) {
                return -1;
              } else if (a.description > b.description) {
                return 1;
              } else {
                return 0;
              }
            });
    
            while (i < expected.length) {
              if (expected[i - 1] === expected[i]) {
                expected.splice(i, 1);
              } else {
                i++;
              }
            }
          }
    
          function buildMessage(expected, found) {
            function stringEscape(s) {
              function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }
    
              return s
                .replace(/\\/g,   '\\\\')
                .replace(/"/g,    '\\"')
                .replace(/\x08/g, '\\b')
                .replace(/\t/g,   '\\t')
                .replace(/\n/g,   '\\n')
                .replace(/\f/g,   '\\f')
                .replace(/\r/g,   '\\r')
                .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
            }
    
            var expectedDescs = new Array(expected.length),
                expectedDesc, foundDesc, i;
    
            for (i = 0; i < expected.length; i++) {
              expectedDescs[i] = expected[i].description;
            }
    
            expectedDesc = expected.length > 1
              ? expectedDescs.slice(0, -1).join(", ")
                  + " or "
                  + expectedDescs[expected.length - 1]
              : expectedDescs[0];
    
            foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";
    
            return "Expected " + expectedDesc + " but " + foundDesc + " found.";
          }
    
          var posDetails = peg$computePosDetails(pos),
              found      = pos < input.length ? input.charAt(pos) : null;
    
          if (expected !== null) {
            cleanupExpected(expected);
          }
    
          return new SyntaxError(
            message !== null ? message : buildMessage(expected, found),
            expected,
            found,
            pos,
            posDetails.line,
            posDetails.column
          );
        }
    
        function peg$parsesvg_path() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsewsp();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsewsp();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsemoveTo_drawTo_commandGroups();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsewsp();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsewsp();
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c3(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsemoveTo_drawTo_commandGroups() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsemoveTo_drawTo_commandGroup();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parsewsp();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsewsp();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsemoveTo_drawTo_commandGroups();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsemoveTo_drawTo_commandGroup() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsemoveto();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parsewsp();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsewsp();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsedrawto_commands();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsedrawto_commands() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsedrawto_command();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            s4 = peg$parsewsp();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsewsp();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsedrawto_commands();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsedrawto_command() {
          var s0;
    
          s0 = peg$parseclosepath();
          if (s0 === peg$FAILED) {
            s0 = peg$parselineto();
            if (s0 === peg$FAILED) {
              s0 = peg$parsehorizontal_lineto();
              if (s0 === peg$FAILED) {
                s0 = peg$parsevertical_lineto();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsecurveto();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsesmooth_curveto();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsequadratic_bezier_curveto();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsesmooth_quadratic_bezier_curveto();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseelliptical_arc();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
    
          return s0;
        }
    
        function peg$parsemoveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c4.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsemoveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c6(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsemoveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parselineto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parseclosepath() {
          var s0, s1;
    
          s0 = peg$currPos;
          if (peg$c8.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c10();
          }
          s0 = s1;
    
          return s0;
        }
    
        function peg$parselineto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c11.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parselineto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c13(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parselineto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parselineto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsehorizontal_lineto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c14.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c16(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecoordinate_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecoordinate_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsevertical_lineto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c17.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c19(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecurveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c20.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecurveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c22(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecurveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecurveto_argument();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecurveto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecurveto_argument() {
          var s0, s1, s2, s3, s4, s5;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_pair();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsecomma_wsp();
                if (s4 === peg$FAILED) {
                  s4 = peg$c2;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsecoordinate_pair();
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c23(s1, s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_curveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c24.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsesmooth_curveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c26(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_curveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsesmooth_curveto_argument();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsesmooth_curveto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_curveto_argument() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_pair();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c27(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsequadratic_bezier_curveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c28.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsequadratic_bezier_curveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c30(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsequadratic_bezier_curveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsequadratic_bezier_curveto_argument();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsequadratic_bezier_curveto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsequadratic_bezier_curveto_argument() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate_pair();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c27(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_quadratic_bezier_curveto() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c31.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsesmooth_quadratic_bezier_curveto_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c33(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesmooth_quadratic_bezier_curveto_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate_pair();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsesmooth_quadratic_bezier_curveto_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parseelliptical_arc() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c34.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c35); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsewsp();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsewsp();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseelliptical_arc_argument_sequence();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c36(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parseelliptical_arc_argument_sequence() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = peg$parseelliptical_arc_argument();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsecomma_wsp();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseelliptical_arc_argument_sequence();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c7(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parseelliptical_arc_argument() {
          var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
    
          s0 = peg$currPos;
          s1 = peg$parsenonnegative_number();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenonnegative_number();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsecomma_wsp();
                if (s4 === peg$FAILED) {
                  s4 = peg$c2;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsenumber();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsecomma_wsp();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseflag();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsecomma_wsp();
                        if (s8 === peg$FAILED) {
                          s8 = peg$c2;
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseflag();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parsecomma_wsp();
                            if (s10 === peg$FAILED) {
                              s10 = peg$c2;
                            }
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parsecoordinate_pair();
                              if (s11 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c37(s1, s3, s5, s7, s9, s11);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecoordinate_pair() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          s1 = peg$parsecoordinate();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma_wsp();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecoordinate();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c38(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsecoordinate() {
          var s0, s1;
    
          s0 = peg$currPos;
          s1 = peg$parsenumber();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c39(s1);
          }
          s0 = s1;
    
          return s0;
        }
    
        function peg$parsenonnegative_number() {
          var s0;
    
          s0 = peg$parsefloating_point_constant();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedigit_sequence();
          }
    
          return s0;
        }
    
        function peg$parsenumber() {
          var s0, s1, s2;
    
          s0 = peg$currPos;
          s1 = peg$parsesign();
          if (s1 === peg$FAILED) {
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsefloating_point_constant();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsesign();
            if (s1 === peg$FAILED) {
              s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsedigit_sequence();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
    
          return s0;
        }
    
        function peg$parseflag() {
          var s0;
    
          if (input.charCodeAt(peg$currPos) === 48) {
            s0 = peg$c40;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 49) {
              s0 = peg$c42;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
          }
    
          return s0;
        }
    
        function peg$parsecomma_wsp() {
          var s0, s1, s2, s3, s4;
    
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsewsp();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsewsp();
            }
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomma();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parsewsp();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parsewsp();
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecomma();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parsewsp();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsewsp();
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
    
          return s0;
        }
    
        function peg$parsecomma() {
          var s0;
    
          if (input.charCodeAt(peg$currPos) === 44) {
            s0 = peg$c44;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
    
          return s0;
        }
    
        function peg$parsefloating_point_constant() {
          var s0, s1, s2;
    
          s0 = peg$currPos;
          s1 = peg$parsefractional_constant();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseexponent();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsedigit_sequence();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseexponent();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
    
          return s0;
        }
    
        function peg$parsefractional_constant() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          s1 = peg$parsedigit_sequence();
          if (s1 === peg$FAILED) {
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s2 = peg$c46;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c47); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsedigit_sequence();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsedigit_sequence();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s2 = peg$c46;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c47); }
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
    
          return s0;
        }
    
        function peg$parseexponent() {
          var s0, s1, s2, s3;
    
          s0 = peg$currPos;
          if (peg$c48.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsesign();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsedigit_sequence();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
    
          return s0;
        }
    
        function peg$parsesign() {
          var s0;
    
          if (input.charCodeAt(peg$currPos) === 43) {
            s0 = peg$c50;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s0 = peg$c52;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
          }
    
          return s0;
        }
    
        function peg$parsedigit_sequence() {
          var s0, s1, s2;
    
          s0 = peg$currPos;
          s1 = [];
          if (peg$c54.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c54.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c55); }
              }
            }
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c56(s1);
          }
          s0 = s1;
    
          return s0;
        }
    
        function peg$parsewsp() {
          var s0;
    
          if (peg$c57.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
    
          return s0;
        }
    
    
          // The last coordinate we are at in the path. In absolute coords.
          var lastCoord = [0, 0];
          // The last control point we encountered in the path. In absolute coords.
          var lastControl = [0, 0];
          // The list of operations we've parsed so far.
          var ops = [];
          // Have we parsed the first sub-path yet?
          var firstSubPath = true;
          // The letter of the last parsed command.
          var lastCh = '';
    
          // Convert a position into an absolute position.
          function makeAbsolute(c, coord) {
            if ('mlazhvcsqt'.indexOf(c) === -1) {
              lastCoord = coord;
            } else {
              lastCoord[0] += coord[0];
              lastCoord[1] += coord[1];
            }
            lastCh = c;
            return lastCoord.slice(0);
          }
    
          // Convert a sequence of coordinates into absolute coordinates.
          //
          // For arguments that take multiple coord pairs, such as bezier.
          function makeAbsoluteMultiple(c, seq) {
            var r = [];
            var lastPosCopy = lastCoord.slice(0);
            for (var i=0; i < seq.length; i+=2) {
              // Only the last point should update lastCoord.
              lastCoord = lastPosCopy.slice(0);
              var coord = makeAbsolute(c, seq.slice(i, i+2));
              r = r.concat(coord);
              // Record the last control point, it might be needed for
              // shorthand operations.
              if (i == seq.length-4) {
                lastControl = coord.slice(0);
              }
            }
            return r;
          }
    
          // Find the reflection of the last control point over
          // the last postion in the path.
          function makeReflected() {
            if ('CcSsQqTt'.indexOf(lastCh) == -1) {
              lastControl = lastCoord.slice(0);
            }
            // reflected = 2*lastCoord - lastControl
            // Note the result is absolute, not relative.
            var r = [0, 0];
            r[0] = 2*lastCoord[0] - lastControl[0];
            r[1] = 2*lastCoord[1] - lastControl[1];
            return r;
          }
    
          function makeAbsoluteFromX(c, x) {
            var coord = [x, 0];
            if (c == 'H') {
              coord[1] = lastCoord[1];
            }
            return makeAbsolute(c, coord);
          }
    
          function makeAbsoluteFromY(c, y) {
            var coord = [0, y];
            if (c == 'V') {
              coord[0] = lastCoord[0];
            }
            return makeAbsolute(c, coord);
          }
    
          function concatSequence(one, rest) {
            var r = [one];
            if (rest && rest.length > 1) {
              var rem = rest[1];
              for (var i = 0; i < rem.length; i++) {
                r.push(rem[i]);
              }
            }
            return r;
          }
    
          function mag(v) {
            return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));
          }
    
          function dot(u, v) {
            return (u[0]*v[0] + u[1]*v[1]);
          }
    
          function ratio(u, v) {
            return dot(u,v) / (mag(u)*mag(v))
          }
    
          function angle(u, v) {
            var sign = 1.0;
            if ((u[0]*v[1] - u[1]*v[0]) < 0) {
              sign = -1.0;
            }
            return sign * Math.acos(ratio(u,v));
          }
    
          function rotClockwise(v, angle) {
            var cost = Math.cos(angle);
            var sint = Math.sin(angle);
            return [cost*v[0] + sint*v[1], -1 * sint*v[0] + cost*v[1]];
          }
    
          function rotCounterClockwise(v, angle) {
            var cost = Math.cos(angle);
            var sint = Math.sin(angle);
            return [cost*v[0] - sint*v[1], sint*v[0] + cost*v[1]];
          }
    
          function midPoint(u, v) {
            return [(u[0] - v[0])/2.0, (u[1] - v[1])/2.0];
          }
    
          function meanVec(u, v) {
            return [(u[0] + v[0])/2.0, (u[1] + v[1])/2.0];
          }
    
          function pointMul(u, v) {
            return [u[0]*v[0], u[1]*v[1]];
          }
    
          function scale(c, v) {
            return [c*v[0], c*v[1]];
          }
    
          function sum(u, v) {
            return [u[0] + v[0], u[1] + v[1]];
          }
    
          // Convert an SVG elliptical arc to a series of canvas commands.
          //
          // x1, x2: start and stop coordinates of the ellipse.
          // rx, ry: radii of the ellipse.
          // phi: rotation of the ellipse.
          // fA: large arc flag.
          // fS: sweep flag.
          function ellipseFromEllipticalArc(x1, rx, ry, phi, fA, fS, x2) {
            // Convert from endpoint to center parametrization, as detailed in:
            //   http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes
            if (rx == 0 || ry == 0) {
              ops.push({type: 'lineTo', args: x2});
              return;
            }
            var phi = phi * (Math.PI / 180.0);
            rx = Math.abs(rx);
            ry = Math.abs(ry);
            var xPrime = rotClockwise(midPoint(x1, x2), phi);                // F.6.5.1
            var xPrime2 = pointMul(xPrime, xPrime);
            var rx2 = Math.pow(rx, 2);
            var ry2 = Math.pow(ry, 2);
    
            var lambda = Math.sqrt(xPrime2[0]/rx2 + xPrime2[1]/ry2);
            if (lambda > 1) {
              rx *= lambda;
              ry *= lambda;
              rx2 = Math.pow(rx, 2);
              ry2 = Math.pow(ry, 2);
            }
    
            var factor = Math.sqrt((rx2*ry2 - rx2*xPrime2[1] - ry2*xPrime2[0]) /
              (rx2*xPrime2[1] + ry2*xPrime2[0]));
            if (fA == fS) {
              factor *= -1.0;
            }
            var cPrime = scale(factor, [rx*xPrime[1]/ry, -ry*xPrime[0]/rx]); // F.6.5.2
            var c = sum(rotCounterClockwise(cPrime, phi), meanVec(x1, x2));  // F.6.5.3
            var x1UnitVector = [(xPrime[0] - cPrime[0])/rx, (xPrime[1] - cPrime[1])/ry];
            var x2UnitVector = [(-1.0*xPrime[0] - cPrime[0])/rx, (-1.0*xPrime[1] - cPrime[1])/ry];
            var theta = angle([1, 0], x1UnitVector);                         // F.6.5.5
            var deltaTheta = angle(x1UnitVector, x2UnitVector);              // F.6.5.6
            var start = theta;
            var end = theta+deltaTheta;
            ops.push(
              {type: 'save', args: []},
              {type: 'translate', args: [c[0], c[1]]},
              {type: 'rotate', args: [phi]},
              {type: 'scale', args: [rx, ry]},
              {type: 'arc', args: [0, 0, 1, start, end, 1-fS]},
              {type: 'restore', args: []}
              );
          }
    
    
        peg$result = peg$startRuleFunction();
    
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
          return peg$result;
        } else {
          if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail({ type: "end", description: "end of input" });
          }
    
          throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
        }
      }
    
      return {
        SyntaxError: SyntaxError,
        parse:       parse
      };
    })();

    function Path_(arg) {
      this.ops_ = [];
      if (arg == undefined) {
        return;
      }
      if (typeof arg == 'string') {
        try {
          this.ops_ = parser.parse(arg);
        } catch(e) {
          // Treat an invalid SVG path as an empty path.
        }
      } else if (arg.hasOwnProperty('ops_')) {
        this.ops_ = arg.ops_.slice(0);
      } else {
        throw 'Error: ' + typeof arg + 'is not a valid argument to Path';
      }
    };

    // TODO(jcgregorio) test for arcTo and implement via something.


    // Path methods that map simply to the CanvasRenderingContext2D.
    var simple_mapping = [
      'closePath',
      'moveTo',
      'lineTo',
      'quadraticCurveTo',
      'bezierCurveTo',
      'rect',
      'arc',
      'arcTo',
      'ellipse',
      'isPointInPath',
      'isPointInStroke',
      ];

    function createFunction(name) {
      return function() {
        this.ops_.push({type: name, args: Array.prototype.slice.call(arguments, 0)});
      };
    }

    // Add simple_mapping methods to Path2D.
    for (var i=0; i<simple_mapping.length; i++) {
      var name = simple_mapping[i];
      Path_.prototype[name] = createFunction(name);
    }

    Path_.prototype['addPath'] = function(path, tr) {
      var hasTx = false;
      if (tr
          && tr.hasOwnProperty('a')
          && tr.hasOwnProperty('b')
          && tr.hasOwnProperty('c')
          && tr.hasOwnProperty('d')
          && tr.hasOwnProperty('e')
          && tr.hasOwnProperty('f')) {
        hasTx = true;
        this.ops_.push({type: 'save', args: []});
        this.ops_.push({type: 'transform', args: [tr.a, tr.b, tr.c, tr.d, tr.e, tr.f]});
      }
      this.ops_ = this.ops_.concat(path.ops_);
      if (hasTx) {
        this.ops_.push({type: 'restore', args: []});
      }
    }

    original_fill = CanvasRenderingContext2D.prototype.fill;
    original_stroke = CanvasRenderingContext2D.prototype.stroke;
    original_clip = CanvasRenderingContext2D.prototype.clip;
    original_is_point_in_path = CanvasRenderingContext2D.prototype.isPointInPath;
    original_is_point_in_stroke = CanvasRenderingContext2D.prototype.isPointInStroke;

    // Replace methods on CanvasRenderingContext2D with ones that understand Path2D.
    CanvasRenderingContext2D.prototype.fill = function(arg) {
      if (arg instanceof Path_) {
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        original_fill.apply(this, Array.prototype.slice.call(arguments, 1));
      } else {
        original_fill.apply(this, arguments);
      }
    }

    CanvasRenderingContext2D.prototype.stroke = function(arg) {
      if (arg instanceof Path_) {
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        original_stroke.call(this);
      } else {
        original_stroke.call(this);
      }
    }

    CanvasRenderingContext2D.prototype.clip = function(arg) {
      if (arg instanceof Path_) {
        // Note that we don't save and restore the context state, since the
        // clip region is part of the state. Not really a problem since the
        // HTML 5 spec doesn't say that clip(path) doesn't affect the current
        // path.
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        original_clip.apply(this, Array.prototype.slice.call(arguments, 1));
      } else {
        original_clip.apply(this, arguments);
      }
    }

    CanvasRenderingContext2D.prototype.isPointInPath = function(arg) {
      if (arg instanceof Path_) {
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        return original_is_point_in_path.apply(this, Array.prototype.slice.call(arguments, 1));
      } else {
        return original_is_point_in_path.apply(this, arguments);
      }
    }
    CanvasRenderingContext2D.prototype.isPointInStroke = function(arg) {
      if (arg instanceof Path_) {
        this.beginPath();
        for (var i = 0, len = arg.ops_.length; i < len; i++) {
          var op = arg.ops_[i];
          CanvasRenderingContext2D.prototype[op.type].apply(this, op.args);
        }
        return original_is_point_in_stroke.apply(this, Array.prototype.slice.call(arguments, 1));
      } else {
        return original_is_point_in_stroke.apply(this, arguments);
      }
    }

    // Set up externs.
    Path2D = Path_;
  })();
}

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _evented = require("./evented");

var _evented2 = _interopRequireDefault(_evented);

var _gfx = require("./gfx");

var _gfx2 = _interopRequireDefault(_gfx);

var _timer = require("./timer");

var _timer2 = _interopRequireDefault(_timer);

var _pointer = require("./pointer");

var _pointer2 = _interopRequireDefault(_pointer);

var _gnode = require("./gnode");

var _gnode2 = _interopRequireDefault(_gnode);

var _fps = require("./fps");

var _fps2 = _interopRequireDefault(_fps);

var _poly = require("./poly");

var _poly2 = _interopRequireDefault(_poly);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var App = function (_Evented) {
  _inherits(App, _Evented);

  function App() {
    _classCallCheck(this, App);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(App).call(this));

    var canvas = document.querySelector('canvas');
    _this.gfx = new _gfx2.default(canvas);
    _this.timer = new _timer2.default();
    _this.pointer = new _pointer2.default();
    _this.scene = new _gnode2.default();
    _this.paused = false;

    if (C.DEBUG) {
      _this.fps = new _fps2.default();
      document.documentElement.classList.add('debug');
    }

    _this.register_events();
    _this.init_loop();
    return _this;
  }

  _createClass(App, [{
    key: "register_events",
    value: function register_events() {
      var _this2 = this;

      window.addEventListener('resize', function (ev) {
        _this2.gfx.set_size();
      });

      //window.addEventListener('blur', _ => {
      //  this.pause();
      //});

      //window.addEventListener('focus', _ => {
      //  this.resume();
      //});

      this.pointer.register_events();

      this.on('pause', function (_) {
        document.documentElement.classList.add('paused');
        // PAUSE MENU
      });

      this.on('resume', function (_) {
        document.documentElement.classList.remove('paused');
        // KILL PAUSE MENU
      });

      if (C.DEBUG) {
        this.fps.tic();
        this.fps.on('update', function (fps, min, max) {
          var fps_div = document.querySelector('.frames');
          var min_div = document.querySelector('.min');
          var max_div = document.querySelector('.max');

          fps_div.innerHTML = "FPS: " + fps;
          min_div.innerHTML = "MIN: " + min;
          max_div.innerHTML = "MAX: " + max;
        });
      }
    }
  }, {
    key: "init_loop",
    value: function init_loop() {
      this.timer.init();
      this.tic();
    }
  }, {
    key: "pause",
    value: function pause() {
      this.dispatch('pause');
      this.paused = true;
    }
  }, {
    key: "resume",
    value: function resume() {
      this.dispatch('resume');
      this.paused = false;
      this.init_loop();
    }
  }, {
    key: "tic",
    value: function tic() {
      var _this3 = this;

      if (!this.paused) {
        this.frame_request = requestAnimationFrame(function (time) {
          _this3.timer.time = time;
          _this3.tic();
        });
      }

      this.update();

      while (this.timer.accumulator >= C.FIXED_UPDATE_TIME) {
        this.timer.accumulator -= C.FIXED_UPDATE_TIME;
        this.fixed_update(C.FIXED_UPDATE_TIME);
      }

      if (C.DEBUG) this.fps.add_frame();
    }
  }, {
    key: "update",
    value: function update() {
      var _this4 = this;

      var gfx = this.gfx;
      var ctx = gfx.ctx;
      ctx.clearRect(0, 0, gfx.width, gfx.height);

      this.scene.for_each(function (gnode) {
        gnode.on_update(_this4, _this4.timer.dt);
        if (gnode.render) gnode.render(_this4);

        /*
        this.scene.for_each(gnode2 => {
          if( gnode == gnode2 ) return;
          if( gnode instanceof Poly && gnode2 instanceof Poly ) {
            let ips = gnode.intersect(gnode2);
            ips.forEach(p => {
              ctx.strokeStyle = '#f00';
              ctx.beginPath();
              ctx.arc(p.x, p.y, 2, 0, Math.PI*2);
              ctx.closePath();
              ctx.stroke();
            })
          }
        });
        */
      });
    }
  }, {
    key: "fixed_update",
    value: function fixed_update(dt) {
      var _this5 = this;

      this.scene.for_each(function (gnode) {
        gnode.on_fixed_update(_this5, dt);
      });
    }
  }]);

  return App;
}(_evented2.default);

exports.default = App;

},{"./constants":3,"./evented":5,"./fps":6,"./gfx":7,"./gnode":8,"./pointer":10,"./poly":11,"./timer":17}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var DEBUG = exports.DEBUG = true;
var FIXED_UPDATE_TIME = exports.FIXED_UPDATE_TIME = 1 / 120 * 1000; // 60fps

var EPSILON = exports.EPSILON = Math.pow(2, -52);

var SHIP_SHOT_SPEED = exports.SHIP_SHOT_SPEED = -0.75;
var SHIP_SHOT_INTERVAL = exports.SHIP_SHOT_INTERVAL = 250;
var SHOT_GRACE_ZONE = exports.SHOT_GRACE_ZONE = 50;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

var _shot = require("./shot");

var _shot2 = _interopRequireDefault(_shot);

var _rigidBody = require("./rigid-body");

var _rigidBody2 = _interopRequireDefault(_rigidBody);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Enemy = function (_RigidBody) {
  _inherits(Enemy, _RigidBody);

  function Enemy() {
    _classCallCheck(this, Enemy);

    // M-24 0 L24 0 L24 2 L24 14 L20 14 L20 4 L4 10 L2 20 L0 20 L-2 20 L-4 10 L-20 4 L-20 14 L-24 14 L-24 2 Z

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Enemy).call(this));

    _this.points = [new _vec2.default(-24, 0), new _vec2.default(24, 0), new _vec2.default(24, 2), new _vec2.default(24, 14), new _vec2.default(20, 14), new _vec2.default(20, 4), new _vec2.default(4, 10), new _vec2.default(2, 20), new _vec2.default(0, 20), new _vec2.default(-2, 20), new _vec2.default(-4, 10), new _vec2.default(-20, 4), new _vec2.default(-20, 14), new _vec2.default(-24, 14), new _vec2.default(-24, 2)];
    _this.stroke_style = 'hsl(360, 75%, 75%)';
    _this.fill_style = 'hsla(360, 75%, 75%, 0.5)';
    _this.line_width = 2;
    _this.update_path();

    _this.mass = 10;
    _this.health = 10;
    _this.armor = 10;

    return _this;
  }

  _createClass(Enemy, [{
    key: "on_update",
    value: function on_update(app) {
      if (this.health <= 0) {
        app.scene.remove_child(this);
      }
    }
  }, {
    key: "on_fixed_update",
    value: function on_fixed_update(app) {
      var _this2 = this;

      var gfx = app.gfx;
      var ctx = gfx.ctx;
      // Collision Stuff
      app.scene.for_each(function (node) {
        if (node instanceof _shot2.default) {
          var ips = _this2.intersect(node);
          if (ips.length > 0) {
            app.scene.remove_child(node);
            _this2.hit(10);
          }
        }
      });
      // AI Stuff
      this.rotation += Math.PI / 200;
    }
  }, {
    key: "hit",
    value: function hit(damage) {
      this.health -= damage / this.armor;
    }
  }]);

  return Enemy;
}(_rigidBody2.default);

exports.default = Enemy;

},{"./constants":3,"./rigid-body":13,"./shot":16,"./vec2":18}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Evented = function () {
  function Evented() {
    _classCallCheck(this, Evented);

    this.events = {};
  }

  _createClass(Evented, [{
    key: "on",
    value: function on(name, fn) {
      if (fn instanceof Function) {
        this.events[name] = this.events[name] || [];
        this.events[name].push(fn);
      }
    }
  }, {
    key: "off",
    value: function off(name, fn) {
      this.events[name] = this.events[name];
      var ev = this.events[name];
      var index = -1;
      if (ev && (index = ev.indexOf(fn)) > -1) ev.splice(index, 1);
    }
  }, {
    key: "dispatch",
    value: function dispatch(name) {
      var _this = this;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var ev = this.events[name];
      if (ev) {
        ev.forEach(function (fn) {
          fn.call.apply(fn, [_this].concat(args));
        });
      }
    }
  }]);

  return Evented;
}();

exports.default = Evented;

},{"./constants":3}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _evented = require("./evented");

var _evented2 = _interopRequireDefault(_evented);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FPS = function (_Evented) {
  _inherits(FPS, _Evented);

  function FPS() {
    _classCallCheck(this, FPS);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(FPS).call(this));

    _this.frames = 0;
    _this.min = Number.MAX_VALUE;
    _this.max = 0;
    _this.timeout = null;
    return _this;
  }

  _createClass(FPS, [{
    key: "add_frame",
    value: function add_frame() {
      this.frames++;
    }
  }, {
    key: "tic",
    value: function tic() {
      var _this2 = this;

      if (this.frames < this.min && this.frames > 0) this.min = this.frames;
      if (this.frames > this.max) this.max = this.frames;
      this.dispatch('update', this.frames, this.min, this.max);
      this.frames = 0;
      clearTimeout(this.timeout);
      this.timeout = setTimeout(function (_) {
        _this2.tic();
      }, 1000);
    }
  }]);

  return FPS;
}(_evented2.default);

exports.default = FPS;

},{"./constants":3,"./evented":5}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GFX = function () {
  function GFX(canvas) {
    _classCallCheck(this, GFX);

    this.cnv = canvas;
    this.ctx = canvas.getContext('2d');

    var dpr = window.devicePixelRatio || 1;
    var bspr = this.ctx.webkitBackingStorePixelRatio || this.ctx.mozBackingStorePixelRatio || this.ctx.msBackingStorePixelRatio || this.ctx.oBackingStorePixelRatio || this.ctx.backingStorePixelRatio || 1;
    this.ratio = dpr / bspr;
    this.set_size();
  }

  _createClass(GFX, [{
    key: "set_size",
    value: function set_size() {
      this.cnv.width = window.innerWidth * this.ratio;
      this.cnv.height = window.innerHeight * this.ratio;
    }
  }, {
    key: "scale",
    value: function scale() {
      this.ctx.scale(this.ratio, this.ratio);
    }
  }, {
    key: "width",
    get: function get() {
      return this.cnv.width;
    }
  }, {
    key: "height",
    get: function get() {
      return this.cnv.height;
    }
  }]);

  return GFX;
}();

exports.default = GFX;

},{"./constants":3}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _evented = require("./evented");

var _evented2 = _interopRequireDefault(_evented);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Gnode = function (_Evented) {
  _inherits(Gnode, _Evented);

  function Gnode() {
    _classCallCheck(this, Gnode);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Gnode).call(this));

    _this.children = [];
    return _this;
  }

  _createClass(Gnode, [{
    key: "add_child",
    value: function add_child(child) {
      if (this.children.indexOf(child) < 0) this.children.push(child);
    }
  }, {
    key: "remove_child",
    value: function remove_child(child) {
      var index = -1;
      if ((index = this.children.indexOf(child)) >= 0) {
        this.children.splice(index, 1);
      }
    }
  }, {
    key: "for_each",
    value: function for_each(fn) {
      this.children.forEach(function (child) {
        for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }

        fn.call.apply(fn, [this, child].concat(rest));
        child.for_each(fn);
      });
    }
  }, {
    key: "on_update",
    value: function on_update(app) {}
  }, {
    key: "on_fixed_update",
    value: function on_fixed_update(app) {}
  }]);

  return Gnode;
}(_evented2.default);

exports.default = Gnode;

},{"./constants":3,"./evented":5}],9:[function(require,module,exports){
"use strict";

require("canvas-5-polyfill");

var _app = require("./app");

var _app2 = _interopRequireDefault(_app);

var _ship = require("./ship");

var _ship2 = _interopRequireDefault(_ship);

var _enemy = require("./enemy");

var _enemy2 = _interopRequireDefault(_enemy);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

var _segment = require("./segment");

var _segment2 = _interopRequireDefault(_segment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var app = new _app2.default();

app.scene.add_child(new _ship2.default());

var enemy_1 = new _enemy2.default();
enemy_1.position.x = app.gfx.width / 2;
enemy_1.position.y = 25 * app.gfx.ratio;
app.scene.add_child(enemy_1);

/** FOR CONSOLE **/

window.Vec2 = _vec2.default;

window.Segment = _segment2.default;

},{"./app":2,"./enemy":4,"./segment":14,"./ship":15,"./vec2":18,"canvas-5-polyfill":1}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _evented = require("./evented");

var _evented2 = _interopRequireDefault(_evented);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pointer = function (_Evented) {
  _inherits(Pointer, _Evented);

  function Pointer() {
    _classCallCheck(this, Pointer);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Pointer).call(this));

    _this._position = new _vec2.default();
    _this.down_0 = false;
    _this.down_1 = false;

    _this.touch_0 = null;
    _this.touch_1 = null;

    var dpr = window.devicePixelRatio || 1;
    /*let bspr = this.ctx.webkitBackingStorePixelRatio ||
               this.ctx.mozBackingStorePixelRatio ||
               this.ctx.msBackingStorePixelRatio ||
               this.ctx.oBackingStorePixelRatio ||
               this.ctx.backingStorePixelRatio || 1;*/
    _this.ratio = dpr;
    return _this;
  }

  _createClass(Pointer, [{
    key: "register_events",
    value: function register_events() {
      var _this2 = this;

      window.addEventListener('mousedown', function (ev) {
        if (ev.button == 0) {
          _this2.down_0 = true;
          _this2.dispatch('down', 0);
        } else if (ev.button == 1 || ev.button == 2) {
          _this2.down_1 = true;
          _this2.dispatch('down', 1);
        }
        _this2._position.x = ev.pageX;
        _this2._position.y = ev.pageY;
      });

      window.addEventListener('mouseup', function (ev) {
        if (ev.button == 0) {
          _this2.down_0 = false;
          _this2.dispatch('up', 0);
        } else if (ev.button == 1 || ev.button == 2) {
          _this2.down_1 = false;
          _this2.dispatch('up', 1);
        }
      });

      window.addEventListener('mousemove', function (ev) {
        _this2._position.x = ev.pageX;
        _this2._position.y = ev.pageY;
        _this2.dispatch('move');
      });

      window.addEventListener('touchstart', function (ev) {
        _this2.touch_0 = ev.touches[0];
        _this2.touch_1 = ev.touches[1];

        var touches = ev.changedTouches;

        for (var i = 0, ii = touches.length; i < ii; i++) {
          if (touches[i].identifier == (_this2.touch_0 || {}).identifier) {
            _this2.down_0 = true;
            _this2.dispatch('down', 0);
          } else if (touches[i].identifier == (_this2.touch_1 || {}).identifier) {
            _this2.down_1 = true;
            _this2.dispatch('down', 1);
          }
        }
        _this2._position.x = _this2.touch_0.pageX;
        _this2._position.y = _this2.touch_0.pageY;
      });

      window.addEventListener('touchend', function (ev) {
        var touches = ev.changedTouches;
        for (var i = 0, ii = touches.length; i < ii; i++) {
          if (touches[i].identifier == (_this2.touch_0 || {}).identifier) {
            _this2.touch_0 = touches[i];
            _this2.down_0 = false;
            _this2.dispatch('up', 0);
          } else if (touches[i].identifier == (_this2.touch_1 || {}).identifier) {
            _this2.touch_1 = touches[i];
            _this2.down_1 = false;
            _this2.dispatch('up', 1);
          }
        }
      });

      window.addEventListener('touchmove', function (ev) {
        ev.preventDefault();
        var touches = ev.changedTouches;
        for (var i = 0, ii = touches.length; i < ii; i++) {
          if (touches[i].identifier == (_this2.touch_0 || {}).identifier) {
            _this2.touch_0 = touches[i];
            _this2._position.x = _this2.touch_0.pageX;
            _this2._position.y = _this2.touch_0.pageY;
            _this2.dispatch('move');
          } else if (touches[i].identifier == (_this2.touch_1 || {}).identifer) {
            _this2.touch_1 = touches[i];
          }
        }
      });
    }
  }, {
    key: "position",
    get: function get() {
      return new _vec2.default(this._position.x * this.ratio, this._position.y * this.ratio);
    }
  }]);

  return Pointer;
}(_evented2.default);

exports.default = Pointer;

},{"./constants":3,"./evented":5,"./vec2":18}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _renderable = require("./renderable");

var _renderable2 = _interopRequireDefault(_renderable);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

var _segment = require("./segment");

var _segment2 = _interopRequireDefault(_segment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Poly = function (_Renderable) {
  _inherits(Poly, _Renderable);

  function Poly() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Poly);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Poly).call(this));

    _this.points = opts.points || [];
    _this.position = opts.position || new _vec2.default();
    _this.rotation = opts.rotation || 0;
    _this.scale = opts.scale || 1;
    // TODO: Update to include backing store size
    _this.hidpi_scale = window.devicePixelRatio || 1;

    _this.fill_style = opts.fill_style || null;
    _this.stroke_style = opts.stroke_style || null;
    _this.line_width = opts.line_width || null;

    _this.path = new Path2D();
    _this.update_path();
    return _this;
  }

  _createClass(Poly, [{
    key: "update_path",
    value: function update_path() {
      var _this2 = this;

      if (this.points.length) {
        var last_point = this.points[this.points.length - 1];
        this.path.moveTo(last_point.x, last_point.y);
        this.points.forEach(function (point) {
          _this2.path.lineTo(point.x, point.y);
        });
        this.path.closePath();
      }
    }
  }, {
    key: "intersect",
    value: function intersect(b) {
      return this.constructor.intersect(this, b);
    }
  }, {
    key: "render",
    value: function render(app) {
      var gfx = app.gfx;
      var ctx = gfx.ctx;

      ctx.strokeStyle = this.stroke_style;
      ctx.lineWidth = this.line_width / gfx.ratio;
      ctx.fillStyle = this.fill_style;
      ctx.save();
      ctx.translate(this.position.x, this.position.y);
      ctx.rotate(this.rotation);
      ctx.scale(this.scale * this.hidpi_scale, this.scale * this.hidpi_scale);
      if (this.stroke_style) ctx.stroke(this.path);
      if (this.fill_style) ctx.fill(this.path);
      ctx.restore();

      /*this.points.forEach(point => {
        let t = point.transform(this);
        ctx.strokeStyle = '#f00';
        ctx.beginPath();
        ctx.arc(t.x, t.y, 2, 0, Math.PI*2);
        ctx.closePath();
        ctx.stroke();
      });*/
    }
  }, {
    key: "segments",
    get: function get() {
      var segments = [];
      var last_point = this.points[this.points.length - 1];
      this.points.forEach(function (point) {
        segments.push(new _segment2.default(last_point, point));
        last_point = point;
      });
      return segments;
    }
  }], [{
    key: "intersect",
    value: function intersect(a, b) {
      var a_segs = a.segments;
      var b_segs = b.segments;
      var ips = [];
      a_segs.forEach(function (a_seg) {
        b_segs.forEach(function (b_seg) {
          var ip = _segment2.default.intersect_seg_seg(a_seg.transform(a), b_seg.transform(b));
          if (ip) ips.push(ip);
        });
      });
      return ips;
    }
  }]);

  return Poly;
}(_renderable2.default);

exports.default = Poly;

},{"./constants":3,"./renderable":12,"./segment":14,"./vec2":18}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _gnode = require("./gnode");

var _gnode2 = _interopRequireDefault(_gnode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Renderable = function (_Gnode) {
  _inherits(Renderable, _Gnode);

  function Renderable() {
    _classCallCheck(this, Renderable);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Renderable).call(this));
  }

  _createClass(Renderable, [{
    key: "render",
    value: function render() {}
  }]);

  return Renderable;
}(_gnode2.default);

exports.default = Renderable;

},{"./constants":3,"./gnode":8}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _poly = require("./poly");

var _poly2 = _interopRequireDefault(_poly);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RigidBody = function (_Poly) {
  _inherits(RigidBody, _Poly);

  function RigidBody() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, RigidBody);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(RigidBody).call(this, opts));

    _this.velocity = opts.velocity || new _vec2.default();
    _this.angular_velocity = opts.angular_velocity || 0;
    _this.mass = opts.mass === undefined ? 1 : opts.mass;
    _this.friction = opts.friction === undefined ? 1 : opts.friction;
    _this.restitution = opts.restitution || 0;
    return _this;
  }

  // Returns Vec2 with penetration


  _createClass(RigidBody, null, [{
    key: "penetrate",
    value: function penetrate(a, b) {}
  }]);

  return RigidBody;
}(_poly2.default);

exports.default = RigidBody;

},{"./constants":3,"./poly":11,"./vec2":18}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Segment = function () {
  function Segment() {
    var a = arguments.length <= 0 || arguments[0] === undefined ? new _vec2.default() : arguments[0];
    var b = arguments.length <= 1 || arguments[1] === undefined ? new _vec2.default() : arguments[1];

    _classCallCheck(this, Segment);

    this.a = a;
    this.b = b;
  }

  _createClass(Segment, [{
    key: "direction",
    value: function direction() {
      return this.constructor.direction(this);
    }
  }, {
    key: "is_point_on_line",
    value: function is_point_on_line(v) {
      return this.constructor.is_point_on_line(this, v);
    }
  }, {
    key: "is_point_on_segment",
    value: function is_point_on_segment(v) {
      return this.constructor.is_point_on_segment(this, v);
    }
  }, {
    key: "intersect_line_line",
    value: function intersect_line_line(b) {
      return this.constructor.intersect_line_line(this, b);
    }
  }, {
    key: "intersect_seg_seg",
    value: function intersect_seg_seg(b) {
      return this.constructor.intersect_seg_seg(this, b);
    }
  }, {
    key: "transform",
    value: function transform(t) {
      return this.constructor.transform(this, t);
    }
  }], [{
    key: "direction",
    value: function direction(s) {
      return s.b.subtract(s.a).normalize();
    }
  }, {
    key: "is_point_on_line",
    value: function is_point_on_line(s, v) {
      var direction = s.direction();
      if (direction.x == 0) return v.x == s.a.x;
      if (direction.y == 0) return v.y == s.a.y;

      var Ox = s.a.x;
      var Oy = s.a.y;
      var Dx = direction.x;
      var Dy = direction.y;

      var m = Dy / Dx;
      var b = Oy - (Ox - Dy) / Dx;
      var ly = m * v.x + b;
      return v.y - ly <= C.EPSILON;
    }
  }, {
    key: "is_point_on_segment",
    value: function is_point_on_segment(s, v) {
      return this.is_point_on_line(s, v) && (s.a.x <= v.x && v.x <= s.b.x || s.a.x >= v.x && v.x >= s.b.x) && (s.a.y <= v.y && v.y <= s.b.y || s.a.y >= v.y && v.y >= s.b.y);
    }
  }, {
    key: "intersect_line_line",
    value: function intersect_line_line(a, b) {
      var AOx = a.a.x;
      var AOy = a.a.y;
      var Ad = a.direction();
      var ADx = Ad.x;
      var ADy = Ad.y;

      var BOx = b.a.x;
      var BOy = b.a.y;
      var Bd = b.direction();
      var BDx = Bd.x;
      var BDy = Bd.y;

      // Parallel
      if (ADx - BDx <= C.EPSILON && ADy - BDy <= C.EPSILON) return null;

      var Am = ADy / ADx;
      var Ab = AOy - AOx * ADy / ADx;
      var Bm = BDy / BDx;
      var Bb = BOy - BOx * BDy / BDx;
      var m = null;
      var x = null;
      var y = null;

      if (ADx == 0) x = AOx;else if (BDx == 0) x = BOx;else x = (Bb - Ab) / (Am - Bm);

      if (ADy == 0) y = AOy;else if (BDy == 0) y = BOy;else y = Am * x + Ab || Bm * x + Bb;

      return new _vec2.default(x, y);
    }
  }, {
    key: "intersect_seg_seg",
    value: function intersect_seg_seg(a, b) {
      var ip = this.intersect_line_line(a, b);
      if (ip && this.is_point_on_segment(a, ip) && this.is_point_on_segment(b, ip)) {
        return ip;
      }
      return null;
    }
  }, {
    key: "transform",
    value: function transform(s, t) {
      return new s.constructor(s.a.transform(t), s.b.transform(t));
    }
  }]);

  return Segment;
}();

exports.default = Segment;

},{"./constants":3,"./vec2":18}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

var _shot = require("./shot");

var _shot2 = _interopRequireDefault(_shot);

var _rigidBody = require("./rigid-body");

var _rigidBody2 = _interopRequireDefault(_rigidBody);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Ship = function (_RigidBody) {
  _inherits(Ship, _RigidBody);

  function Ship() {
    _classCallCheck(this, Ship);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Ship).call(this));

    _this.line_width = 2;
    _this.stroke_style = "hsl(225, 100%, 75%)";
    // M-16 36 L0 28 L16 36 L0 0 Z
    _this.points = [new _vec2.default(-16, 36), new _vec2.default(0, 28), new _vec2.default(16, 36), new _vec2.default(0, 0)];
    _this.update_path();

    _this.shot_interval = C.SHIP_SHOT_INTERVAL;
    _this.shot_clock = 0;
    return _this;
  }

  _createClass(Ship, [{
    key: "on_update",
    value: function on_update(app) {
      this.position.x = app.pointer.position.x;
      this.position.y = app.gfx.height - 75 * app.gfx.ratio;
    }
  }, {
    key: "on_fixed_update",
    value: function on_fixed_update(app, dt) {
      if (app.pointer.down_0) {
        if (this.shot_clock == 0 || this.shot_clock >= this.shot_interval) {
          this.shot_clock -= this.shot_interval;
          if (this.shot_clock < 0) this.shot_clock = 0;

          var shot = new _shot2.default({
            position: this.position.clone(),
            velocity: new _vec2.default(0, C.SHIP_SHOT_SPEED),
            fill_style: 'hsl(225, 100%, 75%)'
          });
          app.scene.add_child(shot);

          this.shot_clock += dt;
        } else {
          this.shot_clock += dt;
        }
      } else {
        this.shot_clock = 0;
      }
    }
  }]);

  return Ship;
}(_rigidBody2.default);

exports.default = Ship;

},{"./constants":3,"./rigid-body":13,"./shot":16,"./vec2":18}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

var _rigidBody = require("./rigid-body");

var _rigidBody2 = _interopRequireDefault(_rigidBody);

var _vec = require("./vec2");

var _vec2 = _interopRequireDefault(_vec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Shot = function (_RigidBody) {
  _inherits(Shot, _RigidBody);

  function Shot() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Shot);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Shot).call(this, opts));

    var interior_angle = Math.PI / 4;
    var master_point = new _vec2.default(Math.cos(Math.PI / 8) * 8, Math.sin(Math.PI / 8) * 8);
    for (var i = 0, ii = 8; i < ii; i++) {
      _this.points.push(master_point.clone());
      var x = master_point.x * Math.cos(interior_angle) - master_point.y * Math.sin(interior_angle);
      var y = master_point.x * Math.sin(interior_angle) + master_point.y * Math.cos(interior_angle);
      master_point.x = x;
      master_point.y = y;
    }

    _this.update_path();
    return _this;
  }

  _createClass(Shot, [{
    key: "on_update",
    value: function on_update(app) {
      var gfx = app.gfx;
      if (this.position.x + C.SHOT_GRACE_ZONE < 0 || this.position.x - C.SHOT_GRACE_ZONE > gfx.width || this.position.y + C.SHOT_GRACE_ZONE < 0 || this.position.y - C.SHOT_GRACE_ZONE > gfx.height) app.scene.remove_child(this);
    }
  }, {
    key: "on_fixed_update",
    value: function on_fixed_update(app, dt) {
      this.position.x += this.velocity.x * dt * app.gfx.ratio;
      this.position.y += this.velocity.y * dt * app.gfx.ratio;
    }
  }]);

  return Shot;
}(_rigidBody2.default);

exports.default = Shot;

},{"./constants":3,"./rigid-body":13,"./vec2":18}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Timer = function () {
  function Timer() {
    _classCallCheck(this, Timer);

    this._time = 0;
    this.dt = 0;
    this.accumulator = 0;
  }

  _createClass(Timer, [{
    key: "init",
    value: function init() {
      var _this = this;

      requestAnimationFrame(function (time) {
        _this._time = time;
      });
    }
  }, {
    key: "time",
    get: function get() {
      return this._time;
    },
    set: function set(val) {
      this.dt = val - this._time;
      this.accumulator += this.dt;
      this._time = val;
    }
  }]);

  return Timer;
}();

exports.default = Timer;

},{"./constants":3}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require("./constants");

var C = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Vec2 = function () {
  function Vec2(x, y) {
    _classCallCheck(this, Vec2);

    this.data = [x || 0, y || 0];
  }

  _createClass(Vec2, [{
    key: "clone",
    value: function clone() {
      return new Vec2(this.x, this.y);
    }
  }, {
    key: "perp",
    value: function perp() {
      return this.constructor.perp(this);
    }
  }, {
    key: "dot",
    value: function dot(b) {
      return this.constructor.dot(this, b);
    }
  }, {
    key: "cross",
    value: function cross(b) {
      return this.constructor.cross(this, b);
    }
  }, {
    key: "lenSq",
    value: function lenSq() {
      return this.constructor.lenSq(this);
    }
  }, {
    key: "len",
    value: function len() {
      return this.constructor.len(this);
    }
  }, {
    key: "distSq",
    value: function distSq(b) {
      return this.constructor.distSq(this, b);
    }
  }, {
    key: "dist",
    value: function dist(b) {
      return this.constructor.dist(this, b);
    }
  }, {
    key: "normalize",
    value: function normalize() {
      return this.constructor.normalize(this);
    }
  }, {
    key: "invert",
    value: function invert() {
      return this.constructor.invert(this);
    }
  }, {
    key: "negate",
    value: function negate() {
      return this.constructor.negate(this);
    }
  }, {
    key: "multiply",
    value: function multiply(b) {
      return this.constructor.multiply(this, b);
    }
  }, {
    key: "scale",
    value: function scale(s) {
      return this.constructor.scale(this, s);
    }
  }, {
    key: "add",
    value: function add(b) {
      return this.constructor.add(this, b);
    }
  }, {
    key: "add_scalar",
    value: function add_scalar(s) {
      return this.constructor.add_scalar(this, s);
    }
  }, {
    key: "subtract",
    value: function subtract(b) {
      return this.constructor.subtract(this, b);
    }
  }, {
    key: "rotate",
    value: function rotate(r) {
      return this.constructor.rotate(this, r);
    }
  }, {
    key: "transform",
    value: function transform(t) {
      return this.constructor.transform(this, t);
    }
  }, {
    key: "x",
    get: function get() {
      return this.data[0];
    },
    set: function set(val) {
      this.data[0] = val;
    }
  }, {
    key: "y",
    get: function get() {
      return this.data[1];
    },
    set: function set(val) {
      this.data[1] = val;
    }
  }], [{
    key: "perp",
    value: function perp(v) {
      return new Vec2(-v.y, v.x);
    }
  }, {
    key: "dot",
    value: function dot(a, b) {
      return a.x * b.x + a.y * b.y;
    }
  }, {
    key: "cross",
    value: function cross(a, b) {
      return a.x * b.y - a.y - b.x;
    }
  }, {
    key: "lenSq",
    value: function lenSq(v) {
      return v.x * v.x + v.y * v.y;
    }
  }, {
    key: "len",
    value: function len(v) {
      return Math.sqrt(this.lenSq(v));
    }
  }, {
    key: "distSq",
    value: function distSq(a, b) {
      var x = b.x - a.x;
      var y = b.y - a.y;
      return x * x + y * y;
    }
  }, {
    key: "dist",
    value: function dist(a, b) {
      return Math.sqrt(this.distSq(a, b));
    }
  }, {
    key: "normalize",
    value: function normalize(v) {
      var len = this.len(v);
      return new Vec2(v.x / len, v.y / len);
    }
  }, {
    key: "invert",
    value: function invert(v) {
      return new Vec2(1 / v.x, 1 / v.y);
    }
  }, {
    key: "negate",
    value: function negate(v) {
      return new Vec2(-v.x, -v.y);
    }
  }, {
    key: "multiply",
    value: function multiply(a, b) {
      return new Vec2(a.x * b.x, a.y * b.y);
    }
  }, {
    key: "scale",
    value: function scale(v, s) {
      return this.multiply(v, new Vec2(s, s));
    }
  }, {
    key: "divide",
    value: function divide(a, b) {
      return this.multiply(a, this.invert(b));
    }
  }, {
    key: "add",
    value: function add(a, b) {
      return new Vec2(a.x + b.x, a.y + b.y);
    }
  }, {
    key: "add_scalar",
    value: function add_scalar(v, s) {
      return this.add(v, new Vec2(s, s));
    }
  }, {
    key: "subtract",
    value: function subtract(a, b) {
      return new Vec2(a.x - b.x, a.y - b.y);
    }
  }, {
    key: "rotate",
    value: function rotate(v, r) {
      var s = Math.sin(r);
      var c = Math.cos(r);
      return new Vec2(v.x * c - v.y * s, v.x * s + v.y * c);
    }
  }, {
    key: "transform",
    value: function transform(v, t) {
      return v.scale(t.scale * (t.hidpi_scale || 1)).rotate(t.rotation).add(t.position);
    }
  }]);

  return Vec2;
}();

exports.default = Vec2;

},{"./constants":3}]},{},[9])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvY2FudmFzLTUtcG9seWZpbGwvY2FudmFzLmpzIiwic3JjL2pzL2FwcC5qcyIsInNyYy9qcy9jb25zdGFudHMuanMiLCJzcmMvanMvZW5lbXkuanMiLCJzcmMvanMvZXZlbnRlZC5qcyIsInNyYy9qcy9mcHMuanMiLCJzcmMvanMvZ2Z4LmpzIiwic3JjL2pzL2dub2RlLmpzIiwic3JjL2pzL2luZGV4LmpzIiwic3JjL2pzL3BvaW50ZXIuanMiLCJzcmMvanMvcG9seS5qcyIsInNyYy9qcy9yZW5kZXJhYmxlLmpzIiwic3JjL2pzL3JpZ2lkLWJvZHkuanMiLCJzcmMvanMvc2VnbWVudC5qcyIsInNyYy9qcy9zaGlwLmpzIiwic3JjL2pzL3Nob3QuanMiLCJzcmMvanMvdGltZXIuanMiLCJzcmMvanMvdmVjMi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUMvckVBOztJQUFZOztB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QkFLQyxHQUFHLEdBQUc7QUFDdEIsYUFBTyxLQUFLLEdBQUwsQ0FBUyxDQUFULEVBQVksSUFBSSxJQUFKLENBQVMsQ0FBVCxFQUFZLENBQVosQ0FBWixDQUFQLENBRHNCOzs7OzZCQUtSLEdBQUcsR0FBRztBQUNwQixhQUFPLElBQUksSUFBSixDQUFTLEVBQUUsQ0FBRixHQUFNLEVBQUUsQ0FBRixFQUFLLEVBQUUsQ0FBRixHQUFNLEVBQUUsQ0FBRixDQUFqQyxDQURvQjs7OzsyQkFLUixHQUFHLEdBQUc7QUFDbEIsVUFBSSxJQUFJLEtBQUssR0FBTCxDQUFTLENBQVQsQ0FBSixDQURjO0FBRWxCLFVBQUksSUFBSSxLQUFLLEdBQUwsQ0FBUyxDQUFULENBQUosQ0FGYztBQUdsQixhQUFPLElBQUksSUFBSixDQUFVLEVBQUUsQ0FBRixHQUFNLENBQU4sR0FBVSxFQUFFLENBQUYsR0FBTSxDQUFOLEVBQVMsRUFBRSxDQUFGLEdBQU0sQ0FBTixHQUFVLEVBQUUsQ0FBRixHQUFNLENBQU4sQ0FBOUMsQ0FIa0I7Ozs7OEJBT0gsR0FBRyxHQUFHO0FBQ3JCLGFBQU8sRUFBRSxLQUFGLENBQVMsRUFBRSxLQUFGLElBQVcsRUFBRSxXQUFGLElBQWlCLENBQWpCLENBQVgsQ0FBVCxDQUEwQyxNQUExQyxDQUFpRCxFQUFFLFFBQUYsQ0FBakQsQ0FBNkQsR0FBN0QsQ0FBaUUsRUFBRSxRQUFGLENBQXhFLENBRHFCOzs7O1NBeEdKIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZVxuICogbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgRGVzY3JpcHRpb24gb2YgdGhpcyBmaWxlLlxuICpcbiAqIEEgcG9seWZpbGwgZm9yIEhUTUwgQ2FudmFzIGZlYXR1cmVzLCBpbmNsdWRpbmdcbiAqIFBhdGgyRCBzdXBwb3J0LlxuICovXG5pZiAoQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELnByb3RvdHlwZS5lbGxpcHNlID09IHVuZGVmaW5lZCkge1xuICBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlLmVsbGlwc2UgPSBmdW5jdGlvbih4LCB5LCByYWRpdXNYLCByYWRpdXNZLCByb3RhdGlvbiwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGlDbG9ja3dpc2UpIHtcbiAgICB0aGlzLnNhdmUoKTtcbiAgICB0aGlzLnRyYW5zbGF0ZSh4LCB5KTtcbiAgICB0aGlzLnJvdGF0ZShyb3RhdGlvbik7XG4gICAgdGhpcy5zY2FsZShyYWRpdXNYLCByYWRpdXNZKTtcbiAgICB0aGlzLmFyYygwLCAwLCAxLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aUNsb2Nrd2lzZSk7XG4gICAgdGhpcy5yZXN0b3JlKCk7XG4gIH1cbn1cblxuaWYgKHR5cGVvZiBQYXRoMkQgIT09ICdmdW5jdGlvbicpIHtcbiAgKGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gSW5jbHVkZSB0aGUgU1ZHIHBhdGggcGFyc2VyLlxuICAgIHBhcnNlciA9IChmdW5jdGlvbigpIHtcbiAgICAgIC8qXG4gICAgICAgKiBHZW5lcmF0ZWQgYnkgUEVHLmpzIDAuOC4wLlxuICAgICAgICpcbiAgICAgICAqIGh0dHA6Ly9wZWdqcy5tYWpkYS5jei9cbiAgICAgICAqL1xuICAgIFxuICAgICAgZnVuY3Rpb24gcGVnJHN1YmNsYXNzKGNoaWxkLCBwYXJlbnQpIHtcbiAgICAgICAgZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9XG4gICAgICAgIGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTtcbiAgICAgICAgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTtcbiAgICAgIH1cbiAgICBcbiAgICAgIGZ1bmN0aW9uIFN5bnRheEVycm9yKG1lc3NhZ2UsIGV4cGVjdGVkLCBmb3VuZCwgb2Zmc2V0LCBsaW5lLCBjb2x1bW4pIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlICA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMuZXhwZWN0ZWQgPSBleHBlY3RlZDtcbiAgICAgICAgdGhpcy5mb3VuZCAgICA9IGZvdW5kO1xuICAgICAgICB0aGlzLm9mZnNldCAgID0gb2Zmc2V0O1xuICAgICAgICB0aGlzLmxpbmUgICAgID0gbGluZTtcbiAgICAgICAgdGhpcy5jb2x1bW4gICA9IGNvbHVtbjtcbiAgICBcbiAgICAgICAgdGhpcy5uYW1lICAgICA9IFwiU3ludGF4RXJyb3JcIjtcbiAgICAgIH1cbiAgICBcbiAgICAgIHBlZyRzdWJjbGFzcyhTeW50YXhFcnJvciwgRXJyb3IpO1xuICAgIFxuICAgICAgZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgIFxuICAgICAgICAgICAgcGVnJEZBSUxFRCA9IHt9LFxuICAgIFxuICAgICAgICAgICAgcGVnJHN0YXJ0UnVsZUZ1bmN0aW9ucyA9IHsgc3ZnX3BhdGg6IHBlZyRwYXJzZXN2Z19wYXRoIH0sXG4gICAgICAgICAgICBwZWckc3RhcnRSdWxlRnVuY3Rpb24gID0gcGVnJHBhcnNlc3ZnX3BhdGgsXG4gICAgXG4gICAgICAgICAgICBwZWckYzAgPSBwZWckRkFJTEVELFxuICAgICAgICAgICAgcGVnJGMxID0gW10sXG4gICAgICAgICAgICBwZWckYzIgPSBudWxsLFxuICAgICAgICAgICAgcGVnJGMzID0gZnVuY3Rpb24oZCkgeyByZXR1cm4gb3BzOyB9LFxuICAgICAgICAgICAgcGVnJGM0ID0gL15bTW1dLyxcbiAgICAgICAgICAgIHBlZyRjNSA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbTW1dXCIsIGRlc2NyaXB0aW9uOiBcIltNbV1cIiB9LFxuICAgICAgICAgICAgcGVnJGM2ID0gZnVuY3Rpb24oY2gsIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBtb3ZlQ2ggPSBjaFxuICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgbW92ZSBjbWQgdGhlbiBmb3JjZSBpdCB0byBiZSBhYnNvbHV0ZS5cbiAgICAgICAgICAgICAgICAgIGlmIChmaXJzdFN1YlBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbW92ZUNoID0gJ00nO1xuICAgICAgICAgICAgICAgICAgICBmaXJzdFN1YlBhdGggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIG9wcy5wdXNoKHt0eXBlOiAnbW92ZVRvJywgYXJnczogbWFrZUFic29sdXRlKG1vdmVDaCwgYXJnc1swXSl9KTtcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGxpbmVUbyBhcmdzIGFyZSBlaXRoZXIgYWJzIG9yIHJlbGF0aXZlLCBkZXBlbmRpbmcgb24gdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIG9yaWdpbmFsIG1vdmV0byBjb21tYW5kLlxuICAgICAgICAgICAgICAgICAgICBvcHMucHVzaCh7dHlwZTogJ2xpbmVUbycsIGFyZ3M6IG1ha2VBYnNvbHV0ZShjaCwgYXJnc1tpXSl9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGVnJGM3ID0gZnVuY3Rpb24ob25lLCByZXN0KSB7IHJldHVybiBjb25jYXRTZXF1ZW5jZShvbmUsIHJlc3QpOyB9LFxuICAgICAgICAgICAgcGVnJGM4ID0gL15bWnpdLyxcbiAgICAgICAgICAgIHBlZyRjOSA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbWnpdXCIsIGRlc2NyaXB0aW9uOiBcIltael1cIiB9LFxuICAgICAgICAgICAgcGVnJGMxMCA9IGZ1bmN0aW9uKCkgeyBvcHMucHVzaCh7dHlwZTogJ2Nsb3NlUGF0aCcsIGFyZ3M6IFtdfSk7IH0sXG4gICAgICAgICAgICBwZWckYzExID0gL15bTGxdLyxcbiAgICAgICAgICAgIHBlZyRjMTIgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW0xsXVwiLCBkZXNjcmlwdGlvbjogXCJbTGxdXCIgfSxcbiAgICAgICAgICAgIHBlZyRjMTMgPSBmdW5jdGlvbihjaCwgYXJncykge1xuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBvcHMucHVzaCh7dHlwZTogJ2xpbmVUbycsIGFyZ3M6IG1ha2VBYnNvbHV0ZShjaCwgYXJnc1tpXSl9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGVnJGMxNCA9IC9eW0hoXS8sXG4gICAgICAgICAgICBwZWckYzE1ID0geyB0eXBlOiBcImNsYXNzXCIsIHZhbHVlOiBcIltIaF1cIiwgZGVzY3JpcHRpb246IFwiW0hoXVwiIH0sXG4gICAgICAgICAgICBwZWckYzE2ID0gZnVuY3Rpb24oY2gsIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBvcHMucHVzaCh7dHlwZTogJ2xpbmVUbycsIGFyZ3M6IG1ha2VBYnNvbHV0ZUZyb21YKGNoLCBhcmdzW2ldKX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBlZyRjMTcgPSAvXltWdl0vLFxuICAgICAgICAgICAgcGVnJGMxOCA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbVnZdXCIsIGRlc2NyaXB0aW9uOiBcIltWdl1cIiB9LFxuICAgICAgICAgICAgcGVnJGMxOSA9IGZ1bmN0aW9uKGNoLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgb3BzLnB1c2goe3R5cGU6ICdsaW5lVG8nLCBhcmdzOiBtYWtlQWJzb2x1dGVGcm9tWShjaCwgYXJnc1tpXSl9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwZWckYzIwID0gL15bQ2NdLyxcbiAgICAgICAgICAgIHBlZyRjMjEgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW0NjXVwiLCBkZXNjcmlwdGlvbjogXCJbQ2NdXCIgfSxcbiAgICAgICAgICAgIHBlZyRjMjIgPSBmdW5jdGlvbihjaCwgYXJncykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIG9wcy5wdXNoKHt0eXBlOiAnYmV6aWVyQ3VydmVUbycsIGFyZ3M6IG1ha2VBYnNvbHV0ZU11bHRpcGxlKGNoLCBhcmdzW2ldKX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBlZyRjMjMgPSBmdW5jdGlvbihjcDEsIGNwMiwgbGFzdCkgeyByZXR1cm4gY3AxLmNvbmNhdChjcDIsIGxhc3QpOyB9LFxuICAgICAgICAgICAgcGVnJGMyNCA9IC9eW1NzXS8sXG4gICAgICAgICAgICBwZWckYzI1ID0geyB0eXBlOiBcImNsYXNzXCIsIHZhbHVlOiBcIltTc11cIiwgZGVzY3JpcHRpb246IFwiW1NzXVwiIH0sXG4gICAgICAgICAgICBwZWckYzI2ID0gZnVuY3Rpb24oY2gsIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBvcHMucHVzaCh7dHlwZTogJ2JlemllckN1cnZlVG8nLCBhcmdzOiBtYWtlUmVmbGVjdGVkKCkuY29uY2F0KG1ha2VBYnNvbHV0ZU11bHRpcGxlKGNoLCBhcmdzW2ldKSl9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwZWckYzI3ID0gZnVuY3Rpb24oY3AxLCBsYXN0KSB7IHJldHVybiBjcDEuY29uY2F0KGxhc3QpOyB9LFxuICAgICAgICAgICAgcGVnJGMyOCA9IC9eW1FxXS8sXG4gICAgICAgICAgICBwZWckYzI5ID0geyB0eXBlOiBcImNsYXNzXCIsIHZhbHVlOiBcIltRcV1cIiwgZGVzY3JpcHRpb246IFwiW1FxXVwiIH0sXG4gICAgICAgICAgICBwZWckYzMwID0gZnVuY3Rpb24oY2gsIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBvcHMucHVzaCh7dHlwZTogJ3F1YWRyYXRpY0N1cnZlVG8nLCBhcmdzOiBtYWtlQWJzb2x1dGVNdWx0aXBsZShjaCwgYXJnc1tpXSl9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwZWckYzMxID0gL15bVHRdLyxcbiAgICAgICAgICAgIHBlZyRjMzIgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW1R0XVwiLCBkZXNjcmlwdGlvbjogXCJbVHRdXCIgfSxcbiAgICAgICAgICAgIHBlZyRjMzMgPSBmdW5jdGlvbihjaCwgYXJncykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZWZsZWN0ZWQgPSBtYWtlUmVmbGVjdGVkKCk7XG4gICAgICAgICAgICAgICAgICBvcHMucHVzaCh7dHlwZTogJ3F1YWRyYXRpY0N1cnZlVG8nLCBhcmdzOiByZWZsZWN0ZWQuY29uY2F0KG1ha2VBYnNvbHV0ZU11bHRpcGxlKGNoLCBhcmdzW2ldKSl9KTtcbiAgICAgICAgICAgICAgICAgIGxhc3RDb250cm9sID0gcmVmbGVjdGVkLnNsaWNlKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBlZyRjMzQgPSAvXltBYV0vLFxuICAgICAgICAgICAgcGVnJGMzNSA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbQWFdXCIsIGRlc2NyaXB0aW9uOiBcIltBYV1cIiB9LFxuICAgICAgICAgICAgcGVnJGMzNiA9IGZ1bmN0aW9uKGNoLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgdmFyIHgxID0gW2xhc3RDb29yZC5zbGljZSgpXTtcbiAgICAgICAgICAgICAgICAgIHZhciB4MiA9IFttYWtlQWJzb2x1dGUoY2gsIGFyZ3NbaV0uc2xpY2UoLTIpKV07XG4gICAgICAgICAgICAgICAgICBhYnNBcmdzID0geDEuY29uY2F0KGFyZ3NbaV0uc2xpY2UoMCwgLTIpLCB4Mik7XG4gICAgICAgICAgICAgICAgICBlbGxpcHNlRnJvbUVsbGlwdGljYWxBcmMuYXBwbHkodGhpcywgYWJzQXJncyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGVnJGMzNyA9IGZ1bmN0aW9uKHJ4LCByeSwgeHJvdCwgbGFyZ2UsIHN3ZWVwLCBsYXN0KSB7IHJldHVybiBbcGFyc2VGbG9hdChyeCksIHBhcnNlRmxvYXQocnkpLCBwYXJzZUZsb2F0KHhyb3Quam9pbignJykpLCBwYXJzZUludChsYXJnZSksIHBhcnNlSW50KHN3ZWVwKSwgbGFzdFswXSwgbGFzdFsxXV07IH0sXG4gICAgICAgICAgICBwZWckYzM4ID0gZnVuY3Rpb24oeCwgeSkgeyByZXR1cm4gW3gsIHldIH0sXG4gICAgICAgICAgICBwZWckYzM5ID0gZnVuY3Rpb24obnVtYmVyKSB7IHJldHVybiBwYXJzZUZsb2F0KG51bWJlci5qb2luKCcnKSkgfSxcbiAgICAgICAgICAgIHBlZyRjNDAgPSBcIjBcIixcbiAgICAgICAgICAgIHBlZyRjNDEgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIwXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIwXFxcIlwiIH0sXG4gICAgICAgICAgICBwZWckYzQyID0gXCIxXCIsXG4gICAgICAgICAgICBwZWckYzQzID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiMVwiLCBkZXNjcmlwdGlvbjogXCJcXFwiMVxcXCJcIiB9LFxuICAgICAgICAgICAgcGVnJGM0NCA9IFwiLFwiLFxuICAgICAgICAgICAgcGVnJGM0NSA9IHsgdHlwZTogXCJsaXRlcmFsXCIsIHZhbHVlOiBcIixcIiwgZGVzY3JpcHRpb246IFwiXFxcIixcXFwiXCIgfSxcbiAgICAgICAgICAgIHBlZyRjNDYgPSBcIi5cIixcbiAgICAgICAgICAgIHBlZyRjNDcgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIuXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIuXFxcIlwiIH0sXG4gICAgICAgICAgICBwZWckYzQ4ID0gL15bZUVdLyxcbiAgICAgICAgICAgIHBlZyRjNDkgPSB7IHR5cGU6IFwiY2xhc3NcIiwgdmFsdWU6IFwiW2VFXVwiLCBkZXNjcmlwdGlvbjogXCJbZUVdXCIgfSxcbiAgICAgICAgICAgIHBlZyRjNTAgPSBcIitcIixcbiAgICAgICAgICAgIHBlZyRjNTEgPSB7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZTogXCIrXCIsIGRlc2NyaXB0aW9uOiBcIlxcXCIrXFxcIlwiIH0sXG4gICAgICAgICAgICBwZWckYzUyID0gXCItXCIsXG4gICAgICAgICAgICBwZWckYzUzID0geyB0eXBlOiBcImxpdGVyYWxcIiwgdmFsdWU6IFwiLVwiLCBkZXNjcmlwdGlvbjogXCJcXFwiLVxcXCJcIiB9LFxuICAgICAgICAgICAgcGVnJGM1NCA9IC9eWzAtOV0vLFxuICAgICAgICAgICAgcGVnJGM1NSA9IHsgdHlwZTogXCJjbGFzc1wiLCB2YWx1ZTogXCJbMC05XVwiLCBkZXNjcmlwdGlvbjogXCJbMC05XVwiIH0sXG4gICAgICAgICAgICBwZWckYzU2ID0gZnVuY3Rpb24oZGlnaXRzKSB7IHJldHVybiBkaWdpdHMuam9pbignJykgfSxcbiAgICAgICAgICAgIHBlZyRjNTcgPSAvXlsgXFx0XFxuXFxyXS8sXG4gICAgICAgICAgICBwZWckYzU4ID0geyB0eXBlOiBcImNsYXNzXCIsIHZhbHVlOiBcIlsgXFxcXHRcXFxcblxcXFxyXVwiLCBkZXNjcmlwdGlvbjogXCJbIFxcXFx0XFxcXG5cXFxccl1cIiB9LFxuICAgIFxuICAgICAgICAgICAgcGVnJGN1cnJQb3MgICAgICAgICAgPSAwLFxuICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zICAgICAgPSAwLFxuICAgICAgICAgICAgcGVnJGNhY2hlZFBvcyAgICAgICAgPSAwLFxuICAgICAgICAgICAgcGVnJGNhY2hlZFBvc0RldGFpbHMgPSB7IGxpbmU6IDEsIGNvbHVtbjogMSwgc2VlbkNSOiBmYWxzZSB9LFxuICAgICAgICAgICAgcGVnJG1heEZhaWxQb3MgICAgICAgPSAwLFxuICAgICAgICAgICAgcGVnJG1heEZhaWxFeHBlY3RlZCAgPSBbXSxcbiAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscyAgICAgID0gMCxcbiAgICBcbiAgICAgICAgICAgIHBlZyRyZXN1bHQ7XG4gICAgXG4gICAgICAgIGlmIChcInN0YXJ0UnVsZVwiIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoIShvcHRpb25zLnN0YXJ0UnVsZSBpbiBwZWckc3RhcnRSdWxlRnVuY3Rpb25zKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3Qgc3RhcnQgcGFyc2luZyBmcm9tIHJ1bGUgXFxcIlwiICsgb3B0aW9ucy5zdGFydFJ1bGUgKyBcIlxcXCIuXCIpO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICBwZWckc3RhcnRSdWxlRnVuY3Rpb24gPSBwZWckc3RhcnRSdWxlRnVuY3Rpb25zW29wdGlvbnMuc3RhcnRSdWxlXTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiB0ZXh0KCkge1xuICAgICAgICAgIHJldHVybiBpbnB1dC5zdWJzdHJpbmcocGVnJHJlcG9ydGVkUG9zLCBwZWckY3VyclBvcyk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gb2Zmc2V0KCkge1xuICAgICAgICAgIHJldHVybiBwZWckcmVwb3J0ZWRQb3M7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gbGluZSgpIHtcbiAgICAgICAgICByZXR1cm4gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKHBlZyRyZXBvcnRlZFBvcykubGluZTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBjb2x1bW4oKSB7XG4gICAgICAgICAgcmV0dXJuIHBlZyRjb21wdXRlUG9zRGV0YWlscyhwZWckcmVwb3J0ZWRQb3MpLmNvbHVtbjtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBleHBlY3RlZChkZXNjcmlwdGlvbikge1xuICAgICAgICAgIHRocm93IHBlZyRidWlsZEV4Y2VwdGlvbihcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBbeyB0eXBlOiBcIm90aGVyXCIsIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiB9XSxcbiAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvc1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gZXJyb3IobWVzc2FnZSkge1xuICAgICAgICAgIHRocm93IHBlZyRidWlsZEV4Y2VwdGlvbihtZXNzYWdlLCBudWxsLCBwZWckcmVwb3J0ZWRQb3MpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHBlZyRjb21wdXRlUG9zRGV0YWlscyhwb3MpIHtcbiAgICAgICAgICBmdW5jdGlvbiBhZHZhbmNlKGRldGFpbHMsIHN0YXJ0UG9zLCBlbmRQb3MpIHtcbiAgICAgICAgICAgIHZhciBwLCBjaDtcbiAgICBcbiAgICAgICAgICAgIGZvciAocCA9IHN0YXJ0UG9zOyBwIDwgZW5kUG9zOyBwKyspIHtcbiAgICAgICAgICAgICAgY2ggPSBpbnB1dC5jaGFyQXQocCk7XG4gICAgICAgICAgICAgIGlmIChjaCA9PT0gXCJcXG5cIikge1xuICAgICAgICAgICAgICAgIGlmICghZGV0YWlscy5zZWVuQ1IpIHsgZGV0YWlscy5saW5lKys7IH1cbiAgICAgICAgICAgICAgICBkZXRhaWxzLmNvbHVtbiA9IDE7XG4gICAgICAgICAgICAgICAgZGV0YWlscy5zZWVuQ1IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gXCJcXHJcIiB8fCBjaCA9PT0gXCJcXHUyMDI4XCIgfHwgY2ggPT09IFwiXFx1MjAyOVwiKSB7XG4gICAgICAgICAgICAgICAgZGV0YWlscy5saW5lKys7XG4gICAgICAgICAgICAgICAgZGV0YWlscy5jb2x1bW4gPSAxO1xuICAgICAgICAgICAgICAgIGRldGFpbHMuc2VlbkNSID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZXRhaWxzLmNvbHVtbisrO1xuICAgICAgICAgICAgICAgIGRldGFpbHMuc2VlbkNSID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgaWYgKHBlZyRjYWNoZWRQb3MgIT09IHBvcykge1xuICAgICAgICAgICAgaWYgKHBlZyRjYWNoZWRQb3MgPiBwb3MpIHtcbiAgICAgICAgICAgICAgcGVnJGNhY2hlZFBvcyA9IDA7XG4gICAgICAgICAgICAgIHBlZyRjYWNoZWRQb3NEZXRhaWxzID0geyBsaW5lOiAxLCBjb2x1bW46IDEsIHNlZW5DUjogZmFsc2UgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkdmFuY2UocGVnJGNhY2hlZFBvc0RldGFpbHMsIHBlZyRjYWNoZWRQb3MsIHBvcyk7XG4gICAgICAgICAgICBwZWckY2FjaGVkUG9zID0gcG9zO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICByZXR1cm4gcGVnJGNhY2hlZFBvc0RldGFpbHM7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGVnJGZhaWwoZXhwZWN0ZWQpIHtcbiAgICAgICAgICBpZiAocGVnJGN1cnJQb3MgPCBwZWckbWF4RmFpbFBvcykgeyByZXR1cm47IH1cbiAgICBcbiAgICAgICAgICBpZiAocGVnJGN1cnJQb3MgPiBwZWckbWF4RmFpbFBvcykge1xuICAgICAgICAgICAgcGVnJG1heEZhaWxQb3MgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQgPSBbXTtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgcGVnJG1heEZhaWxFeHBlY3RlZC5wdXNoKGV4cGVjdGVkKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckYnVpbGRFeGNlcHRpb24obWVzc2FnZSwgZXhwZWN0ZWQsIHBvcykge1xuICAgICAgICAgIGZ1bmN0aW9uIGNsZWFudXBFeHBlY3RlZChleHBlY3RlZCkge1xuICAgICAgICAgICAgdmFyIGkgPSAxO1xuICAgIFxuICAgICAgICAgICAgZXhwZWN0ZWQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgIGlmIChhLmRlc2NyaXB0aW9uIDwgYi5kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhLmRlc2NyaXB0aW9uID4gYi5kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgIHdoaWxlIChpIDwgZXhwZWN0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGlmIChleHBlY3RlZFtpIC0gMV0gPT09IGV4cGVjdGVkW2ldKSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICBmdW5jdGlvbiBidWlsZE1lc3NhZ2UoZXhwZWN0ZWQsIGZvdW5kKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBzdHJpbmdFc2NhcGUocykge1xuICAgICAgICAgICAgICBmdW5jdGlvbiBoZXgoY2gpIHsgcmV0dXJuIGNoLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7IH1cbiAgICBcbiAgICAgICAgICAgICAgcmV0dXJuIHNcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXC9nLCAgICdcXFxcXFxcXCcpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1wiL2csICAgICdcXFxcXCInKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHgwOC9nLCAnXFxcXGInKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHQvZywgICAnXFxcXHQnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXG4vZywgICAnXFxcXG4nKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXGYvZywgICAnXFxcXGYnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHIvZywgICAnXFxcXHInKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx4MDAtXFx4MDdcXHgwQlxceDBFXFx4MEZdL2csIGZ1bmN0aW9uKGNoKSB7IHJldHVybiAnXFxcXHgwJyArIGhleChjaCk7IH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcXHgxMC1cXHgxRlxceDgwLVxceEZGXS9nLCAgICBmdW5jdGlvbihjaCkgeyByZXR1cm4gJ1xcXFx4JyAgKyBoZXgoY2gpOyB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFx1MDE4MC1cXHUwRkZGXS9nLCAgICAgICAgIGZ1bmN0aW9uKGNoKSB7IHJldHVybiAnXFxcXHUwJyArIGhleChjaCk7IH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcXHUxMDgwLVxcdUZGRkZdL2csICAgICAgICAgZnVuY3Rpb24oY2gpIHsgcmV0dXJuICdcXFxcdScgICsgaGV4KGNoKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB2YXIgZXhwZWN0ZWREZXNjcyA9IG5ldyBBcnJheShleHBlY3RlZC5sZW5ndGgpLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkRGVzYywgZm91bmREZXNjLCBpO1xuICAgIFxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGV4cGVjdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGV4cGVjdGVkRGVzY3NbaV0gPSBleHBlY3RlZFtpXS5kZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGV4cGVjdGVkRGVzYyA9IGV4cGVjdGVkLmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgPyBleHBlY3RlZERlc2NzLnNsaWNlKDAsIC0xKS5qb2luKFwiLCBcIilcbiAgICAgICAgICAgICAgICAgICsgXCIgb3IgXCJcbiAgICAgICAgICAgICAgICAgICsgZXhwZWN0ZWREZXNjc1tleHBlY3RlZC5sZW5ndGggLSAxXVxuICAgICAgICAgICAgICA6IGV4cGVjdGVkRGVzY3NbMF07XG4gICAgXG4gICAgICAgICAgICBmb3VuZERlc2MgPSBmb3VuZCA/IFwiXFxcIlwiICsgc3RyaW5nRXNjYXBlKGZvdW5kKSArIFwiXFxcIlwiIDogXCJlbmQgb2YgaW5wdXRcIjtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBcIkV4cGVjdGVkIFwiICsgZXhwZWN0ZWREZXNjICsgXCIgYnV0IFwiICsgZm91bmREZXNjICsgXCIgZm91bmQuXCI7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHZhciBwb3NEZXRhaWxzID0gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKHBvcyksXG4gICAgICAgICAgICAgIGZvdW5kICAgICAgPSBwb3MgPCBpbnB1dC5sZW5ndGggPyBpbnB1dC5jaGFyQXQocG9zKSA6IG51bGw7XG4gICAgXG4gICAgICAgICAgaWYgKGV4cGVjdGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjbGVhbnVwRXhwZWN0ZWQoZXhwZWN0ZWQpO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICByZXR1cm4gbmV3IFN5bnRheEVycm9yKFxuICAgICAgICAgICAgbWVzc2FnZSAhPT0gbnVsbCA/IG1lc3NhZ2UgOiBidWlsZE1lc3NhZ2UoZXhwZWN0ZWQsIGZvdW5kKSxcbiAgICAgICAgICAgIGV4cGVjdGVkLFxuICAgICAgICAgICAgZm91bmQsXG4gICAgICAgICAgICBwb3MsXG4gICAgICAgICAgICBwb3NEZXRhaWxzLmxpbmUsXG4gICAgICAgICAgICBwb3NEZXRhaWxzLmNvbHVtblxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGVnJHBhcnNlc3ZnX3BhdGgoKSB7XG4gICAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNDtcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHMxID0gW107XG4gICAgICAgICAgczIgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxLnB1c2goczIpO1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZW1vdmVUb19kcmF3VG9fY29tbWFuZEdyb3VwcygpO1xuICAgICAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMyID0gcGVnJGMyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzID0gW107XG4gICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgICAgICAgIHdoaWxlIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzMoczIpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgcmV0dXJuIHMwO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHBlZyRwYXJzZW1vdmVUb19kcmF3VG9fY29tbWFuZEdyb3VwcygpIHtcbiAgICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuICAgIFxuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBwZWckcGFyc2Vtb3ZlVG9fZHJhd1RvX2NvbW1hbmRHcm91cCgpO1xuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHMzID0gW107XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgICAgd2hpbGUgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlbW92ZVRvX2RyYXdUb19jb21tYW5kR3JvdXBzKCk7XG4gICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gW3MzLCBzNF07XG4gICAgICAgICAgICAgICAgczIgPSBzMztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgIHMyID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMSA9IFtzMSwgczJdO1xuICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgcmV0dXJuIHMwO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHBlZyRwYXJzZW1vdmVUb19kcmF3VG9fY29tbWFuZEdyb3VwKCkge1xuICAgICAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQ7XG4gICAgXG4gICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBzMSA9IHBlZyRwYXJzZW1vdmV0bygpO1xuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHMzID0gW107XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgICAgd2hpbGUgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlZHJhd3RvX2NvbW1hbmRzKCk7XG4gICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gW3MzLCBzNF07XG4gICAgICAgICAgICAgICAgczIgPSBzMztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgIHMyID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMSA9IFtzMSwgczJdO1xuICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgcmV0dXJuIHMwO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWRyYXd0b19jb21tYW5kcygpIHtcbiAgICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuICAgIFxuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBwZWckcGFyc2VkcmF3dG9fY29tbWFuZCgpO1xuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHMzID0gW107XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgICAgd2hpbGUgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlZHJhd3RvX2NvbW1hbmRzKCk7XG4gICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gW3MzLCBzNF07XG4gICAgICAgICAgICAgICAgczIgPSBzMztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgIHMyID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMSA9IFtzMSwgczJdO1xuICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgcmV0dXJuIHMwO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWRyYXd0b19jb21tYW5kKCkge1xuICAgICAgICAgIHZhciBzMDtcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRwYXJzZWNsb3NlcGF0aCgpO1xuICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBwZWckcGFyc2VsaW5ldG8oKTtcbiAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZWhvcml6b250YWxfbGluZXRvKCk7XG4gICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJHBhcnNldmVydGljYWxfbGluZXRvKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZWN1cnZldG8oKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZXNtb290aF9jdXJ2ZXRvKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJHBhcnNlcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZXNtb290aF9xdWFkcmF0aWNfYmV6aWVyX2N1cnZldG8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZWVsbGlwdGljYWxfYXJjKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2Vtb3ZldG8oKSB7XG4gICAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuICAgIFxuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgaWYgKHBlZyRjNC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IFtdO1xuICAgICAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZW1vdmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjNihzMSwgczMpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgcmV0dXJuIHMwO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHBlZyRwYXJzZW1vdmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpIHtcbiAgICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuICAgIFxuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJGMyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlbGluZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCk7XG4gICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gW3MzLCBzNF07XG4gICAgICAgICAgICAgICAgczIgPSBzMztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgIHMyID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzcoczEsIHMyKTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VjbG9zZXBhdGgoKSB7XG4gICAgICAgICAgdmFyIHMwLCBzMTtcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChwZWckYzgudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzkpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMTAoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgczAgPSBzMTtcbiAgICBcbiAgICAgICAgICByZXR1cm4gczA7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGVnJHBhcnNlbGluZXRvKCkge1xuICAgICAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChwZWckYzExLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMik7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IFtdO1xuICAgICAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWxpbmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMTMoczEsIHMzKTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VsaW5ldG9fYXJndW1lbnRfc2VxdWVuY2UoKSB7XG4gICAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNDtcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHMxID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgczMgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZWxpbmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IFtzMywgczRdO1xuICAgICAgICAgICAgICAgIHMyID0gczM7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGM3KHMxLCBzMik7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICByZXR1cm4gczA7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGVnJHBhcnNlaG9yaXpvbnRhbF9saW5ldG8oKSB7XG4gICAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuICAgIFxuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgaWYgKHBlZyRjMTQudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE1KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gW107XG4gICAgICAgICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMTYoczEsIHMzKTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2Vjb29yZGluYXRlX3NlcXVlbmNlKCkge1xuICAgICAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQ7XG4gICAgXG4gICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBzMSA9IHBlZyRwYXJzZWNvb3JkaW5hdGUoKTtcbiAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJGMyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IFtzMywgczRdO1xuICAgICAgICAgICAgICAgIHMyID0gczM7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGM3KHMxLCBzMik7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICByZXR1cm4gczA7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGVnJHBhcnNldmVydGljYWxfbGluZXRvKCkge1xuICAgICAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChwZWckYzE3LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxOCk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IFtdO1xuICAgICAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfc2VxdWVuY2UoKTtcbiAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzE5KHMxLCBzMyk7XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICByZXR1cm4gczA7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGVnJHBhcnNlY3VydmV0bygpIHtcbiAgICAgICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG4gICAgXG4gICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBpZiAocGVnJGMyMC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjEpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBbXTtcbiAgICAgICAgICAgIHMzID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VjdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCk7XG4gICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyMihzMSwgczMpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgcmV0dXJuIHMwO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWN1cnZldG9fYXJndW1lbnRfc2VxdWVuY2UoKSB7XG4gICAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNDtcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHMxID0gcGVnJHBhcnNlY3VydmV0b19hcmd1bWVudCgpO1xuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2VjdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCk7XG4gICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gW3MzLCBzNF07XG4gICAgICAgICAgICAgICAgczIgPSBzMztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgIHMyID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzcoczEsIHMyKTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VjdXJ2ZXRvX2FyZ3VtZW50KCkge1xuICAgICAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuICAgIFxuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgICAgICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJGMyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyMyhzMSwgczMsIHM1KTtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VzbW9vdGhfY3VydmV0bygpIHtcbiAgICAgICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG4gICAgXG4gICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBpZiAocGVnJGMyNC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjUpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBbXTtcbiAgICAgICAgICAgIHMzID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VzbW9vdGhfY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjYoczEsIHMzKTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VzbW9vdGhfY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpIHtcbiAgICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuICAgIFxuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBwZWckcGFyc2VzbW9vdGhfY3VydmV0b19hcmd1bWVudCgpO1xuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2VzbW9vdGhfY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IFtzMywgczRdO1xuICAgICAgICAgICAgICAgIHMyID0gczM7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGM3KHMxLCBzMik7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICByZXR1cm4gczA7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGVnJHBhcnNlc21vb3RoX2N1cnZldG9fYXJndW1lbnQoKSB7XG4gICAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuICAgIFxuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzI3KHMxLCBzMyk7XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICByZXR1cm4gczA7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGVnJHBhcnNlcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvKCkge1xuICAgICAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChwZWckYzI4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyOSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IFtdO1xuICAgICAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZXF1YWRyYXRpY19iZXppZXJfY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMzAoczEsIHMzKTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VxdWFkcmF0aWNfYmV6aWVyX2N1cnZldG9fYXJndW1lbnRfc2VxdWVuY2UoKSB7XG4gICAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNDtcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHMxID0gcGVnJHBhcnNlcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50KCk7XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgczMgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXF1YWRyYXRpY19iZXppZXJfY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IFtzMywgczRdO1xuICAgICAgICAgICAgICAgIHMyID0gczM7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGM3KHMxLCBzMik7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICByZXR1cm4gczA7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGVnJHBhcnNlcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50KCkge1xuICAgICAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHMxID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMyID0gcGVnJGMyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyNyhzMSwgczMpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgcmV0dXJuIHMwO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXNtb290aF9xdWFkcmF0aWNfYmV6aWVyX2N1cnZldG8oKSB7XG4gICAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuICAgIFxuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgaWYgKHBlZyRjMzEudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzMyKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gW107XG4gICAgICAgICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlc21vb3RoX3F1YWRyYXRpY19iZXppZXJfY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMzMoczEsIHMzKTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VzbW9vdGhfcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCkge1xuICAgICAgICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQ7XG4gICAgXG4gICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBzMSA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpcigpO1xuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2VzbW9vdGhfcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCk7XG4gICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMzID0gW3MzLCBzNF07XG4gICAgICAgICAgICAgICAgczIgPSBzMztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgIHMyID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzcoczEsIHMyKTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VlbGxpcHRpY2FsX2FyYygpIHtcbiAgICAgICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG4gICAgXG4gICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBpZiAocGVnJGMzNC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzUpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBbXTtcbiAgICAgICAgICAgIHMzID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VlbGxpcHRpY2FsX2FyY19hcmd1bWVudF9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMzYoczEsIHMzKTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VlbGxpcHRpY2FsX2FyY19hcmd1bWVudF9zZXF1ZW5jZSgpIHtcbiAgICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuICAgIFxuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBwZWckcGFyc2VlbGxpcHRpY2FsX2FyY19hcmd1bWVudCgpO1xuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2VlbGxpcHRpY2FsX2FyY19hcmd1bWVudF9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMyA9IFtzMywgczRdO1xuICAgICAgICAgICAgICAgIHMyID0gczM7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGM3KHMxLCBzMik7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICByZXR1cm4gczA7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGVnJHBhcnNlZWxsaXB0aWNhbF9hcmNfYXJndW1lbnQoKSB7XG4gICAgICAgICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNywgczgsIHM5LCBzMTAsIHMxMTtcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHMxID0gcGVnJHBhcnNlbm9ubmVnYXRpdmVfbnVtYmVyKCk7XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMyID0gcGVnJGMyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlbm9ubmVnYXRpdmVfbnVtYmVyKCk7XG4gICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzNCA9IHBlZyRjMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzNSA9IHBlZyRwYXJzZW51bWJlcigpO1xuICAgICAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZmxhZygpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczggPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzOCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRjMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzOCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzOSA9IHBlZyRwYXJzZWZsYWcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM5ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczEwID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEwID0gcGVnJGMyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEwICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMzNyhzMSwgczMsIHM1LCBzNywgczksIHMxMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICByZXR1cm4gczA7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCkge1xuICAgICAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHMxID0gcGVnJHBhcnNlY29vcmRpbmF0ZSgpO1xuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgICAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMiA9IHBlZyRjMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWNvb3JkaW5hdGUoKTtcbiAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHJlcG9ydGVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzM4KHMxLCBzMyk7XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICByZXR1cm4gczA7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGVnJHBhcnNlY29vcmRpbmF0ZSgpIHtcbiAgICAgICAgICB2YXIgczAsIHMxO1xuICAgIFxuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBwZWckcGFyc2VudW1iZXIoKTtcbiAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRyZXBvcnRlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzM5KHMxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgczAgPSBzMTtcbiAgICBcbiAgICAgICAgICByZXR1cm4gczA7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGVnJHBhcnNlbm9ubmVnYXRpdmVfbnVtYmVyKCkge1xuICAgICAgICAgIHZhciBzMDtcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRwYXJzZWZsb2F0aW5nX3BvaW50X2NvbnN0YW50KCk7XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRwYXJzZWRpZ2l0X3NlcXVlbmNlKCk7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VudW1iZXIoKSB7XG4gICAgICAgICAgdmFyIHMwLCBzMSwgczI7XG4gICAgXG4gICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBzMSA9IHBlZyRwYXJzZXNpZ24oKTtcbiAgICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJGMyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNlZmxvYXRpbmdfcG9pbnRfY29uc3RhbnQoKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMSA9IFtzMSwgczJdO1xuICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgczEgPSBwZWckcGFyc2VzaWduKCk7XG4gICAgICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckcGFyc2VkaWdpdF9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMSA9IFtzMSwgczJdO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VmbGFnKCkge1xuICAgICAgICAgIHZhciBzMDtcbiAgICBcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ4KSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjNDA7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDEpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0OSkge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjNDI7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0Myk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgcmV0dXJuIHMwO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWNvbW1hX3dzcCgpIHtcbiAgICAgICAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuICAgIFxuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBbXTtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgd2hpbGUgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMxLnB1c2goczIpO1xuICAgICAgICAgICAgICBzMiA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZWNvbW1hKCk7XG4gICAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBbXTtcbiAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgICAgICAgd2hpbGUgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczMucHVzaChzNCk7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMSA9IFtzMSwgczIsIHMzXTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHMxID0gcGVnJHBhcnNlY29tbWEoKTtcbiAgICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMiA9IFtdO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMxID0gW3MxLCBzMl07XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgcmV0dXJuIHMwO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWNvbW1hKCkge1xuICAgICAgICAgIHZhciBzMDtcbiAgICBcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjNDQ7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDUpOyB9XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VmbG9hdGluZ19wb2ludF9jb25zdGFudCgpIHtcbiAgICAgICAgICB2YXIgczAsIHMxLCBzMjtcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHMxID0gcGVnJHBhcnNlZnJhY3Rpb25hbF9jb25zdGFudCgpO1xuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2VleHBvbmVudCgpO1xuICAgICAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMyID0gcGVnJGMyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMxID0gW3MxLCBzMl07XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBzMSA9IHBlZyRwYXJzZWRpZ2l0X3NlcXVlbmNlKCk7XG4gICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckcGFyc2VleHBvbmVudCgpO1xuICAgICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMSA9IFtzMSwgczJdO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VmcmFjdGlvbmFsX2NvbnN0YW50KCkge1xuICAgICAgICAgIHZhciBzMCwgczEsIHMyLCBzMztcbiAgICBcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHMxID0gcGVnJHBhcnNlZGlnaXRfc2VxdWVuY2UoKTtcbiAgICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJGMyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDYpIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzQ2O1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDcpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VkaWdpdF9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMSA9IFtzMSwgczIsIHMzXTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHMxID0gcGVnJHBhcnNlZGlnaXRfc2VxdWVuY2UoKTtcbiAgICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ2KSB7XG4gICAgICAgICAgICAgICAgczIgPSBwZWckYzQ2O1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0Nyk7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMSA9IFtzMSwgczJdO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VleHBvbmVudCgpIHtcbiAgICAgICAgICB2YXIgczAsIHMxLCBzMiwgczM7XG4gICAgXG4gICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBpZiAocGVnJGM0OC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDkpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2VzaWduKCk7XG4gICAgICAgICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VkaWdpdF9zZXF1ZW5jZSgpO1xuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMSA9IFtzMSwgczIsIHMzXTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckYzA7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIHJldHVybiBzMDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwZWckcGFyc2VzaWduKCkge1xuICAgICAgICAgIHZhciBzMDtcbiAgICBcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQzKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjNTA7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTEpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NSkge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjNTI7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM1Myk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgcmV0dXJuIHMwO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHBlZyRwYXJzZWRpZ2l0X3NlcXVlbmNlKCkge1xuICAgICAgICAgIHZhciBzMCwgczEsIHMyO1xuICAgIFxuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBbXTtcbiAgICAgICAgICBpZiAocGVnJGM1NC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzMiA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTUpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgd2hpbGUgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMxLnB1c2goczIpO1xuICAgICAgICAgICAgICBpZiAocGVnJGM1NC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICAgICAgczIgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM1NSk7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckcmVwb3J0ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM1NihzMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHMwID0gczE7XG4gICAgXG4gICAgICAgICAgcmV0dXJuIHMwO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIHBlZyRwYXJzZXdzcCgpIHtcbiAgICAgICAgICB2YXIgczA7XG4gICAgXG4gICAgICAgICAgaWYgKHBlZyRjNTcudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgczAgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzU4KTsgfVxuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICByZXR1cm4gczA7XG4gICAgICAgIH1cbiAgICBcbiAgICBcbiAgICAgICAgICAvLyBUaGUgbGFzdCBjb29yZGluYXRlIHdlIGFyZSBhdCBpbiB0aGUgcGF0aC4gSW4gYWJzb2x1dGUgY29vcmRzLlxuICAgICAgICAgIHZhciBsYXN0Q29vcmQgPSBbMCwgMF07XG4gICAgICAgICAgLy8gVGhlIGxhc3QgY29udHJvbCBwb2ludCB3ZSBlbmNvdW50ZXJlZCBpbiB0aGUgcGF0aC4gSW4gYWJzb2x1dGUgY29vcmRzLlxuICAgICAgICAgIHZhciBsYXN0Q29udHJvbCA9IFswLCAwXTtcbiAgICAgICAgICAvLyBUaGUgbGlzdCBvZiBvcGVyYXRpb25zIHdlJ3ZlIHBhcnNlZCBzbyBmYXIuXG4gICAgICAgICAgdmFyIG9wcyA9IFtdO1xuICAgICAgICAgIC8vIEhhdmUgd2UgcGFyc2VkIHRoZSBmaXJzdCBzdWItcGF0aCB5ZXQ/XG4gICAgICAgICAgdmFyIGZpcnN0U3ViUGF0aCA9IHRydWU7XG4gICAgICAgICAgLy8gVGhlIGxldHRlciBvZiB0aGUgbGFzdCBwYXJzZWQgY29tbWFuZC5cbiAgICAgICAgICB2YXIgbGFzdENoID0gJyc7XG4gICAgXG4gICAgICAgICAgLy8gQ29udmVydCBhIHBvc2l0aW9uIGludG8gYW4gYWJzb2x1dGUgcG9zaXRpb24uXG4gICAgICAgICAgZnVuY3Rpb24gbWFrZUFic29sdXRlKGMsIGNvb3JkKSB7XG4gICAgICAgICAgICBpZiAoJ21sYXpodmNzcXQnLmluZGV4T2YoYykgPT09IC0xKSB7XG4gICAgICAgICAgICAgIGxhc3RDb29yZCA9IGNvb3JkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGFzdENvb3JkWzBdICs9IGNvb3JkWzBdO1xuICAgICAgICAgICAgICBsYXN0Q29vcmRbMV0gKz0gY29vcmRbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0Q2ggPSBjO1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RDb29yZC5zbGljZSgwKTtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgLy8gQ29udmVydCBhIHNlcXVlbmNlIG9mIGNvb3JkaW5hdGVzIGludG8gYWJzb2x1dGUgY29vcmRpbmF0ZXMuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBGb3IgYXJndW1lbnRzIHRoYXQgdGFrZSBtdWx0aXBsZSBjb29yZCBwYWlycywgc3VjaCBhcyBiZXppZXIuXG4gICAgICAgICAgZnVuY3Rpb24gbWFrZUFic29sdXRlTXVsdGlwbGUoYywgc2VxKSB7XG4gICAgICAgICAgICB2YXIgciA9IFtdO1xuICAgICAgICAgICAgdmFyIGxhc3RQb3NDb3B5ID0gbGFzdENvb3JkLnNsaWNlKDApO1xuICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpIDwgc2VxLmxlbmd0aDsgaSs9Mikge1xuICAgICAgICAgICAgICAvLyBPbmx5IHRoZSBsYXN0IHBvaW50IHNob3VsZCB1cGRhdGUgbGFzdENvb3JkLlxuICAgICAgICAgICAgICBsYXN0Q29vcmQgPSBsYXN0UG9zQ29weS5zbGljZSgwKTtcbiAgICAgICAgICAgICAgdmFyIGNvb3JkID0gbWFrZUFic29sdXRlKGMsIHNlcS5zbGljZShpLCBpKzIpKTtcbiAgICAgICAgICAgICAgciA9IHIuY29uY2F0KGNvb3JkKTtcbiAgICAgICAgICAgICAgLy8gUmVjb3JkIHRoZSBsYXN0IGNvbnRyb2wgcG9pbnQsIGl0IG1pZ2h0IGJlIG5lZWRlZCBmb3JcbiAgICAgICAgICAgICAgLy8gc2hvcnRoYW5kIG9wZXJhdGlvbnMuXG4gICAgICAgICAgICAgIGlmIChpID09IHNlcS5sZW5ndGgtNCkge1xuICAgICAgICAgICAgICAgIGxhc3RDb250cm9sID0gY29vcmQuc2xpY2UoMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAvLyBGaW5kIHRoZSByZWZsZWN0aW9uIG9mIHRoZSBsYXN0IGNvbnRyb2wgcG9pbnQgb3ZlclxuICAgICAgICAgIC8vIHRoZSBsYXN0IHBvc3Rpb24gaW4gdGhlIHBhdGguXG4gICAgICAgICAgZnVuY3Rpb24gbWFrZVJlZmxlY3RlZCgpIHtcbiAgICAgICAgICAgIGlmICgnQ2NTc1FxVHQnLmluZGV4T2YobGFzdENoKSA9PSAtMSkge1xuICAgICAgICAgICAgICBsYXN0Q29udHJvbCA9IGxhc3RDb29yZC5zbGljZSgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHJlZmxlY3RlZCA9IDIqbGFzdENvb3JkIC0gbGFzdENvbnRyb2xcbiAgICAgICAgICAgIC8vIE5vdGUgdGhlIHJlc3VsdCBpcyBhYnNvbHV0ZSwgbm90IHJlbGF0aXZlLlxuICAgICAgICAgICAgdmFyIHIgPSBbMCwgMF07XG4gICAgICAgICAgICByWzBdID0gMipsYXN0Q29vcmRbMF0gLSBsYXN0Q29udHJvbFswXTtcbiAgICAgICAgICAgIHJbMV0gPSAyKmxhc3RDb29yZFsxXSAtIGxhc3RDb250cm9sWzFdO1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIGZ1bmN0aW9uIG1ha2VBYnNvbHV0ZUZyb21YKGMsIHgpIHtcbiAgICAgICAgICAgIHZhciBjb29yZCA9IFt4LCAwXTtcbiAgICAgICAgICAgIGlmIChjID09ICdIJykge1xuICAgICAgICAgICAgICBjb29yZFsxXSA9IGxhc3RDb29yZFsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYWtlQWJzb2x1dGUoYywgY29vcmQpO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICBmdW5jdGlvbiBtYWtlQWJzb2x1dGVGcm9tWShjLCB5KSB7XG4gICAgICAgICAgICB2YXIgY29vcmQgPSBbMCwgeV07XG4gICAgICAgICAgICBpZiAoYyA9PSAnVicpIHtcbiAgICAgICAgICAgICAgY29vcmRbMF0gPSBsYXN0Q29vcmRbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWFrZUFic29sdXRlKGMsIGNvb3JkKTtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgZnVuY3Rpb24gY29uY2F0U2VxdWVuY2Uob25lLCByZXN0KSB7XG4gICAgICAgICAgICB2YXIgciA9IFtvbmVdO1xuICAgICAgICAgICAgaWYgKHJlc3QgJiYgcmVzdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgIHZhciByZW0gPSByZXN0WzFdO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHIucHVzaChyZW1baV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgZnVuY3Rpb24gbWFnKHYpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3codlswXSwgMikgKyBNYXRoLnBvdyh2WzFdLCAyKSk7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIGZ1bmN0aW9uIGRvdCh1LCB2KSB7XG4gICAgICAgICAgICByZXR1cm4gKHVbMF0qdlswXSArIHVbMV0qdlsxXSk7XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIGZ1bmN0aW9uIHJhdGlvKHUsIHYpIHtcbiAgICAgICAgICAgIHJldHVybiBkb3QodSx2KSAvIChtYWcodSkqbWFnKHYpKVxuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICBmdW5jdGlvbiBhbmdsZSh1LCB2KSB7XG4gICAgICAgICAgICB2YXIgc2lnbiA9IDEuMDtcbiAgICAgICAgICAgIGlmICgodVswXSp2WzFdIC0gdVsxXSp2WzBdKSA8IDApIHtcbiAgICAgICAgICAgICAgc2lnbiA9IC0xLjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2lnbiAqIE1hdGguYWNvcyhyYXRpbyh1LHYpKTtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgZnVuY3Rpb24gcm90Q2xvY2t3aXNlKHYsIGFuZ2xlKSB7XG4gICAgICAgICAgICB2YXIgY29zdCA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgICAgIHZhciBzaW50ID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICAgICAgcmV0dXJuIFtjb3N0KnZbMF0gKyBzaW50KnZbMV0sIC0xICogc2ludCp2WzBdICsgY29zdCp2WzFdXTtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgZnVuY3Rpb24gcm90Q291bnRlckNsb2Nrd2lzZSh2LCBhbmdsZSkge1xuICAgICAgICAgICAgdmFyIGNvc3QgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgICAgICB2YXIgc2ludCA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgICAgIHJldHVybiBbY29zdCp2WzBdIC0gc2ludCp2WzFdLCBzaW50KnZbMF0gKyBjb3N0KnZbMV1dO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICBmdW5jdGlvbiBtaWRQb2ludCh1LCB2KSB7XG4gICAgICAgICAgICByZXR1cm4gWyh1WzBdIC0gdlswXSkvMi4wLCAodVsxXSAtIHZbMV0pLzIuMF07XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIGZ1bmN0aW9uIG1lYW5WZWModSwgdikge1xuICAgICAgICAgICAgcmV0dXJuIFsodVswXSArIHZbMF0pLzIuMCwgKHVbMV0gKyB2WzFdKS8yLjBdO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICBmdW5jdGlvbiBwb2ludE11bCh1LCB2KSB7XG4gICAgICAgICAgICByZXR1cm4gW3VbMF0qdlswXSwgdVsxXSp2WzFdXTtcbiAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgZnVuY3Rpb24gc2NhbGUoYywgdikge1xuICAgICAgICAgICAgcmV0dXJuIFtjKnZbMF0sIGMqdlsxXV07XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIGZ1bmN0aW9uIHN1bSh1LCB2KSB7XG4gICAgICAgICAgICByZXR1cm4gW3VbMF0gKyB2WzBdLCB1WzFdICsgdlsxXV07XG4gICAgICAgICAgfVxuICAgIFxuICAgICAgICAgIC8vIENvbnZlcnQgYW4gU1ZHIGVsbGlwdGljYWwgYXJjIHRvIGEgc2VyaWVzIG9mIGNhbnZhcyBjb21tYW5kcy5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIHgxLCB4Mjogc3RhcnQgYW5kIHN0b3AgY29vcmRpbmF0ZXMgb2YgdGhlIGVsbGlwc2UuXG4gICAgICAgICAgLy8gcngsIHJ5OiByYWRpaSBvZiB0aGUgZWxsaXBzZS5cbiAgICAgICAgICAvLyBwaGk6IHJvdGF0aW9uIG9mIHRoZSBlbGxpcHNlLlxuICAgICAgICAgIC8vIGZBOiBsYXJnZSBhcmMgZmxhZy5cbiAgICAgICAgICAvLyBmUzogc3dlZXAgZmxhZy5cbiAgICAgICAgICBmdW5jdGlvbiBlbGxpcHNlRnJvbUVsbGlwdGljYWxBcmMoeDEsIHJ4LCByeSwgcGhpLCBmQSwgZlMsIHgyKSB7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IGZyb20gZW5kcG9pbnQgdG8gY2VudGVyIHBhcmFtZXRyaXphdGlvbiwgYXMgZGV0YWlsZWQgaW46XG4gICAgICAgICAgICAvLyAgIGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9pbXBsbm90ZS5odG1sI0FyY0ltcGxlbWVudGF0aW9uTm90ZXNcbiAgICAgICAgICAgIGlmIChyeCA9PSAwIHx8IHJ5ID09IDApIHtcbiAgICAgICAgICAgICAgb3BzLnB1c2goe3R5cGU6ICdsaW5lVG8nLCBhcmdzOiB4Mn0pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcGhpID0gcGhpICogKE1hdGguUEkgLyAxODAuMCk7XG4gICAgICAgICAgICByeCA9IE1hdGguYWJzKHJ4KTtcbiAgICAgICAgICAgIHJ5ID0gTWF0aC5hYnMocnkpO1xuICAgICAgICAgICAgdmFyIHhQcmltZSA9IHJvdENsb2Nrd2lzZShtaWRQb2ludCh4MSwgeDIpLCBwaGkpOyAgICAgICAgICAgICAgICAvLyBGLjYuNS4xXG4gICAgICAgICAgICB2YXIgeFByaW1lMiA9IHBvaW50TXVsKHhQcmltZSwgeFByaW1lKTtcbiAgICAgICAgICAgIHZhciByeDIgPSBNYXRoLnBvdyhyeCwgMik7XG4gICAgICAgICAgICB2YXIgcnkyID0gTWF0aC5wb3cocnksIDIpO1xuICAgIFxuICAgICAgICAgICAgdmFyIGxhbWJkYSA9IE1hdGguc3FydCh4UHJpbWUyWzBdL3J4MiArIHhQcmltZTJbMV0vcnkyKTtcbiAgICAgICAgICAgIGlmIChsYW1iZGEgPiAxKSB7XG4gICAgICAgICAgICAgIHJ4ICo9IGxhbWJkYTtcbiAgICAgICAgICAgICAgcnkgKj0gbGFtYmRhO1xuICAgICAgICAgICAgICByeDIgPSBNYXRoLnBvdyhyeCwgMik7XG4gICAgICAgICAgICAgIHJ5MiA9IE1hdGgucG93KHJ5LCAyKTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHZhciBmYWN0b3IgPSBNYXRoLnNxcnQoKHJ4MipyeTIgLSByeDIqeFByaW1lMlsxXSAtIHJ5Mip4UHJpbWUyWzBdKSAvXG4gICAgICAgICAgICAgIChyeDIqeFByaW1lMlsxXSArIHJ5Mip4UHJpbWUyWzBdKSk7XG4gICAgICAgICAgICBpZiAoZkEgPT0gZlMpIHtcbiAgICAgICAgICAgICAgZmFjdG9yICo9IC0xLjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY1ByaW1lID0gc2NhbGUoZmFjdG9yLCBbcngqeFByaW1lWzFdL3J5LCAtcnkqeFByaW1lWzBdL3J4XSk7IC8vIEYuNi41LjJcbiAgICAgICAgICAgIHZhciBjID0gc3VtKHJvdENvdW50ZXJDbG9ja3dpc2UoY1ByaW1lLCBwaGkpLCBtZWFuVmVjKHgxLCB4MikpOyAgLy8gRi42LjUuM1xuICAgICAgICAgICAgdmFyIHgxVW5pdFZlY3RvciA9IFsoeFByaW1lWzBdIC0gY1ByaW1lWzBdKS9yeCwgKHhQcmltZVsxXSAtIGNQcmltZVsxXSkvcnldO1xuICAgICAgICAgICAgdmFyIHgyVW5pdFZlY3RvciA9IFsoLTEuMCp4UHJpbWVbMF0gLSBjUHJpbWVbMF0pL3J4LCAoLTEuMCp4UHJpbWVbMV0gLSBjUHJpbWVbMV0pL3J5XTtcbiAgICAgICAgICAgIHZhciB0aGV0YSA9IGFuZ2xlKFsxLCAwXSwgeDFVbml0VmVjdG9yKTsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRi42LjUuNVxuICAgICAgICAgICAgdmFyIGRlbHRhVGhldGEgPSBhbmdsZSh4MVVuaXRWZWN0b3IsIHgyVW5pdFZlY3Rvcik7ICAgICAgICAgICAgICAvLyBGLjYuNS42XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSB0aGV0YTtcbiAgICAgICAgICAgIHZhciBlbmQgPSB0aGV0YStkZWx0YVRoZXRhO1xuICAgICAgICAgICAgb3BzLnB1c2goXG4gICAgICAgICAgICAgIHt0eXBlOiAnc2F2ZScsIGFyZ3M6IFtdfSxcbiAgICAgICAgICAgICAge3R5cGU6ICd0cmFuc2xhdGUnLCBhcmdzOiBbY1swXSwgY1sxXV19LFxuICAgICAgICAgICAgICB7dHlwZTogJ3JvdGF0ZScsIGFyZ3M6IFtwaGldfSxcbiAgICAgICAgICAgICAge3R5cGU6ICdzY2FsZScsIGFyZ3M6IFtyeCwgcnldfSxcbiAgICAgICAgICAgICAge3R5cGU6ICdhcmMnLCBhcmdzOiBbMCwgMCwgMSwgc3RhcnQsIGVuZCwgMS1mU119LFxuICAgICAgICAgICAgICB7dHlwZTogJ3Jlc3RvcmUnLCBhcmdzOiBbXX1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgXG4gICAgXG4gICAgICAgIHBlZyRyZXN1bHQgPSBwZWckc3RhcnRSdWxlRnVuY3Rpb24oKTtcbiAgICBcbiAgICAgICAgaWYgKHBlZyRyZXN1bHQgIT09IHBlZyRGQUlMRUQgJiYgcGVnJGN1cnJQb3MgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBwZWckcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwZWckcmVzdWx0ICE9PSBwZWckRkFJTEVEICYmIHBlZyRjdXJyUG9zIDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICBwZWckZmFpbCh7IHR5cGU6IFwiZW5kXCIsIGRlc2NyaXB0aW9uOiBcImVuZCBvZiBpbnB1dFwiIH0pO1xuICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICB0aHJvdyBwZWckYnVpbGRFeGNlcHRpb24obnVsbCwgcGVnJG1heEZhaWxFeHBlY3RlZCwgcGVnJG1heEZhaWxQb3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBTeW50YXhFcnJvcjogU3ludGF4RXJyb3IsXG4gICAgICAgIHBhcnNlOiAgICAgICBwYXJzZVxuICAgICAgfTtcbiAgICB9KSgpO1xuXG4gICAgZnVuY3Rpb24gUGF0aF8oYXJnKSB7XG4gICAgICB0aGlzLm9wc18gPSBbXTtcbiAgICAgIGlmIChhcmcgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgYXJnID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5vcHNfID0gcGFyc2VyLnBhcnNlKGFyZyk7XG4gICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgIC8vIFRyZWF0IGFuIGludmFsaWQgU1ZHIHBhdGggYXMgYW4gZW1wdHkgcGF0aC5cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcmcuaGFzT3duUHJvcGVydHkoJ29wc18nKSkge1xuICAgICAgICB0aGlzLm9wc18gPSBhcmcub3BzXy5zbGljZSgwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93ICdFcnJvcjogJyArIHR5cGVvZiBhcmcgKyAnaXMgbm90IGEgdmFsaWQgYXJndW1lbnQgdG8gUGF0aCc7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFRPRE8oamNncmVnb3JpbykgdGVzdCBmb3IgYXJjVG8gYW5kIGltcGxlbWVudCB2aWEgc29tZXRoaW5nLlxuXG5cbiAgICAvLyBQYXRoIG1ldGhvZHMgdGhhdCBtYXAgc2ltcGx5IHRvIHRoZSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQuXG4gICAgdmFyIHNpbXBsZV9tYXBwaW5nID0gW1xuICAgICAgJ2Nsb3NlUGF0aCcsXG4gICAgICAnbW92ZVRvJyxcbiAgICAgICdsaW5lVG8nLFxuICAgICAgJ3F1YWRyYXRpY0N1cnZlVG8nLFxuICAgICAgJ2JlemllckN1cnZlVG8nLFxuICAgICAgJ3JlY3QnLFxuICAgICAgJ2FyYycsXG4gICAgICAnYXJjVG8nLFxuICAgICAgJ2VsbGlwc2UnLFxuICAgICAgJ2lzUG9pbnRJblBhdGgnLFxuICAgICAgJ2lzUG9pbnRJblN0cm9rZScsXG4gICAgICBdO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm9wc18ucHVzaCh7dHlwZTogbmFtZSwgYXJnczogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKX0pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBBZGQgc2ltcGxlX21hcHBpbmcgbWV0aG9kcyB0byBQYXRoMkQuXG4gICAgZm9yICh2YXIgaT0wOyBpPHNpbXBsZV9tYXBwaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmFtZSA9IHNpbXBsZV9tYXBwaW5nW2ldO1xuICAgICAgUGF0aF8ucHJvdG90eXBlW25hbWVdID0gY3JlYXRlRnVuY3Rpb24obmFtZSk7XG4gICAgfVxuXG4gICAgUGF0aF8ucHJvdG90eXBlWydhZGRQYXRoJ10gPSBmdW5jdGlvbihwYXRoLCB0cikge1xuICAgICAgdmFyIGhhc1R4ID0gZmFsc2U7XG4gICAgICBpZiAodHJcbiAgICAgICAgICAmJiB0ci5oYXNPd25Qcm9wZXJ0eSgnYScpXG4gICAgICAgICAgJiYgdHIuaGFzT3duUHJvcGVydHkoJ2InKVxuICAgICAgICAgICYmIHRyLmhhc093blByb3BlcnR5KCdjJylcbiAgICAgICAgICAmJiB0ci5oYXNPd25Qcm9wZXJ0eSgnZCcpXG4gICAgICAgICAgJiYgdHIuaGFzT3duUHJvcGVydHkoJ2UnKVxuICAgICAgICAgICYmIHRyLmhhc093blByb3BlcnR5KCdmJykpIHtcbiAgICAgICAgaGFzVHggPSB0cnVlO1xuICAgICAgICB0aGlzLm9wc18ucHVzaCh7dHlwZTogJ3NhdmUnLCBhcmdzOiBbXX0pO1xuICAgICAgICB0aGlzLm9wc18ucHVzaCh7dHlwZTogJ3RyYW5zZm9ybScsIGFyZ3M6IFt0ci5hLCB0ci5iLCB0ci5jLCB0ci5kLCB0ci5lLCB0ci5mXX0pO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHNfID0gdGhpcy5vcHNfLmNvbmNhdChwYXRoLm9wc18pO1xuICAgICAgaWYgKGhhc1R4KSB7XG4gICAgICAgIHRoaXMub3BzXy5wdXNoKHt0eXBlOiAncmVzdG9yZScsIGFyZ3M6IFtdfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgb3JpZ2luYWxfZmlsbCA9IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5wcm90b3R5cGUuZmlsbDtcbiAgICBvcmlnaW5hbF9zdHJva2UgPSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlLnN0cm9rZTtcbiAgICBvcmlnaW5hbF9jbGlwID0gQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELnByb3RvdHlwZS5jbGlwO1xuICAgIG9yaWdpbmFsX2lzX3BvaW50X2luX3BhdGggPSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlLmlzUG9pbnRJblBhdGg7XG4gICAgb3JpZ2luYWxfaXNfcG9pbnRfaW5fc3Ryb2tlID0gQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELnByb3RvdHlwZS5pc1BvaW50SW5TdHJva2U7XG5cbiAgICAvLyBSZXBsYWNlIG1ldGhvZHMgb24gQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHdpdGggb25lcyB0aGF0IHVuZGVyc3RhbmQgUGF0aDJELlxuICAgIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIFBhdGhfKSB7XG4gICAgICAgIHRoaXMuYmVnaW5QYXRoKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcmcub3BzXy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBvcCA9IGFyZy5vcHNfW2ldO1xuICAgICAgICAgIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5wcm90b3R5cGVbb3AudHlwZV0uYXBwbHkodGhpcywgb3AuYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgb3JpZ2luYWxfZmlsbC5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9yaWdpbmFsX2ZpbGwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlLnN0cm9rZSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIFBhdGhfKSB7XG4gICAgICAgIHRoaXMuYmVnaW5QYXRoKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcmcub3BzXy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBvcCA9IGFyZy5vcHNfW2ldO1xuICAgICAgICAgIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5wcm90b3R5cGVbb3AudHlwZV0uYXBwbHkodGhpcywgb3AuYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgb3JpZ2luYWxfc3Ryb2tlLmNhbGwodGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcmlnaW5hbF9zdHJva2UuY2FsbCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlLmNsaXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgIGlmIChhcmcgaW5zdGFuY2VvZiBQYXRoXykge1xuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG9uJ3Qgc2F2ZSBhbmQgcmVzdG9yZSB0aGUgY29udGV4dCBzdGF0ZSwgc2luY2UgdGhlXG4gICAgICAgIC8vIGNsaXAgcmVnaW9uIGlzIHBhcnQgb2YgdGhlIHN0YXRlLiBOb3QgcmVhbGx5IGEgcHJvYmxlbSBzaW5jZSB0aGVcbiAgICAgICAgLy8gSFRNTCA1IHNwZWMgZG9lc24ndCBzYXkgdGhhdCBjbGlwKHBhdGgpIGRvZXNuJ3QgYWZmZWN0IHRoZSBjdXJyZW50XG4gICAgICAgIC8vIHBhdGguXG4gICAgICAgIHRoaXMuYmVnaW5QYXRoKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcmcub3BzXy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBvcCA9IGFyZy5vcHNfW2ldO1xuICAgICAgICAgIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5wcm90b3R5cGVbb3AudHlwZV0uYXBwbHkodGhpcywgb3AuYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgb3JpZ2luYWxfY2xpcC5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9yaWdpbmFsX2NsaXAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlLmlzUG9pbnRJblBhdGggPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgIGlmIChhcmcgaW5zdGFuY2VvZiBQYXRoXykge1xuICAgICAgICB0aGlzLmJlZ2luUGF0aCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJnLm9wc18ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICB2YXIgb3AgPSBhcmcub3BzX1tpXTtcbiAgICAgICAgICBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlW29wLnR5cGVdLmFwcGx5KHRoaXMsIG9wLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmlnaW5hbF9pc19wb2ludF9pbl9wYXRoLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsX2lzX3BvaW50X2luX3BhdGguYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELnByb3RvdHlwZS5pc1BvaW50SW5TdHJva2UgPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgIGlmIChhcmcgaW5zdGFuY2VvZiBQYXRoXykge1xuICAgICAgICB0aGlzLmJlZ2luUGF0aCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJnLm9wc18ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICB2YXIgb3AgPSBhcmcub3BzX1tpXTtcbiAgICAgICAgICBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlW29wLnR5cGVdLmFwcGx5KHRoaXMsIG9wLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmlnaW5hbF9pc19wb2ludF9pbl9zdHJva2UuYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxfaXNfcG9pbnRfaW5fc3Ryb2tlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IHVwIGV4dGVybnMuXG4gICAgUGF0aDJEID0gUGF0aF87XG4gIH0pKCk7XG59XG4iLCJpbXBvcnQgKiBhcyBDIGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IEV2ZW50ZWQgZnJvbSBcIi4vZXZlbnRlZFwiO1xuaW1wb3J0IEdGWCBmcm9tIFwiLi9nZnhcIjtcbmltcG9ydCBUaW1lciBmcm9tIFwiLi90aW1lclwiO1xuaW1wb3J0IFBvaW50ZXIgZnJvbSBcIi4vcG9pbnRlclwiO1xuaW1wb3J0IEdub2RlIGZyb20gXCIuL2dub2RlXCI7XG5pbXBvcnQgRlBTIGZyb20gXCIuL2Zwc1wiO1xuXG5pbXBvcnQgUG9seSBmcm9tIFwiLi9wb2x5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIEV2ZW50ZWQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdjYW52YXMnKTtcbiAgICB0aGlzLmdmeCA9IG5ldyBHRlgoY2FudmFzKTtcbiAgICB0aGlzLnRpbWVyID0gbmV3IFRpbWVyKCk7XG4gICAgdGhpcy5wb2ludGVyID0gbmV3IFBvaW50ZXIoKTtcbiAgICB0aGlzLnNjZW5lID0gbmV3IEdub2RlKCk7XG4gICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcblxuICAgIGlmKCBDLkRFQlVHICkge1xuICAgICAgdGhpcy5mcHMgPSBuZXcgRlBTKCk7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZGVidWcnKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlZ2lzdGVyX2V2ZW50cygpO1xuICAgIHRoaXMuaW5pdF9sb29wKCk7XG4gIH1cblxuICByZWdpc3Rlcl9ldmVudHMoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGV2ID0+IHtcbiAgICAgIHRoaXMuZ2Z4LnNldF9zaXplKCk7XG4gICAgfSk7XG5cbiAgICAvL3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgXyA9PiB7XG4gICAgLy8gIHRoaXMucGF1c2UoKTtcbiAgICAvL30pO1xuXG4gICAgLy93aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBfID0+IHtcbiAgICAvLyAgdGhpcy5yZXN1bWUoKTtcbiAgICAvL30pO1xuXG4gICB0aGlzLnBvaW50ZXIucmVnaXN0ZXJfZXZlbnRzKCk7XG5cbiAgICB0aGlzLm9uKCdwYXVzZScsIF8gPT4ge1xuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3BhdXNlZCcpO1xuICAgICAgLy8gUEFVU0UgTUVOVVxuICAgIH0pO1xuXG4gICAgdGhpcy5vbigncmVzdW1lJywgXyA9PiB7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgncGF1c2VkJyk7XG4gICAgICAvLyBLSUxMIFBBVVNFIE1FTlVcbiAgICB9KTtcblxuICAgIGlmKCBDLkRFQlVHICkge1xuICAgICAgdGhpcy5mcHMudGljKCk7XG4gICAgICB0aGlzLmZwcy5vbigndXBkYXRlJywgKGZwcywgbWluLCBtYXgpID0+IHtcbiAgICAgICAgbGV0IGZwc19kaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZnJhbWVzJyk7XG4gICAgICAgIGxldCBtaW5fZGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1pbicpO1xuICAgICAgICBsZXQgbWF4X2RpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYXgnKTtcblxuICAgICAgICBmcHNfZGl2LmlubmVySFRNTCA9IGBGUFM6ICR7ZnBzfWA7XG4gICAgICAgIG1pbl9kaXYuaW5uZXJIVE1MID0gYE1JTjogJHttaW59YDtcbiAgICAgICAgbWF4X2Rpdi5pbm5lckhUTUwgPSBgTUFYOiAke21heH1gO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaW5pdF9sb29wKCkge1xuICAgIHRoaXMudGltZXIuaW5pdCgpO1xuICAgIHRoaXMudGljKCk7XG4gIH1cblxuICBwYXVzZSgpIHtcbiAgICB0aGlzLmRpc3BhdGNoKCdwYXVzZScpO1xuICAgIHRoaXMucGF1c2VkID0gdHJ1ZTtcbiAgfVxuXG4gIHJlc3VtZSgpIHtcbiAgICB0aGlzLmRpc3BhdGNoKCdyZXN1bWUnKTtcbiAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xuICAgIHRoaXMuaW5pdF9sb29wKCk7XG4gIH1cblxuICB0aWMoKSB7XG4gICAgaWYoICF0aGlzLnBhdXNlZCApIHtcbiAgICAgIHRoaXMuZnJhbWVfcmVxdWVzdCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aW1lID0+IHtcbiAgICAgICAgdGhpcy50aW1lci50aW1lID0gdGltZTtcbiAgICAgICAgdGhpcy50aWMoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICB3aGlsZSggdGhpcy50aW1lci5hY2N1bXVsYXRvciA+PSBDLkZJWEVEX1VQREFURV9USU1FICkge1xuICAgICAgdGhpcy50aW1lci5hY2N1bXVsYXRvciAtPSBDLkZJWEVEX1VQREFURV9USU1FO1xuICAgICAgdGhpcy5maXhlZF91cGRhdGUoQy5GSVhFRF9VUERBVEVfVElNRSk7XG4gICAgfVxuXG4gICAgaWYoIEMuREVCVUcgKSB0aGlzLmZwcy5hZGRfZnJhbWUoKTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBsZXQgZ2Z4ID0gdGhpcy5nZng7XG4gICAgbGV0IGN0eCA9IGdmeC5jdHg7XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBnZngud2lkdGgsIGdmeC5oZWlnaHQpO1xuXG4gICAgdGhpcy5zY2VuZS5mb3JfZWFjaChnbm9kZSA9PiB7XG4gICAgICBnbm9kZS5vbl91cGRhdGUodGhpcywgdGhpcy50aW1lci5kdCk7XG4gICAgICBpZiggZ25vZGUucmVuZGVyICkgZ25vZGUucmVuZGVyKHRoaXMpO1xuXG4gICAgICAvKlxuICAgICAgdGhpcy5zY2VuZS5mb3JfZWFjaChnbm9kZTIgPT4ge1xuICAgICAgICBpZiggZ25vZGUgPT0gZ25vZGUyICkgcmV0dXJuO1xuICAgICAgICBpZiggZ25vZGUgaW5zdGFuY2VvZiBQb2x5ICYmIGdub2RlMiBpbnN0YW5jZW9mIFBvbHkgKSB7XG4gICAgICAgICAgbGV0IGlwcyA9IGdub2RlLmludGVyc2VjdChnbm9kZTIpO1xuICAgICAgICAgIGlwcy5mb3JFYWNoKHAgPT4ge1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyNmMDAnO1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4LmFyYyhwLngsIHAueSwgMiwgMCwgTWF0aC5QSSoyKTtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgICovXG5cbiAgICB9KTtcbiAgfVxuXG4gIGZpeGVkX3VwZGF0ZShkdCkge1xuICAgIHRoaXMuc2NlbmUuZm9yX2VhY2goZ25vZGUgPT4ge1xuICAgICAgZ25vZGUub25fZml4ZWRfdXBkYXRlKHRoaXMsIGR0KTtcbiAgICB9KTtcbiAgfVxuXG59XG4iLCJleHBvcnQgY29uc3QgREVCVUcgPSB0cnVlO1xuZXhwb3J0IGNvbnN0IEZJWEVEX1VQREFURV9USU1FID0gKDEgLyAxMjApICogMTAwMDsgLy8gNjBmcHNcblxuZXhwb3J0IGNvbnN0IEVQU0lMT04gPSBNYXRoLnBvdygyLCAtNTIpO1xuXG5leHBvcnQgY29uc3QgU0hJUF9TSE9UX1NQRUVEID0gLTAuNzU7XG5leHBvcnQgY29uc3QgU0hJUF9TSE9UX0lOVEVSVkFMID0gMjUwO1xuZXhwb3J0IGNvbnN0IFNIT1RfR1JBQ0VfWk9ORSA9IDUwO1xuIiwiaW1wb3J0ICogYXMgQyBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCBWZWMyIGZyb20gXCIuL3ZlYzJcIjtcbmltcG9ydCBTaG90IGZyb20gXCIuL3Nob3RcIjtcbmltcG9ydCBSaWdpZEJvZHkgZnJvbSBcIi4vcmlnaWQtYm9keVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbmVteSBleHRlbmRzIFJpZ2lkQm9keSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgLy8gTS0yNCAwIEwyNCAwIEwyNCAyIEwyNCAxNCBMMjAgMTQgTDIwIDQgTDQgMTAgTDIgMjAgTDAgMjAgTC0yIDIwIEwtNCAxMCBMLTIwIDQgTC0yMCAxNCBMLTI0IDE0IEwtMjQgMiBaXG4gICAgdGhpcy5wb2ludHMgPSBbXG4gICAgICBuZXcgVmVjMigtMjQsIDApLCBuZXcgVmVjMigyNCwgMCksIG5ldyBWZWMyKDI0LCAyKSwgbmV3IFZlYzIoMjQsIDE0KSwgbmV3IFZlYzIoMjAsIDE0KSwgbmV3IFZlYzIoMjAsIDQpLFxuICAgICAgbmV3IFZlYzIoNCwgMTApLCBuZXcgVmVjMigyLCAyMCksIG5ldyBWZWMyKDAsIDIwKSwgbmV3IFZlYzIoLTIsIDIwKSwgbmV3IFZlYzIoLTQsIDEwKSwgbmV3IFZlYzIoLTIwLCA0KSxcbiAgICAgIG5ldyBWZWMyKC0yMCwgMTQpLCBuZXcgVmVjMigtMjQsIDE0KSwgbmV3IFZlYzIoLTI0LCAyKVxuICAgIF07XG4gICAgdGhpcy5zdHJva2Vfc3R5bGUgPSAnaHNsKDM2MCwgNzUlLCA3NSUpJztcbiAgICB0aGlzLmZpbGxfc3R5bGUgPSAnaHNsYSgzNjAsIDc1JSwgNzUlLCAwLjUpJztcbiAgICB0aGlzLmxpbmVfd2lkdGggPSAyO1xuICAgIHRoaXMudXBkYXRlX3BhdGgoKTtcblxuICAgIHRoaXMubWFzcyA9IDEwO1xuICAgIHRoaXMuaGVhbHRoID0gMTA7XG4gICAgdGhpcy5hcm1vciA9IDEwO1xuXG4gIH1cblxuICBvbl91cGRhdGUoYXBwKSB7XG4gICAgaWYodGhpcy5oZWFsdGggPD0gMCkge1xuICAgICAgYXBwLnNjZW5lLnJlbW92ZV9jaGlsZCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBvbl9maXhlZF91cGRhdGUoYXBwKSB7XG4gICAgbGV0IGdmeCA9IGFwcC5nZng7XG4gICAgbGV0IGN0eCA9IGdmeC5jdHg7XG4gICAgLy8gQ29sbGlzaW9uIFN0dWZmXG4gICAgYXBwLnNjZW5lLmZvcl9lYWNoKG5vZGUgPT4ge1xuICAgICAgaWYoIG5vZGUgaW5zdGFuY2VvZiBTaG90ICkge1xuICAgICAgICBsZXQgaXBzID0gdGhpcy5pbnRlcnNlY3Qobm9kZSk7XG4gICAgICAgIGlmKCBpcHMubGVuZ3RoID4gMCApIHtcbiAgICAgICAgICBhcHAuc2NlbmUucmVtb3ZlX2NoaWxkKG5vZGUpO1xuICAgICAgICAgIHRoaXMuaGl0KDEwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEFJIFN0dWZmXG4gICAgdGhpcy5yb3RhdGlvbiArPSBNYXRoLlBJIC8gMjAwO1xuICB9XG5cblxuICBoaXQoZGFtYWdlKSB7XG4gICAgdGhpcy5oZWFsdGggLT0gZGFtYWdlIC8gdGhpcy5hcm1vcjtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgQyBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRlZCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZXZlbnRzID0ge307XG4gIH1cblxuICBvbihuYW1lLCBmbikge1xuICAgIGlmKCBmbiBpbnN0YW5jZW9mIEZ1bmN0aW9uICkge1xuICAgICAgdGhpcy5ldmVudHNbbmFtZV0gPSB0aGlzLmV2ZW50c1tuYW1lXSB8fCBbXTtcbiAgICAgIHRoaXMuZXZlbnRzW25hbWVdLnB1c2goZm4pO1xuXG4gICAgfVxuICB9XG5cbiAgb2ZmKG5hbWUsIGZuKSB7XG4gICAgdGhpcy5ldmVudHNbbmFtZV0gPSB0aGlzLmV2ZW50c1tuYW1lXTtcbiAgICBsZXQgZXYgPSB0aGlzLmV2ZW50c1tuYW1lXTtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBpZiggZXYgJiYgKGluZGV4ID0gZXYuaW5kZXhPZihmbikpID4gLTEgKVxuICAgICAgZXYuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuXG4gIGRpc3BhdGNoKG5hbWUsIC4uLmFyZ3MpIHtcbiAgICBsZXQgZXYgPSB0aGlzLmV2ZW50c1tuYW1lXTtcbiAgICBpZihldikge1xuICAgICAgZXYuZm9yRWFjaChmbiA9PiB7XG4gICAgICAgIGZuLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIEMgZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgRXZlbnRlZCBmcm9tIFwiLi9ldmVudGVkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZQUyBleHRlbmRzIEV2ZW50ZWR7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5mcmFtZXMgPSAwO1xuICAgIHRoaXMubWluID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICB0aGlzLm1heCA9IDA7XG4gICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcbiAgfVxuXG4gIGFkZF9mcmFtZSgpIHtcbiAgICB0aGlzLmZyYW1lcysrO1xuICB9XG5cbiAgdGljKCkge1xuICAgIGlmKCB0aGlzLmZyYW1lcyA8IHRoaXMubWluICYmIHRoaXMuZnJhbWVzID4gMCApIHRoaXMubWluID0gdGhpcy5mcmFtZXM7XG4gICAgaWYoIHRoaXMuZnJhbWVzID4gdGhpcy5tYXggKSB0aGlzLm1heCA9IHRoaXMuZnJhbWVzO1xuICAgIHRoaXMuZGlzcGF0Y2goJ3VwZGF0ZScsIHRoaXMuZnJhbWVzLCB0aGlzLm1pbiwgdGhpcy5tYXgpO1xuICAgIHRoaXMuZnJhbWVzID0gMDtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KF8gPT4geyB0aGlzLnRpYygpIH0sIDEwMDApO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBDIGZyb20gXCIuL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHRlgge1xuICBjb25zdHJ1Y3RvcihjYW52YXMpIHtcbiAgICB0aGlzLmNudiA9IGNhbnZhcztcbiAgICB0aGlzLmN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgbGV0IGRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gICAgbGV0IGJzcHIgPSB0aGlzLmN0eC53ZWJraXRCYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8XG4gICAgICAgICAgICAgICB0aGlzLmN0eC5tb3pCYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8XG4gICAgICAgICAgICAgICB0aGlzLmN0eC5tc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHxcbiAgICAgICAgICAgICAgIHRoaXMuY3R4Lm9CYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8XG4gICAgICAgICAgICAgICB0aGlzLmN0eC5iYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8IDE7XG4gICAgdGhpcy5yYXRpbyA9IGRwciAvIGJzcHI7XG4gICAgdGhpcy5zZXRfc2l6ZSgpO1xuICB9XG5cbiAgc2V0X3NpemUoKSB7XG4gICAgdGhpcy5jbnYud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCAqIHRoaXMucmF0aW87XG4gICAgdGhpcy5jbnYuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0ICogdGhpcy5yYXRpbztcbiAgfVxuXG4gIHNjYWxlKCkge1xuICAgIHRoaXMuY3R4LnNjYWxlKHRoaXMucmF0aW8sIHRoaXMucmF0aW8pO1xuICB9XG5cbiAgZ2V0IHdpZHRoKCkgeyByZXR1cm4gdGhpcy5jbnYud2lkdGggfTtcbiAgZ2V0IGhlaWdodCgpIHsgcmV0dXJuIHRoaXMuY252LmhlaWdodCB9O1xufVxuIiwiaW1wb3J0ICogYXMgQyBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCBFdmVudGVkIGZyb20gXCIuL2V2ZW50ZWRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR25vZGUgZXh0ZW5kcyBFdmVudGVkIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gIH1cblxuICBhZGRfY2hpbGQoY2hpbGQpIHtcbiAgICBpZiggdGhpcy5jaGlsZHJlbi5pbmRleE9mKGNoaWxkKSA8IDAgKVxuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgfVxuXG4gIHJlbW92ZV9jaGlsZChjaGlsZCkge1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGlmKChpbmRleCA9IHRoaXMuY2hpbGRyZW4uaW5kZXhPZihjaGlsZCkpID49IDApIHtcbiAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICBmb3JfZWFjaChmbikge1xuICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCwgLi4ucmVzdCkge1xuICAgICAgZm4uY2FsbCh0aGlzLCBjaGlsZCwgLi4ucmVzdCk7XG4gICAgICBjaGlsZC5mb3JfZWFjaChmbik7XG4gICAgfSk7XG4gIH1cblxuICBvbl91cGRhdGUoYXBwKXt9XG4gIG9uX2ZpeGVkX3VwZGF0ZShhcHApe31cbn1cbiIsImltcG9ydCBcImNhbnZhcy01LXBvbHlmaWxsXCI7XG5cbmltcG9ydCBBcHAgZnJvbSBcIi4vYXBwXCI7XG5pbXBvcnQgU2hpcCBmcm9tIFwiLi9zaGlwXCI7XG5pbXBvcnQgRW5lbXkgZnJvbSBcIi4vZW5lbXlcIjtcblxudmFyIGFwcCA9IG5ldyBBcHAoKTtcblxuYXBwLnNjZW5lLmFkZF9jaGlsZCggbmV3IFNoaXAoKSApO1xuXG52YXIgZW5lbXlfMSA9IG5ldyBFbmVteSgpO1xuZW5lbXlfMS5wb3NpdGlvbi54ID0gYXBwLmdmeC53aWR0aCAvIDI7XG5lbmVteV8xLnBvc2l0aW9uLnkgPSAyNSAqIGFwcC5nZngucmF0aW87XG5hcHAuc2NlbmUuYWRkX2NoaWxkKCBlbmVteV8xICk7XG5cbi8qKiBGT1IgQ09OU09MRSAqKi9cbmltcG9ydCBWZWMyIGZyb20gXCIuL3ZlYzJcIjtcbndpbmRvdy5WZWMyID0gVmVjMjtcbmltcG9ydCBTZWdtZW50IGZyb20gXCIuL3NlZ21lbnRcIjtcbndpbmRvdy5TZWdtZW50ID0gU2VnbWVudDtcbiIsImltcG9ydCAqIGFzIEMgZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgRXZlbnRlZCBmcm9tIFwiLi9ldmVudGVkXCI7XG5pbXBvcnQgVmVjMiBmcm9tIFwiLi92ZWMyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvaW50ZXIgZXh0ZW5kcyBFdmVudGVkIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9wb3NpdGlvbiA9IG5ldyBWZWMyKCk7XG4gICAgdGhpcy5kb3duXzAgPSBmYWxzZTtcbiAgICB0aGlzLmRvd25fMSA9IGZhbHNlO1xuXG4gICAgdGhpcy50b3VjaF8wID0gbnVsbDtcbiAgICB0aGlzLnRvdWNoXzEgPSBudWxsO1xuXG4gICAgbGV0IGRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gICAgLypsZXQgYnNwciA9IHRoaXMuY3R4LndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHxcbiAgICAgICAgICAgICAgIHRoaXMuY3R4Lm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHxcbiAgICAgICAgICAgICAgIHRoaXMuY3R4Lm1zQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxuICAgICAgICAgICAgICAgdGhpcy5jdHgub0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHxcbiAgICAgICAgICAgICAgIHRoaXMuY3R4LmJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHwgMTsqL1xuICAgIHRoaXMucmF0aW8gPSBkcHI7XG4gIH1cblxuICBnZXQgcG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBWZWMyKHRoaXMuX3Bvc2l0aW9uLnggKiB0aGlzLnJhdGlvLCB0aGlzLl9wb3NpdGlvbi55ICogdGhpcy5yYXRpbyk7XG4gIH1cblxuICByZWdpc3Rlcl9ldmVudHMoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ID0+IHtcbiAgICAgIGlmKCBldi5idXR0b24gPT0gMCApIHtcbiAgICAgICAgdGhpcy5kb3duXzAgPSB0cnVlO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKCdkb3duJywgMCk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKCBldi5idXR0b24gPT0gMSB8fCBldi5idXR0b24gPT0gMiApIHtcbiAgICAgICAgdGhpcy5kb3duXzEgPSB0cnVlO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKCdkb3duJywgMSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9wb3NpdGlvbi54ID0gZXYucGFnZVg7XG4gICAgICB0aGlzLl9wb3NpdGlvbi55ID0gZXYucGFnZVk7XG4gICAgfSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGV2ID0+IHtcbiAgICAgIGlmKCBldi5idXR0b24gPT0gMCkge1xuICAgICAgICB0aGlzLmRvd25fMCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKCd1cCcsIDApO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiggZXYuYnV0dG9uID09IDEgfHwgZXYuYnV0dG9uID09IDIgKSB7XG4gICAgICAgIHRoaXMuZG93bl8xID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goJ3VwJywgMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZXYgPT4ge1xuICAgICAgdGhpcy5fcG9zaXRpb24ueCA9IGV2LnBhZ2VYO1xuICAgICAgdGhpcy5fcG9zaXRpb24ueSA9IGV2LnBhZ2VZO1xuICAgICAgdGhpcy5kaXNwYXRjaCgnbW92ZScpO1xuICAgIH0pO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBldiA9PiB7XG4gICAgICB0aGlzLnRvdWNoXzAgPSBldi50b3VjaGVzWzBdO1xuICAgICAgdGhpcy50b3VjaF8xID0gZXYudG91Y2hlc1sxXTtcblxuICAgICAgbGV0IHRvdWNoZXMgPSBldi5jaGFuZ2VkVG91Y2hlcztcblxuICAgICAgZm9yKCB2YXIgaT0wLCBpaT10b3VjaGVzLmxlbmd0aDsgaTxpaTsgaSsrICkge1xuICAgICAgICBpZiggdG91Y2hlc1tpXS5pZGVudGlmaWVyID09ICh0aGlzLnRvdWNoXzB8fHt9KS5pZGVudGlmaWVyICkge1xuICAgICAgICAgIHRoaXMuZG93bl8wID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoKCdkb3duJywgMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiggdG91Y2hlc1tpXS5pZGVudGlmaWVyID09ICh0aGlzLnRvdWNoXzF8fHt9KS5pZGVudGlmaWVyICkge1xuICAgICAgICAgIHRoaXMuZG93bl8xID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoKCdkb3duJywgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX3Bvc2l0aW9uLnggPSB0aGlzLnRvdWNoXzAucGFnZVg7XG4gICAgICB0aGlzLl9wb3NpdGlvbi55ID0gdGhpcy50b3VjaF8wLnBhZ2VZO1xuICAgIH0pO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgZXYgPT4ge1xuICAgICAgbGV0IHRvdWNoZXMgPSBldi5jaGFuZ2VkVG91Y2hlcztcbiAgICAgIGZvciggdmFyIGk9MCwgaWk9dG91Y2hlcy5sZW5ndGg7IGk8aWk7IGkrKyApIHtcbiAgICAgICAgaWYoIHRvdWNoZXNbaV0gLmlkZW50aWZpZXIgPT0gKHRoaXMudG91Y2hfMHx8e30pLmlkZW50aWZpZXIgKSB7XG4gICAgICAgICAgdGhpcy50b3VjaF8wID0gdG91Y2hlc1tpXTtcbiAgICAgICAgICB0aGlzLmRvd25fMCA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuZGlzcGF0Y2goJ3VwJywgMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiggdG91Y2hlc1tpXS5pZGVudGlmaWVyID09ICh0aGlzLnRvdWNoXzF8fHt9KS5pZGVudGlmaWVyICkge1xuICAgICAgICAgIHRoaXMudG91Y2hfMSA9IHRvdWNoZXNbaV07XG4gICAgICAgICAgdGhpcy5kb3duXzEgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoKCd1cCcsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZXYgPT4ge1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGxldCB0b3VjaGVzID0gZXYuY2hhbmdlZFRvdWNoZXM7XG4gICAgICBmb3IoIHZhciBpPTAsIGlpPXRvdWNoZXMubGVuZ3RoOyBpPGlpOyBpKysgKSB7XG4gICAgICAgIGlmKCB0b3VjaGVzW2ldLmlkZW50aWZpZXIgPT0gKHRoaXMudG91Y2hfMHx8e30pLmlkZW50aWZpZXIgKSB7XG4gICAgICAgICAgdGhpcy50b3VjaF8wID0gdG91Y2hlc1tpXTtcbiAgICAgICAgICB0aGlzLl9wb3NpdGlvbi54ID0gdGhpcy50b3VjaF8wLnBhZ2VYO1xuICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uLnkgPSB0aGlzLnRvdWNoXzAucGFnZVk7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaCgnbW92ZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoIHRvdWNoZXNbaV0uaWRlbnRpZmllciA9PSAodGhpcy50b3VjaF8xfHx7fSkuaWRlbnRpZmVyICkge1xuICAgICAgICAgIHRoaXMudG91Y2hfMSA9IHRvdWNoZXNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBDIGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IFJlbmRlcmFibGUgZnJvbSBcIi4vcmVuZGVyYWJsZVwiO1xuaW1wb3J0IFZlYzIgZnJvbSBcIi4vdmVjMlwiO1xuaW1wb3J0IFNlZ21lbnQgZnJvbSBcIi4vc2VnbWVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2x5IGV4dGVuZHMgUmVuZGVyYWJsZSB7XG5cbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnBvaW50cyA9IG9wdHMucG9pbnRzIHx8IFtdO1xuICAgIHRoaXMucG9zaXRpb24gPSBvcHRzLnBvc2l0aW9uIHx8IG5ldyBWZWMyKCk7XG4gICAgdGhpcy5yb3RhdGlvbiA9IG9wdHMucm90YXRpb24gfHwgMDtcbiAgICB0aGlzLnNjYWxlID0gb3B0cy5zY2FsZSB8fCAxO1xuICAgIC8vIFRPRE86IFVwZGF0ZSB0byBpbmNsdWRlIGJhY2tpbmcgc3RvcmUgc2l6ZVxuICAgIHRoaXMuaGlkcGlfc2NhbGUgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuXG4gICAgdGhpcy5maWxsX3N0eWxlID0gb3B0cy5maWxsX3N0eWxlIHx8IG51bGw7XG4gICAgdGhpcy5zdHJva2Vfc3R5bGUgPSBvcHRzLnN0cm9rZV9zdHlsZSB8fCBudWxsO1xuICAgIHRoaXMubGluZV93aWR0aCA9IG9wdHMubGluZV93aWR0aCB8fCBudWxsO1xuXG4gICAgdGhpcy5wYXRoID0gbmV3IFBhdGgyRCgpO1xuICAgIHRoaXMudXBkYXRlX3BhdGgoKTtcbiAgfVxuXG4gIHVwZGF0ZV9wYXRoKCkge1xuICAgIGlmKCB0aGlzLnBvaW50cy5sZW5ndGggKSB7XG4gICAgICBsZXQgbGFzdF9wb2ludCA9IHRoaXMucG9pbnRzW3RoaXMucG9pbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgdGhpcy5wYXRoLm1vdmVUbyggbGFzdF9wb2ludC54LCBsYXN0X3BvaW50LnkgKTtcbiAgICAgIHRoaXMucG9pbnRzLmZvckVhY2goIHBvaW50ID0+IHtcbiAgICAgICAgdGhpcy5wYXRoLmxpbmVUbyhwb2ludC54LCBwb2ludC55KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wYXRoLmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfVxuXG5cbiAgZ2V0IHNlZ21lbnRzKCkge1xuICAgIGxldCBzZWdtZW50cyA9IFtdO1xuICAgIHZhciBsYXN0X3BvaW50ID0gdGhpcy5wb2ludHNbdGhpcy5wb2ludHMubGVuZ3RoIC0gMV07XG4gICAgdGhpcy5wb2ludHMuZm9yRWFjaCggcG9pbnQgPT4ge1xuICAgICAgc2VnbWVudHMucHVzaCggbmV3IFNlZ21lbnQobGFzdF9wb2ludCwgcG9pbnQpICk7XG4gICAgICBsYXN0X3BvaW50ID0gcG9pbnQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlZ21lbnRzO1xuICB9XG5cbiAgc3RhdGljIGludGVyc2VjdChhLCBiKSB7XG4gICAgbGV0IGFfc2VncyA9IGEuc2VnbWVudHM7XG4gICAgbGV0IGJfc2VncyA9IGIuc2VnbWVudHM7XG4gICAgbGV0IGlwcyA9IFtdO1xuICAgIGFfc2Vncy5mb3JFYWNoKCBhX3NlZyA9PiB7XG4gICAgICBiX3NlZ3MuZm9yRWFjaCggYl9zZWcgPT4ge1xuICAgICAgICBsZXQgaXAgPSBTZWdtZW50LmludGVyc2VjdF9zZWdfc2VnKGFfc2VnLnRyYW5zZm9ybShhKSwgYl9zZWcudHJhbnNmb3JtKGIpKTtcbiAgICAgICAgaWYgKCBpcCApIGlwcy5wdXNoKGlwKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBpcHM7XG4gIH1cbiAgaW50ZXJzZWN0KGIpIHsgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuaW50ZXJzZWN0KHRoaXMsIGIpOyB9XG5cbiAgcmVuZGVyKGFwcCkge1xuICAgIGxldCBnZnggPSBhcHAuZ2Z4O1xuICAgIGxldCBjdHggPSBnZnguY3R4O1xuXG4gICAgY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5zdHJva2Vfc3R5bGU7XG4gICAgY3R4LmxpbmVXaWR0aCA9IHRoaXMubGluZV93aWR0aCAvIGdmeC5yYXRpbztcbiAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5maWxsX3N0eWxlO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnRyYW5zbGF0ZSggdGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnkgKTtcbiAgICBjdHgucm90YXRlKCB0aGlzLnJvdGF0aW9uICk7XG4gICAgY3R4LnNjYWxlKCB0aGlzLnNjYWxlICogdGhpcy5oaWRwaV9zY2FsZSwgdGhpcy5zY2FsZSAqIHRoaXMuaGlkcGlfc2NhbGUgKTtcbiAgICBpZiggdGhpcy5zdHJva2Vfc3R5bGUgKSBjdHguc3Ryb2tlKHRoaXMucGF0aCk7XG4gICAgaWYoIHRoaXMuZmlsbF9zdHlsZSApIGN0eC5maWxsKHRoaXMucGF0aCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcblxuICAgIC8qdGhpcy5wb2ludHMuZm9yRWFjaChwb2ludCA9PiB7XG4gICAgICBsZXQgdCA9IHBvaW50LnRyYW5zZm9ybSh0aGlzKTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjZjAwJztcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5hcmModC54LCB0LnksIDIsIDAsIE1hdGguUEkqMik7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfSk7Ki9cbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgQyBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCBHbm9kZSBmcm9tIFwiLi9nbm9kZVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlcmFibGUgZXh0ZW5kcyBHbm9kZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICByZW5kZXIoKSB7fVxufVxuIiwiaW1wb3J0ICogYXMgQyBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCBQb2x5IGZyb20gXCIuL3BvbHlcIjtcbmltcG9ydCBWZWMyIGZyb20gXCIuL3ZlYzJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmlnaWRCb2R5IGV4dGVuZHMgUG9seSB7XG5cbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG5cbiAgICB0aGlzLnZlbG9jaXR5ID0gb3B0cy52ZWxvY2l0eSB8fCBuZXcgVmVjMigpO1xuICAgIHRoaXMuYW5ndWxhcl92ZWxvY2l0eSA9IG9wdHMuYW5ndWxhcl92ZWxvY2l0eSB8fCAwO1xuICAgIHRoaXMubWFzcyA9IG9wdHMubWFzcyA9PT0gdW5kZWZpbmVkID8gMSA6IG9wdHMubWFzcztcbiAgICB0aGlzLmZyaWN0aW9uID0gb3B0cy5mcmljdGlvbiA9PT0gdW5kZWZpbmVkID8gMSA6IG9wdHMuZnJpY3Rpb247XG4gICAgdGhpcy5yZXN0aXR1dGlvbiA9IG9wdHMucmVzdGl0dXRpb24gfHwgMDtcbiAgfVxuXG4gIC8vIFJldHVybnMgVmVjMiB3aXRoIHBlbmV0cmF0aW9uXG4gIHN0YXRpYyBwZW5ldHJhdGUoYSwgYikge1xuXG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIEMgZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgVmVjMiBmcm9tIFwiLi92ZWMyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlZ21lbnQge1xuICBjb25zdHJ1Y3RvcihhID0gbmV3IFZlYzIoKSwgYiA9IG5ldyBWZWMyKCkpIHtcbiAgICB0aGlzLmEgPSBhO1xuICAgIHRoaXMuYiA9IGI7XG4gIH1cblxuICBzdGF0aWMgZGlyZWN0aW9uKHMpIHtcbiAgICByZXR1cm4gcy5iLnN1YnRyYWN0KCBzLmEgKS5ub3JtYWxpemUoKTtcbiAgfVxuICBkaXJlY3Rpb24oKSB7IHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmRpcmVjdGlvbih0aGlzKTsgfVxuXG4gIHN0YXRpYyBpc19wb2ludF9vbl9saW5lKHMsIHYpIHtcbiAgICBsZXQgZGlyZWN0aW9uID0gcy5kaXJlY3Rpb24oKTtcbiAgICBpZiggZGlyZWN0aW9uLnggPT0gMCApIHJldHVybiB2LnggPT0gcy5hLng7XG4gICAgaWYoIGRpcmVjdGlvbi55ID09IDAgKSByZXR1cm4gdi55ID09IHMuYS55O1xuXG4gICAgbGV0IE94ID0gcy5hLng7XG4gICAgbGV0IE95ID0gcy5hLnk7XG4gICAgbGV0IER4ID0gZGlyZWN0aW9uLng7XG4gICAgbGV0IER5ID0gZGlyZWN0aW9uLnk7XG5cbiAgICBsZXQgbSA9IER5IC8gRHg7XG4gICAgbGV0IGIgPSBPeSAtICgoT3ggLSBEeSkgLyBEeCk7XG4gICAgbGV0IGx5ID0gbSAqIHYueCArIGI7XG4gICAgcmV0dXJuIHYueSAtIGx5IDw9IEMuRVBTSUxPTjtcbiAgfVxuICBpc19wb2ludF9vbl9saW5lKHYpIHsgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuaXNfcG9pbnRfb25fbGluZSh0aGlzLCB2KTsgfVxuXG4gIHN0YXRpYyBpc19wb2ludF9vbl9zZWdtZW50KHMsIHYpIHtcbiAgICByZXR1cm4gdGhpcy5pc19wb2ludF9vbl9saW5lKHMsIHYpICYmXG4gICAgKFxuICAgICAgKChzLmEueCA8PSB2LnggJiYgdi54IDw9IHMuYi54KSB8fCAocy5hLnggPj0gdi54ICYmIHYueCA+PSBzLmIueCkpICYmXG4gICAgICAoKHMuYS55IDw9IHYueSAmJiB2LnkgPD0gcy5iLnkpIHx8IChzLmEueSA+PSB2LnkgJiYgdi55ID49IHMuYi55KSlcbiAgICApO1xuICB9XG4gIGlzX3BvaW50X29uX3NlZ21lbnQodikgeyByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5pc19wb2ludF9vbl9zZWdtZW50KHRoaXMsIHYpOyB9XG5cbiAgc3RhdGljIGludGVyc2VjdF9saW5lX2xpbmUoYSwgYikge1xuICAgIGxldCBBT3ggPSBhLmEueDtcbiAgICBsZXQgQU95ID0gYS5hLnk7XG4gICAgbGV0IEFkID0gYS5kaXJlY3Rpb24oKTtcbiAgICBsZXQgQUR4ID0gQWQueDtcbiAgICBsZXQgQUR5ID0gQWQueTtcblxuICAgIGxldCBCT3ggPSBiLmEueDtcbiAgICBsZXQgQk95ID0gYi5hLnk7XG4gICAgbGV0IEJkID0gYi5kaXJlY3Rpb24oKTtcbiAgICBsZXQgQkR4ID0gQmQueDtcbiAgICBsZXQgQkR5ID0gQmQueTtcblxuICAgIC8vIFBhcmFsbGVsXG4gICAgaWYoIEFEeCAtIEJEeCA8PSBDLkVQU0lMT04gJiYgQUR5IC0gQkR5IDw9IEMuRVBTSUxPTiApIHJldHVybiBudWxsO1xuXG4gICAgbGV0IEFtID0gQUR5IC8gQUR4O1xuICAgIGxldCBBYiA9IEFPeSAtICgoQU94ICogQUR5KSAvIEFEeCk7XG4gICAgbGV0IEJtID0gQkR5IC8gQkR4O1xuICAgIGxldCBCYiA9IEJPeSAtICgoQk94ICogQkR5KSAvIEJEeCk7XG4gICAgdmFyIG0gPSBudWxsO1xuICAgIHZhciB4ID0gbnVsbDtcbiAgICB2YXIgeSA9IG51bGw7XG5cbiAgICBpZiAoIEFEeCA9PSAwICkgeCA9IEFPeDtcbiAgICBlbHNlIGlmKCBCRHggPT0gMCApIHggPSBCT3g7XG4gICAgZWxzZSB4ID0gKEJiIC0gQWIpIC8gKEFtIC0gQm0pO1xuXG4gICAgaWYgKCBBRHkgPT0gMCApIHkgPSBBT3k7XG4gICAgZWxzZSBpZiAoIEJEeSA9PSAwICkgeSA9IEJPeTtcbiAgICBlbHNlIHkgPSAoQW0gKiB4ICsgQWIpIHx8IChCbSAqIHggKyBCYik7XG5cbiAgICByZXR1cm4gbmV3IFZlYzIoeCwgeSk7XG4gIH1cbiAgaW50ZXJzZWN0X2xpbmVfbGluZShiKSB7IHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmludGVyc2VjdF9saW5lX2xpbmUodGhpcywgYik7IH1cblxuICBzdGF0aWMgaW50ZXJzZWN0X3NlZ19zZWcoYSwgYikge1xuICAgIGxldCBpcCA9IHRoaXMuaW50ZXJzZWN0X2xpbmVfbGluZShhLCBiKTtcbiAgICBpZiggaXAgJiYgdGhpcy5pc19wb2ludF9vbl9zZWdtZW50KGEsIGlwKSAmJiB0aGlzLmlzX3BvaW50X29uX3NlZ21lbnQoYiwgaXApICkge1xuICAgICAgcmV0dXJuIGlwO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpbnRlcnNlY3Rfc2VnX3NlZyhiKSB7IHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmludGVyc2VjdF9zZWdfc2VnKHRoaXMsIGIpOyB9XG5cbiAgc3RhdGljIHRyYW5zZm9ybShzLCB0KSB7XG4gICAgcmV0dXJuIG5ldyBzLmNvbnN0cnVjdG9yKHMuYS50cmFuc2Zvcm0odCksIHMuYi50cmFuc2Zvcm0odCkpO1xuICB9XG4gIHRyYW5zZm9ybSh0KSB7IHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRyYW5zZm9ybSh0aGlzLCB0KTsgfVxuXG59XG4iLCJpbXBvcnQgKiBhcyBDIGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IFZlYzIgZnJvbSBcIi4vdmVjMlwiO1xuaW1wb3J0IFNob3QgZnJvbSBcIi4vc2hvdFwiO1xuaW1wb3J0IFJpZ2lkQm9keSBmcm9tIFwiLi9yaWdpZC1ib2R5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoaXAgZXh0ZW5kcyBSaWdpZEJvZHkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubGluZV93aWR0aCA9IDI7XG4gICAgdGhpcy5zdHJva2Vfc3R5bGUgPSBcImhzbCgyMjUsIDEwMCUsIDc1JSlcIjtcbiAgICAvLyBNLTE2IDM2IEwwIDI4IEwxNiAzNiBMMCAwIFpcbiAgICB0aGlzLnBvaW50cyA9IFtuZXcgVmVjMigtMTYsIDM2KSwgbmV3IFZlYzIoMCwgMjgpLCBuZXcgVmVjMigxNiwgMzYpLCBuZXcgVmVjMigwLCAwKV07XG4gICAgdGhpcy51cGRhdGVfcGF0aCgpO1xuXG4gICAgdGhpcy5zaG90X2ludGVydmFsID0gQy5TSElQX1NIT1RfSU5URVJWQUw7XG4gICAgdGhpcy5zaG90X2Nsb2NrID0gMDtcbiAgfVxuXG4gIG9uX3VwZGF0ZShhcHApIHtcbiAgICB0aGlzLnBvc2l0aW9uLnggPSBhcHAucG9pbnRlci5wb3NpdGlvbi54O1xuICAgIHRoaXMucG9zaXRpb24ueSA9IGFwcC5nZnguaGVpZ2h0IC0gKDc1ICogYXBwLmdmeC5yYXRpbyk7XG4gIH1cblxuICBvbl9maXhlZF91cGRhdGUoYXBwLCBkdCkge1xuICAgIGlmKCBhcHAucG9pbnRlci5kb3duXzAgKSB7XG4gICAgICBpZiggdGhpcy5zaG90X2Nsb2NrID09IDAgfHwgdGhpcy5zaG90X2Nsb2NrID49IHRoaXMuc2hvdF9pbnRlcnZhbCApIHtcbiAgICAgICAgdGhpcy5zaG90X2Nsb2NrIC09IHRoaXMuc2hvdF9pbnRlcnZhbDtcbiAgICAgICAgaWYoIHRoaXMuc2hvdF9jbG9jayA8IDAgKSB0aGlzLnNob3RfY2xvY2sgPSAwO1xuXG4gICAgICAgIGxldCBzaG90ID0gbmV3IFNob3Qoe1xuICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLnBvc2l0aW9uLmNsb25lKCksXG4gICAgICAgICAgdmVsb2NpdHk6IG5ldyBWZWMyKDAsIEMuU0hJUF9TSE9UX1NQRUVEKSxcbiAgICAgICAgICBmaWxsX3N0eWxlOiAnaHNsKDIyNSwgMTAwJSwgNzUlKSdcbiAgICAgICAgfSk7XG4gICAgICAgIGFwcC5zY2VuZS5hZGRfY2hpbGQoc2hvdCk7XG5cbiAgICAgICAgdGhpcy5zaG90X2Nsb2NrICs9IGR0O1xuICAgICAgfVxuICAgICAgZWxzZVxuICAgICAge1xuICAgICAgICB0aGlzLnNob3RfY2xvY2sgKz0gZHQ7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5zaG90X2Nsb2NrID0gMDtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIEMgZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgUmlnaWRCb2R5IGZyb20gXCIuL3JpZ2lkLWJvZHlcIlxuaW1wb3J0IFZlYzIgZnJvbSBcIi4vdmVjMlwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaG90IGV4dGVuZHMgUmlnaWRCb2R5IHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cyk7XG5cbiAgICBsZXQgaW50ZXJpb3JfYW5nbGUgPSBNYXRoLlBJIC8gNDtcbiAgICB2YXIgbWFzdGVyX3BvaW50ID0gbmV3IFZlYzIoTWF0aC5jb3MoTWF0aC5QSS84KSAqIDgsIE1hdGguc2luKE1hdGguUEkvOCkgKiA4KTtcbiAgICBmb3IoIHZhciBpPTAsIGlpPTg7IGk8aWk7IGkrKyApIHtcbiAgICAgIHRoaXMucG9pbnRzLnB1c2gobWFzdGVyX3BvaW50LmNsb25lKCkpO1xuICAgICAgdmFyIHggPSBtYXN0ZXJfcG9pbnQueCAqIE1hdGguY29zKGludGVyaW9yX2FuZ2xlKSAtIG1hc3Rlcl9wb2ludC55ICogTWF0aC5zaW4oaW50ZXJpb3JfYW5nbGUpO1xuICAgICAgdmFyIHkgPSBtYXN0ZXJfcG9pbnQueCAqIE1hdGguc2luKGludGVyaW9yX2FuZ2xlKSArIG1hc3Rlcl9wb2ludC55ICogTWF0aC5jb3MoaW50ZXJpb3JfYW5nbGUpO1xuICAgICAgbWFzdGVyX3BvaW50LnggPSB4O1xuICAgICAgbWFzdGVyX3BvaW50LnkgPSB5O1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlX3BhdGgoKTtcbiAgfVxuXG4gIG9uX3VwZGF0ZShhcHApIHtcbiAgICBsZXQgZ2Z4ID0gYXBwLmdmeDtcbiAgICBpZihcbiAgICAgIHRoaXMucG9zaXRpb24ueCArIEMuU0hPVF9HUkFDRV9aT05FIDwgMCB8fFxuICAgICAgdGhpcy5wb3NpdGlvbi54IC0gQy5TSE9UX0dSQUNFX1pPTkUgPiBnZngud2lkdGggfHxcbiAgICAgIHRoaXMucG9zaXRpb24ueSArIEMuU0hPVF9HUkFDRV9aT05FIDwgMCB8fFxuICAgICAgdGhpcy5wb3NpdGlvbi55IC0gQy5TSE9UX0dSQUNFX1pPTkUgPiBnZnguaGVpZ2h0XG4gICAgKSBhcHAuc2NlbmUucmVtb3ZlX2NoaWxkKHRoaXMpO1xuICB9XG5cbiAgb25fZml4ZWRfdXBkYXRlKGFwcCwgZHQpIHtcbiAgICB0aGlzLnBvc2l0aW9uLnggKz0gdGhpcy52ZWxvY2l0eS54ICogZHQgKiBhcHAuZ2Z4LnJhdGlvO1xuICAgIHRoaXMucG9zaXRpb24ueSArPSB0aGlzLnZlbG9jaXR5LnkgKiBkdCAqIGFwcC5nZngucmF0aW87XG4gIH1cblxufVxuIiwiaW1wb3J0ICogYXMgQyBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl90aW1lID0gMDtcbiAgICB0aGlzLmR0ID0gMDtcbiAgICB0aGlzLmFjY3VtdWxhdG9yID0gMDtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpbWUgPT4ge1xuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgfSk7XG4gIH1cblxuICBnZXQgdGltZSgpIHsgcmV0dXJuIHRoaXMuX3RpbWU7IH1cbiAgc2V0IHRpbWUodmFsKSB7XG4gICAgdGhpcy5kdCA9IHZhbCAtIHRoaXMuX3RpbWU7XG4gICAgdGhpcy5hY2N1bXVsYXRvciArPSB0aGlzLmR0O1xuICAgIHRoaXMuX3RpbWUgPSB2YWw7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIEMgZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZlYzIge1xuICBjb25zdHJ1Y3Rvcih4LCB5KSB7XG4gICAgdGhpcy5kYXRhID0gW3h8fDAsIHl8fDBdO1xuICB9XG5cbiAgZ2V0IHgoKSB7IHJldHVybiB0aGlzLmRhdGFbMF07IH1cbiAgc2V0IHgodmFsKSB7IHRoaXMuZGF0YVswXSA9IHZhbDsgfVxuXG4gIGdldCB5KCkgeyByZXR1cm4gdGhpcy5kYXRhWzFdOyB9XG4gIHNldCB5KHZhbCkgeyB0aGlzLmRhdGFbMV0gPSB2YWw7IH1cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFZlYzIodGhpcy54LCB0aGlzLnkpO1xuICB9XG5cbiAgc3RhdGljIHBlcnAodikge1xuICAgIHJldHVybiBuZXcgVmVjMigtdi55LCB2LngpO1xuICB9XG4gIHBlcnAoKSB7IHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnBlcnAodGhpcyk7IH1cblxuICBzdGF0aWMgZG90KGEsIGIpIHtcbiAgICByZXR1cm4gYS54ICogYi54ICsgYS55ICogYi55O1xuICB9XG4gIGRvdChiKSB7IHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmRvdCh0aGlzLCBiKTsgfVxuXG4gIHN0YXRpYyBjcm9zcyhhLCBiKSB7XG4gICAgcmV0dXJuIGEueCAqIGIueSAtIGEueSAtIGIueDtcbiAgfVxuICBjcm9zcyhiKSB7IHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNyb3NzKHRoaXMsIGIpOyB9XG5cbiAgc3RhdGljIGxlblNxKHYpIHtcbiAgICByZXR1cm4gdi54ICogdi54ICsgdi55ICogdi55O1xuICB9XG4gIGxlblNxKCkgeyByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5sZW5TcSh0aGlzKTsgfVxuXG4gIHN0YXRpYyBsZW4odikge1xuICAgIHJldHVybiBNYXRoLnNxcnQoIHRoaXMubGVuU3EodikgKTtcbiAgfVxuICBsZW4oKSB7IHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmxlbih0aGlzKTsgfVxuXG4gIHN0YXRpYyBkaXN0U3EoYSwgYikge1xuICAgIGxldCB4ID0gYi54IC0gYS54O1xuICAgIGxldCB5ID0gYi55IC0gYS55O1xuICAgIHJldHVybiB4KnggKyB5Knk7XG4gIH1cbiAgZGlzdFNxKGIpIHsgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuZGlzdFNxKHRoaXMsIGIpOyB9XG5cbiAgc3RhdGljIGRpc3QoYSwgYikge1xuICAgIHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdFNxKGEsIGIpICk7XG4gIH1cbiAgZGlzdChiKSB7IHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmRpc3QodGhpcywgYik7IH1cblxuICBzdGF0aWMgbm9ybWFsaXplKHYpIHtcbiAgICBsZXQgbGVuID0gdGhpcy5sZW4odik7XG4gICAgcmV0dXJuIG5ldyBWZWMyKHYueCAvIGxlbiwgdi55IC8gbGVuKTtcbiAgfVxuICBub3JtYWxpemUoKSB7IHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5vcm1hbGl6ZSh0aGlzKTsgfVxuXG4gIHN0YXRpYyBpbnZlcnQodikge1xuICAgIHJldHVybiBuZXcgVmVjMigxL3YueCwgMS92LnkpO1xuICB9XG4gIGludmVydCgpIHsgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuaW52ZXJ0KHRoaXMpOyB9XG5cbiAgc3RhdGljIG5lZ2F0ZSh2KSB7XG4gICAgcmV0dXJuIG5ldyBWZWMyKC12LngsIC12LnkpO1xuICB9XG4gIG5lZ2F0ZSgpIHsgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmVnYXRlKHRoaXMpOyB9XG5cbiAgc3RhdGljIG11bHRpcGx5KGEsIGIpIHtcbiAgICByZXR1cm4gbmV3IFZlYzIoIGEueCAqIGIueCwgYS55ICogYi55ICk7XG4gIH1cbiAgbXVsdGlwbHkoYikgeyByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5tdWx0aXBseSh0aGlzLCBiKTsgfVxuXG4gIHN0YXRpYyBzY2FsZSh2LCBzKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsdGlwbHkodiwgbmV3IFZlYzIocywgcykpO1xuICB9XG4gIHNjYWxlKHMpIHsgcmV0dXJuIHRoaXMuY29uc3RydWN0b3Iuc2NhbGUodGhpcywgcyk7IH1cblxuICBzdGF0aWMgZGl2aWRlKGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcy5tdWx0aXBseSggYSwgdGhpcy5pbnZlcnQoYikgKTtcbiAgfVxuXG4gIHN0YXRpYyBhZGQoYSwgYikge1xuICAgIHJldHVybiBuZXcgVmVjMihhLnggKyBiLngsIGEueSArIGIueSk7XG4gIH1cbiAgYWRkKGIpIHsgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuYWRkKHRoaXMsIGIpOyB9XG5cbiAgc3RhdGljIGFkZF9zY2FsYXIodiwgcykge1xuICAgIHJldHVybiB0aGlzLmFkZCh2LCBuZXcgVmVjMihzLCBzKSk7XG4gIH1cbiAgYWRkX3NjYWxhcihzKSB7IHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmFkZF9zY2FsYXIodGhpcywgcyk7IH1cblxuICBzdGF0aWMgc3VidHJhY3QoYSwgYikge1xuICAgIHJldHVybiBuZXcgVmVjMihhLnggLSBiLngsIGEueSAtIGIueSk7XG4gIH1cbiAgc3VidHJhY3QoYikgeyByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5zdWJ0cmFjdCh0aGlzLCBiKTsgfVxuXG4gIHN0YXRpYyByb3RhdGUodiwgcikge1xuICAgIGxldCBzID0gTWF0aC5zaW4ocik7XG4gICAgbGV0IGMgPSBNYXRoLmNvcyhyKTtcbiAgICByZXR1cm4gbmV3IFZlYzIoIHYueCAqIGMgLSB2LnkgKiBzLCB2LnggKiBzICsgdi55ICogYyApO1xuICB9XG4gIHJvdGF0ZShyKSB7IHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnJvdGF0ZSh0aGlzLCByKTsgfVxuXG4gIHN0YXRpYyB0cmFuc2Zvcm0odiwgdCkge1xuICAgIHJldHVybiB2LnNjYWxlKCB0LnNjYWxlICogKHQuaGlkcGlfc2NhbGUgfHwgMSkgKS5yb3RhdGUodC5yb3RhdGlvbikuYWRkKHQucG9zaXRpb24pO1xuICB9XG4gIHRyYW5zZm9ybSh0KSB7IHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRyYW5zZm9ybSh0aGlzLCB0KTsgfVxufVxuIl19

//# sourceMappingURL=data:application/json;base64,
